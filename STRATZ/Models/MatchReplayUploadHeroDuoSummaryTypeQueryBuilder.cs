// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchReplayUploadHeroDuoSummaryTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadHeroDuoSummaryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCountWith" },
                new GraphQlFieldMetadata { Name = "winCountAgainst" },
                new GraphQlFieldMetadata { Name = "matchCountWith" },
                new GraphQlFieldMetadata { Name = "matchCountAgainst" }
            };

        protected override string TypeName { get { return "MatchReplayUploadHeroDuoSummaryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithWinCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptWinCountWith()
        {
            return ExceptField("winCountWith");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithWinCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptWinCountAgainst()
        {
            return ExceptField("winCountAgainst");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithMatchCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptMatchCountWith()
        {
            return ExceptField("matchCountWith");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithMatchCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptMatchCountAgainst()
        {
            return ExceptField("matchCountAgainst");
        }
    }
}

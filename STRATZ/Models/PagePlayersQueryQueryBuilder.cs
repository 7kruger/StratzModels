// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PagePlayersQueryQueryBuilder : GraphQlQueryBuilder<PagePlayersQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountByRank", IsComplex = true, QueryBuilderType = typeof(SteamAccountByRankTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PagePlayersQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PagePlayersQueryQueryBuilder WithSteamAccountByRank(SteamAccountByRankTypeQueryBuilder steamAccountByRankTypeQueryBuilder, QueryBuilderParameter<long?> week = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            return WithObjectField("steamAccountByRank", alias, steamAccountByRankTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayersQueryQueryBuilder ExceptSteamAccountByRank()
        {
            return ExceptField("steamAccountByRank");
        }
    }
}

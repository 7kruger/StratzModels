// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class AghanimLabMatchTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabMatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "didWin" },
                new GraphQlFieldMetadata { Name = "durationSeconds" },
                new GraphQlFieldMetadata { Name = "startDateTime" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "clusterId" },
                new GraphQlFieldMetadata { Name = "lobbyType" },
                new GraphQlFieldMetadata { Name = "numKills" },
                new GraphQlFieldMetadata { Name = "numDeaths" },
                new GraphQlFieldMetadata { Name = "numHumanPlayers" },
                new GraphQlFieldMetadata { Name = "gameMode" },
                new GraphQlFieldMetadata { Name = "replaySalt" },
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "depth" },
                new GraphQlFieldMetadata { Name = "seed" },
                new GraphQlFieldMetadata { Name = "battlePoints" },
                new GraphQlFieldMetadata { Name = "score" },
                new GraphQlFieldMetadata { Name = "arcaneFragments" },
                new GraphQlFieldMetadata { Name = "goldBags" },
                new GraphQlFieldMetadata { Name = "regionId" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(AghanimLabPlayerSeasonOneTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "depthList", IsComplex = true, QueryBuilderType = typeof(AghanimLabMatchDepthListTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "AghanimLabMatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabMatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AghanimLabMatchTypeQueryBuilder WithDidWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didWin", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDidWin()
        {
            return ExceptField("didWin");
        }

        public AghanimLabMatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public AghanimLabMatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public AghanimLabMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public AghanimLabMatchTypeQueryBuilder WithClusterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clusterId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptClusterId()
        {
            return ExceptField("clusterId");
        }

        public AghanimLabMatchTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public AghanimLabMatchTypeQueryBuilder WithNumKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numKills", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptNumKills()
        {
            return ExceptField("numKills");
        }

        public AghanimLabMatchTypeQueryBuilder WithNumDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptNumDeaths()
        {
            return ExceptField("numDeaths");
        }

        public AghanimLabMatchTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public AghanimLabMatchTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public AghanimLabMatchTypeQueryBuilder WithReplaySalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replaySalt", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptReplaySalt()
        {
            return ExceptField("replaySalt");
        }

        public AghanimLabMatchTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabMatchTypeQueryBuilder WithDepth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("depth", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDepth()
        {
            return ExceptField("depth");
        }

        public AghanimLabMatchTypeQueryBuilder WithSeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seed", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptSeed()
        {
            return ExceptField("seed");
        }

        public AghanimLabMatchTypeQueryBuilder WithBattlePoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("battlePoints", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptBattlePoints()
        {
            return ExceptField("battlePoints");
        }

        public AghanimLabMatchTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public AghanimLabMatchTypeQueryBuilder WithArcaneFragments(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("arcaneFragments", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptArcaneFragments()
        {
            return ExceptField("arcaneFragments");
        }

        public AghanimLabMatchTypeQueryBuilder WithGoldBags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldBags", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptGoldBags()
        {
            return ExceptField("goldBags");
        }

        public AghanimLabMatchTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public AghanimLabMatchTypeQueryBuilder WithPlayers(AghanimLabPlayerSeasonOneTypeQueryBuilder aghanimLabPlayerSeasonOneTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (steamAccountId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );

            return WithObjectField("players", alias, aghanimLabPlayerSeasonOneTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AghanimLabMatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public AghanimLabMatchTypeQueryBuilder WithDepthList(AghanimLabMatchDepthListTypeQueryBuilder aghanimLabMatchDepthListTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("depthList", alias, aghanimLabMatchDepthListTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDepthList()
        {
            return ExceptField("depthList");
        }
    }
}

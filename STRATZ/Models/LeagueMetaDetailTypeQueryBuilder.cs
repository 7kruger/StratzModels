// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class LeagueMetaDetailTypeQueryBuilder : GraphQlQueryBuilder<LeagueMetaDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lossCount" },
                new GraphQlFieldMetadata { Name = "winRate" },
                new GraphQlFieldMetadata { Name = "pickRate" },
                new GraphQlFieldMetadata { Name = "pickCount" },
                new GraphQlFieldMetadata { Name = "banRate" },
                new GraphQlFieldMetadata { Name = "banCount" }
            };

        protected override string TypeName { get { return "LeagueMetaDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueMetaDetailTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LeagueMetaDetailTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public LeagueMetaDetailTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }

        public LeagueMetaDetailTypeQueryBuilder WithWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptWinRate()
        {
            return ExceptField("winRate");
        }

        public LeagueMetaDetailTypeQueryBuilder WithPickRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptPickRate()
        {
            return ExceptField("pickRate");
        }

        public LeagueMetaDetailTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }

        public LeagueMetaDetailTypeQueryBuilder WithBanRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptBanRate()
        {
            return ExceptField("banRate");
        }

        public LeagueMetaDetailTypeQueryBuilder WithBanCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptBanCount()
        {
            return ExceptField("banCount");
        }
    }
}

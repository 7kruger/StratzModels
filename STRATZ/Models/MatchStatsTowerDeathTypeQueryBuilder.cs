// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchStatsTowerDeathTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsTowerDeathTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "attacker" }
            };

        protected override string TypeName { get { return "MatchStatsTowerDeathType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsTowerDeathTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchStatsTowerDeathTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public MatchStatsTowerDeathTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchStatsTowerDeathTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }
    }
}

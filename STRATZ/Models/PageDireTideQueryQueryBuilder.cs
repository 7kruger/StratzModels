// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PageDireTideQueryQueryBuilder : GraphQlQueryBuilder<PageDireTideQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "match", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winDay", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameHeroWinDayTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageDireTideQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageDireTideQueryQueryBuilder WithMatch(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, QueryBuilderParameter<long?> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("match", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageDireTideQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public PageDireTideQueryQueryBuilder WithMatches(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, QueryBuilderParameter<FilterDireTideCustomMatchRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matches", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageDireTideQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PageDireTideQueryQueryBuilder WithWinDay(DireTideCustomGameHeroWinDayTypeQueryBuilder direTideCustomGameHeroWinDayTypeQueryBuilder, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("winDay", alias, direTideCustomGameHeroWinDayTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageDireTideQueryQueryBuilder ExceptWinDay()
        {
            return ExceptField("winDay");
        }
    }
}

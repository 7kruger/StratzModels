// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class YogurtQueryQueryBuilder : GraphQlQueryBuilder<YogurtQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "team", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultTeam", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamMembers", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "overview", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadOverviewTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroSummary", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadHeroSummaryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "YogurtQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public YogurtQueryQueryBuilder WithTeam(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithObjectField("team", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public YogurtQueryQueryBuilder WithTeams(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teams", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public YogurtQueryQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public YogurtQueryQueryBuilder WithDefaultTeam(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("defaultTeam", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public YogurtQueryQueryBuilder ExceptDefaultTeam()
        {
            return ExceptField("defaultTeam");
        }

        public YogurtQueryQueryBuilder WithTeamMembers(MatchReplayUploadTeamMemberTypeQueryBuilder matchReplayUploadTeamMemberTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithObjectField("teamMembers", alias, matchReplayUploadTeamMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptTeamMembers()
        {
            return ExceptField("teamMembers");
        }

        public YogurtQueryQueryBuilder WithOverview(MatchReplayUploadOverviewTypeQueryBuilder matchReplayUploadOverviewTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<FilterMatchReplayUploadRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("overview", alias, matchReplayUploadOverviewTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptOverview()
        {
            return ExceptField("overview");
        }

        public YogurtQueryQueryBuilder WithHeroSummary(MatchReplayUploadHeroSummaryTypeQueryBuilder matchReplayUploadHeroSummaryTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<FilterMatchReplayUploadRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("heroSummary", alias, matchReplayUploadHeroSummaryTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptHeroSummary()
        {
            return ExceptField("heroSummary");
        }
    }
}

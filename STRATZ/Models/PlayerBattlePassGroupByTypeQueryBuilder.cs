// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerBattlePassGroupByTypeQueryBuilder : GraphQlQueryBuilder<PlayerBattlePassGroupByTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "playerCount" },
                new GraphQlFieldMetadata { Name = "sumLevels" },
                new GraphQlFieldMetadata { Name = "playerCountAt" }
            };

        protected override string TypeName { get { return "PlayerBattlePassGroupByType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBattlePassGroupByTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PlayerBattlePassGroupByTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public PlayerBattlePassGroupByTypeQueryBuilder WithSumLevels(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sumLevels", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptSumLevels()
        {
            return ExceptField("sumLevels");
        }

        public PlayerBattlePassGroupByTypeQueryBuilder WithPlayerCountAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCountAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptPlayerCountAt()
        {
            return ExceptField("playerCountAt");
        }
    }
}

// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchPlayerStatsActionReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsActionReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "moveToPosition" },
                new GraphQlFieldMetadata { Name = "moveToTarget" },
                new GraphQlFieldMetadata { Name = "attackPosition" },
                new GraphQlFieldMetadata { Name = "attackTarget" },
                new GraphQlFieldMetadata { Name = "castPosition" },
                new GraphQlFieldMetadata { Name = "castTarget" },
                new GraphQlFieldMetadata { Name = "castNoTarget" },
                new GraphQlFieldMetadata { Name = "heldPosition" },
                new GraphQlFieldMetadata { Name = "glyphCast" },
                new GraphQlFieldMetadata { Name = "scanUsed" },
                new GraphQlFieldMetadata { Name = "pingUsed" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsActionReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsActionReportTypeQueryBuilder WithMoveToPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moveToPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptMoveToPosition()
        {
            return ExceptField("moveToPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithMoveToTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moveToTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptMoveToTarget()
        {
            return ExceptField("moveToTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithAttackPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptAttackPosition()
        {
            return ExceptField("attackPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithAttackTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptAttackTarget()
        {
            return ExceptField("attackTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithCastPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptCastPosition()
        {
            return ExceptField("castPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithCastTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptCastTarget()
        {
            return ExceptField("castTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithCastNoTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castNoTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptCastNoTarget()
        {
            return ExceptField("castNoTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithHeldPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heldPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptHeldPosition()
        {
            return ExceptField("heldPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithGlyphCast(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("glyphCast", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptGlyphCast()
        {
            return ExceptField("glyphCast");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithScanUsed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scanUsed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptScanUsed()
        {
            return ExceptField("scanUsed");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithPingUsed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pingUsed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptPingUsed()
        {
            return ExceptField("pingUsed");
        }
    }
}

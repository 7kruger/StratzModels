// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace STRATZ.Models
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool RequiresParameters { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }
    
        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;
    
            if (value is null)
                return "null";
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return $"\"{value}\"";
    
            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }
    
        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }
    
    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }
    
    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    
        public static readonly DefaultGraphQlArgumentBuilder Instance = new();
    
        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;
    
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;
    
                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;
    
                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }
    
            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }
    
            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
    #endif
    
            graphQlString = null;
            return false;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            BuildOperationSignature(builder, options, indentationSpace, level);
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;
    
            builder.Append(_operationType);
    
            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }
    
            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");
    
                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;
    
                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);
    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);
    
                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }
    
                    if (!isIndentedFormatting)
                        separator = ",";
                }
    
                builder.Append(")");
            }
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (_operationType != null && GetType() == field.QueryBuilderType || parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildQueryBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(
                            queryBuilder,
                            new object[] { InitializeChildQueryBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildQueryBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields.Where(f => !f.RequiresParameters), parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string Byte = "Byte";
        public const string DateTime = "DateTime";
        public const string Decimal = "Decimal";
        public const string Float = "Float";
        public const string Guid = "Guid";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Long = "Long";
        public const string Short = "Short";
        public const string String = "String";
        public const string UShort = "UShort";

        public const string AbilityDispellEnum = "AbilityDispellEnum";
        public const string AghanimLabDepthListAscensionAbilitiesEnum = "AghanimLabDepthListAscensionAbilitiesEnum";
        public const string AghanimLabDepthListEncounterEnum = "AghanimLabDepthListEncounterEnum";
        public const string AghanimLabDepthListRewardEnum = "AghanimLabDepthListRewardEnum";
        public const string AghanimLabMatchDifficultyEnum = "AghanimLabMatchDifficultyEnum";
        public const string AghanimLabPlayerBlessingEnum = "AghanimLabPlayerBlessingEnum";
        public const string BasicRegionType = "BasicRegionType";
        public const string BuildingType = "BuildingType";
        public const string Damage = "Damage";
        public const string Feat = "Feat";
        public const string FilterAghanimLabMatchOrderBy = "FilterAghanimLabMatchOrderBy";
        public const string FilterDireTide2020CustomGameMatchOrderBy = "FilterDireTide2020CustomGameMatchOrderBy";
        public const string FilterHeroWinRequestGroupBy = "FilterHeroWinRequestGroupBy";
        public const string FilterLeaderboardGuildOrderBy = "FilterLeaderboardGuildOrderBy";
        public const string FilterLeaderboardOrder = "FilterLeaderboardOrder";
        public const string FilterMatchGroupOrderByEnum = "FilterMatchGroupOrderByEnum";
        public const string FilterOrder = "FilterOrder";
        public const string FilterOrderBy = "FilterOrderBy";
        public const string FilterPlayerTeammateEnum = "FilterPlayerTeammateEnum";
        public const string FindMatchPlayerGroupBy = "FindMatchPlayerGroupBy";
        public const string FindMatchPlayerList = "FindMatchPlayerList";
        public const string FindMatchPlayerOrderBy = "FindMatchPlayerOrderBy";
        public const string GameModeEnumType = "GameModeEnumType";
        public const string GoldReason = "GoldReason";
        public const string HeroPrimaryAttributeType = "HeroPrimaryAttributeType";
        public const string HeroRoleEnum = "HeroRoleEnum";
        public const string LaneOutcomeEnums = "LaneOutcomeEnums";
        public const string Language = "Language";
        public const string LeaderboardDivision = "LeaderboardDivision";
        public const string LeagueNodeDefaultGroupEnum = "LeagueNodeDefaultGroupEnum";
        public const string LeagueNodeGroupTypeEnum = "LeagueNodeGroupTypeEnum";
        public const string LeagueRegion = "LeagueRegion";
        public const string LeagueStage = "LeagueStage";
        public const string LeagueTier = "LeagueTier";
        public const string LeaverStatusEnum = "LeaverStatusEnum";
        public const string LobbyTypeEnum = "LobbyTypeEnum";
        public const string MapLocationEnums = "MapLocationEnums";
        public const string MatchAnalysisOutcomeType = "MatchAnalysisOutcomeType";
        public const string MatchLaneType = "MatchLaneType";
        public const string MatchLiveGameState = "MatchLiveGameState";
        public const string MatchLiveRequestOrderBy = "MatchLiveRequestOrderBy";
        public const string MatchPlayerAward = "MatchPlayerAward";
        public const string MatchPlayerPositionType = "MatchPlayerPositionType";
        public const string MatchPlayerRoleType = "MatchPlayerRoleType";
        public const string MatchPlayerTeamPickOrderType = "MatchPlayerTeamPickOrderType";
        public const string NeutralItemTierEnum = "NeutralItemTierEnum";
        public const string PatchNoteType = "PatchNoteType";
        public const string PlayerBattlePassGroupByEnum = "PlayerBattlePassGroupByEnum";
        public const string PlayerBehaviorActivity = "PlayerBehaviorActivity";
        public const string PlusLetterType = "PlusLetterType";
        public const string RankBracket = "RankBracket";
        public const string RankBracketBasicEnum = "RankBracketBasicEnum";
        public const string RoshDifficultyEnum = "ROSHDifficultyEnum";
        public const string RuneAction = "RuneAction";
        public const string RuneEnums = "RuneEnums";
        public const string Search = "Search";
        public const string Series = "Series";
        public const string SpawnActionType = "SpawnActionType";
        public const string StratzApiType = "StratzApiType";
        public const string Streak = "Streak";
        public const string TableCalculateEnum = "TableCalculateEnum";
        public const string WardType = "WardType";
        public const string XpReason = "XpReason";

        public const string AbilityActiveListType = "AbilityActiveListType";
        public const string AbilityAttributeType = "AbilityAttributeType";
        public const string AbilityCustomGameLanguageType = "AbilityCustomGameLanguageType";
        public const string AbilityCustomGameType = "AbilityCustomGameType";
        public const string AbilityLanguageType = "AbilityLanguageType";
        public const string AbilityLearnEventsType = "AbilityLearnEventsType";
        public const string AbilityStatType = "AbilityStatType";
        public const string AbilityType = "AbilityType";
        public const string AbilityUsedEventsType = "AbilityUsedEventsType";
        public const string AdminMutation = "AdminMutation";
        public const string AdminQuery = "AdminQuery";
        public const string AghanimLabDepthListAscensionAbilitiesObjectType = "AghanimLabDepthListAscensionAbilitiesObjectType";
        public const string AghanimLabHeroAbilityType = "AghanimLabHeroAbilityType";
        public const string AghanimLabHeroCompositionType = "AghanimLabHeroCompositionType";
        public const string AghanimLabHeroWinRateType = "AghanimLabHeroWinRateType";
        public const string AghanimLabMatchDepthListType = "AghanimLabMatchDepthListType";
        public const string AghanimLabMatchType = "AghanimLabMatchType";
        public const string AghanimLabPlayerBlessingObjectType = "AghanimLabPlayerBlessingObjectType";
        public const string AghanimLabPlayerDepthListType = "AghanimLabPlayerDepthListType";
        public const string AghanimLabPlayerSeasonOneType = "AghanimLabPlayerSeasonOneType";
        public const string AghanimLabRoomType = "AghanimLabRoomType";
        public const string AssistDetailType = "AssistDetailType";
        public const string BattlepassPredictionHeroType = "BattlepassPredictionHeroType";
        public const string BattlepassPredictionIdValueType = "BattlepassPredictionIdValueType";
        public const string BattlepassPredictionPlayerType = "BattlepassPredictionPlayerType";
        public const string BattlepassPredictionTeamType = "BattlepassPredictionTeamType";
        public const string BattlepassPredictionTournamentType = "BattlepassPredictionTournamentType";
        public const string BlogType = "BlogType";
        public const string BuyBackDetailType = "BuyBackDetailType";
        public const string CaptainJackIdentityApiApplicationType = "CaptainJackIdentityApiApplicationType";
        public const string CaptainJackIdentityPrivateProfileType = "CaptainJackIdentityPrivateProfileType";
        public const string CaptainJackIdentityPublicProfileType = "CaptainJackIdentityPublicProfileType";
        public const string ClusterType = "ClusterType";
        public const string ConstantQuery = "ConstantQuery";
        public const string DeathDetailType = "DeathDetailType";
        public const string DireTideCustomGameHeroWinDayType = "DireTideCustomGameHeroWinDayType";
        public const string DireTideCustomGameMatchType = "DireTideCustomGameMatchType";
        public const string DireTideCustomGamePlayerType = "DireTideCustomGamePlayerType";
        public const string DotaMutation = "DotaMutation";
        public const string DotaNextQuery = "DotaNextQuery";
        public const string DotaNextWithAllyType = "DotaNextWithAllyType";
        public const string DotaPlusWeekType = "DotaPlusWeekType";
        public const string DotaQuery = "DotaQuery";
        public const string DotaSubscription = "DotaSubscription";
        public const string DotaUserMutation = "DotaUserMutation";
        public const string ExperienceDetailType = "ExperienceDetailType";
        public const string FeatType = "FeatType";
        public const string FeedResponseType = "FeedResponseType";
        public const string FeedType = "FeedType";
        public const string FollowerType = "FollowerType";
        public const string GameModeType = "GameModeType";
        public const string GameVersionType = "GameVersionType";
        public const string GoldDetailType = "GoldDetailType";
        public const string GuildMemberType = "GuildMemberType";
        public const string GuildType = "GuildType";
        public const string HealDetailType = "HealDetailType";
        public const string HeroAbilityMaxType = "HeroAbilityMaxType";
        public const string HeroAbilityMinType = "HeroAbilityMinType";
        public const string HeroAbilityTalentType = "HeroAbilityTalentType";
        public const string HeroAbilityType = "HeroAbilityType";
        public const string HeroBanType = "HeroBanType";
        public const string HeroDamageDetailType = "HeroDamageDetailType";
        public const string HeroDotaPlusLeaderboardRankTopType = "HeroDotaPlusLeaderboardRankTopType";
        public const string HeroDotaPlusLeaderboardRankType = "HeroDotaPlusLeaderboardRankType";
        public const string HeroDryadType = "HeroDryadType";
        public const string HeroGuideListType = "HeroGuideListType";
        public const string HeroGuideType = "HeroGuideType";
        public const string HeroItemBootPurchaseType = "HeroItemBootPurchaseType";
        public const string HeroItemPurchaseType = "HeroItemPurchaseType";
        public const string HeroItemStartingPurchaseType = "HeroItemStartingPurchaseType";
        public const string HeroLaneOutcomeType = "HeroLaneOutcomeType";
        public const string HeroLanguageType = "HeroLanguageType";
        public const string HeroMatchupType = "HeroMatchupType";
        public const string HeroNeutralItemType = "HeroNeutralItemType";
        public const string HeroPositionTimeDetailType = "HeroPositionTimeDetailType";
        public const string HeroRampageObjectType = "HeroRampageObjectType";
        public const string HeroRoleType = "HeroRoleType";
        public const string HeroStatsHeroDryadType = "HeroStatsHeroDryadType";
        public const string HeroStatsQuery = "HeroStatsQuery";
        public const string HeroStatType = "HeroStatType";
        public const string HeroTalentType = "HeroTalentType";
        public const string HeroType = "HeroType";
        public const string HeroWinDayType = "HeroWinDayType";
        public const string HeroWinGameVersionType = "HeroWinGameVersionType";
        public const string HeroWinHourType = "HeroWinHourType";
        public const string HeroWinMonthType = "HeroWinMonthType";
        public const string HeroWinWeekType = "HeroWinWeekType";
        public const string HomepageHeroDryadType = "HomepageHeroDryadType";
        public const string HomepageHeroSynergyType = "HomepageHeroSynergyType";
        public const string ImpGeneratorMatchPlayerType = "ImpGeneratorMatchPlayerType";
        public const string ImpGeneratorPlayerEventType = "ImpGeneratorPlayerEventType";
        public const string ImpGeneratorPlayerType = "ImpGeneratorPlayerType";
        public const string ImpQuery = "ImpQuery";
        public const string InventoryObjectType = "InventoryObjectType";
        public const string InventoryType = "InventoryType";
        public const string ItemAttributeType = "ItemAttributeType";
        public const string ItemComponentType = "ItemComponentType";
        public const string ItemLanguageType = "ItemLanguageType";
        public const string ItemPurchaseType = "ItemPurchaseType";
        public const string ItemStatType = "ItemStatType";
        public const string ItemType = "ItemType";
        public const string ItemUsedEventType = "ItemUsedEventType";
        public const string KillDetailType = "KillDetailType";
        public const string LanguageType = "LanguageType";
        public const string LastHitDetailType = "LastHitDetailType";
        public const string LeaderboardQuery = "LeaderboardQuery";
        public const string LeagueBattlePassType = "LeagueBattlePassType";
        public const string LeagueDpcPositionStatObjectType = "LeagueDpcPositionStatObjectType";
        public const string LeagueMetaDetailType = "LeagueMetaDetailType";
        public const string LeagueMetaType = "LeagueMetaType";
        public const string LeagueNodeGroupType = "LeagueNodeGroupType";
        public const string LeagueNodeType = "LeagueNodeType";
        public const string LeaguePrizePoolPercentageType = "LeaguePrizePoolPercentageType";
        public const string LeagueRegisteredPlayerType = "LeagueRegisteredPlayerType";
        public const string LeagueStatType = "LeagueStatType";
        public const string LeagueStreamType = "LeagueStreamType";
        public const string LeagueTableHeroLanesObjectType = "LeagueTableHeroLanesObjectType";
        public const string LeagueTableHeroOverviewType = "LeagueTableHeroOverviewType";
        public const string LeagueTableHeroPlayersObjectType = "LeagueTableHeroPlayersObjectType";
        public const string LeagueTableHeroStatsType = "LeagueTableHeroStatsType";
        public const string LeagueTableHeroType = "LeagueTableHeroType";
        public const string LeagueTablePlayerHeroesObjectType = "LeagueTablePlayerHeroesObjectType";
        public const string LeagueTablePlayerLanesObjectType = "LeagueTablePlayerLanesObjectType";
        public const string LeagueTablePlayerOverviewType = "LeagueTablePlayerOverviewType";
        public const string LeagueTablePlayerStatsType = "LeagueTablePlayerStatsType";
        public const string LeagueTablePlayerType = "LeagueTablePlayerType";
        public const string LeagueTableTeamHeroesObjectType = "LeagueTableTeamHeroesObjectType";
        public const string LeagueTableTeamLanesObjectType = "LeagueTableTeamLanesObjectType";
        public const string LeagueTableTeamOverviewType = "LeagueTableTeamOverviewType";
        public const string LeagueTableTeamStatsType = "LeagueTableTeamStatsType";
        public const string LeagueTableTeamType = "LeagueTableTeamType";
        public const string LeagueTableType = "LeagueTableType";
        public const string LeagueType = "LeagueType";
        public const string LiveEventMatchDireTideStompType = "LiveEventMatchDireTideStompType";
        public const string LiveEventPlayerDireTideCandyScoredType = "LiveEventPlayerDireTideCandyScoredType";
        public const string LiveEventPlayerHeroAssistsType = "LiveEventPlayerHeroAssistsType";
        public const string LiveEventPlayerHeroBuildingDamageType = "LiveEventPlayerHeroBuildingDamageType";
        public const string LiveEventPlayerHeroDewardType = "LiveEventPlayerHeroDewardType";
        public const string LiveEventPlayerHeroDotaPlusLevelType = "LiveEventPlayerHeroDotaPlusLevelType";
        public const string LiveEventPlayerHeroExpPerMinuteType = "LiveEventPlayerHeroExpPerMinuteType";
        public const string LiveEventPlayerHeroGoldPerMinuteType = "LiveEventPlayerHeroGoldPerMinuteType";
        public const string LiveEventPlayerHeroHealingType = "LiveEventPlayerHeroHealingType";
        public const string LiveEventPlayerHeroHeroDamageType = "LiveEventPlayerHeroHeroDamageType";
        public const string LiveEventPlayerHeroHighImpType = "LiveEventPlayerHeroHighImpType";
        public const string LiveEventPlayerHeroItemPurchaseType = "LiveEventPlayerHeroItemPurchaseType";
        public const string LiveEventPlayerHeroKillsType = "LiveEventPlayerHeroKillsType";
        public const string LiveEventPlayerHeroWinStreakType = "LiveEventPlayerHeroWinStreakType";
        public const string LiveEventPlayerRampageType = "LiveEventPlayerRampageType";
        public const string LiveEventPlayerRankUpType = "LiveEventPlayerRankUpType";
        public const string LiveEventPlayerWinStreakType = "LiveEventPlayerWinStreakType";
        public const string LiveEventProPlayerLiveType = "LiveEventProPlayerLiveType";
        public const string LiveQuery = "LiveQuery";
        public const string LobbyTypeType = "LobbyTypeType";
        public const string MatchesDayType = "MatchesDayType";
        public const string MatchesGameVersionType = "MatchesGameVersionType";
        public const string MatchesHourType = "MatchesHourType";
        public const string MatchesMonthType = "MatchesMonthType";
        public const string MatchesWeekType = "MatchesWeekType";
        public const string MatchGroupByAssistsType = "MatchGroupByAssistsType";
        public const string MatchGroupByAwardType = "MatchGroupByAwardType";
        public const string MatchGroupByClusterType = "MatchGroupByClusterType";
        public const string MatchGroupByDateDayHeroType = "MatchGroupByDateDayHeroType";
        public const string MatchGroupByDateDayType = "MatchGroupByDateDayType";
        public const string MatchGroupByDeathsType = "MatchGroupByDeathsType";
        public const string MatchGroupByDurationMinutesType = "MatchGroupByDurationMinutesType";
        public const string MatchGroupByFactionType = "MatchGroupByFactionType";
        public const string MatchGroupByGameModeType = "MatchGroupByGameModeType";
        public const string MatchGroupByGameVersionType = "MatchGroupByGameVersionType";
        public const string MatchGroupByGoldPerMinuteType = "MatchGroupByGoldPerMinuteType";
        public const string MatchGroupByHeroPerformanceType = "MatchGroupByHeroPerformanceType";
        public const string MatchGroupByHeroType = "MatchGroupByHeroType";
        public const string MatchGroupByHourType = "MatchGroupByHourType";
        public const string MatchGroupByIsIntentionalFeedingType = "MatchGroupByIsIntentionalFeedingType";
        public const string MatchGroupByIsLeagueType = "MatchGroupByIsLeagueType";
        public const string MatchGroupByIsLeaverType = "MatchGroupByIsLeaverType";
        public const string MatchGroupByIsPartyType = "MatchGroupByIsPartyType";
        public const string MatchGroupByIsRandomType = "MatchGroupByIsRandomType";
        public const string MatchGroupByIsSeriesType = "MatchGroupByIsSeriesType";
        public const string MatchGroupByIsStatsType = "MatchGroupByIsStatsType";
        public const string MatchGroupByIsVictoryType = "MatchGroupByIsVictoryType";
        public const string MatchGroupByKillsType = "MatchGroupByKillsType";
        public const string MatchGroupByLaneType = "MatchGroupByLaneType";
        public const string MatchGroupByLeagueIdType = "MatchGroupByLeagueIdType";
        public const string MatchGroupByLevelType = "MatchGroupByLevelType";
        public const string MatchGroupByLobbyTypeType = "MatchGroupByLobbyTypeType";
        public const string MatchGroupByPositionType = "MatchGroupByPositionType";
        public const string MatchGroupByRegionType = "MatchGroupByRegionType";
        public const string MatchGroupByRoamLaneType = "MatchGroupByRoamLaneType";
        public const string MatchGroupByRoleType = "MatchGroupByRoleType";
        public const string MatchGroupBySteamAccountIdAgainstTeamType = "MatchGroupBySteamAccountIdAgainstTeamType";
        public const string MatchGroupBySteamAccountIdHeroIdAgainstTeamType = "MatchGroupBySteamAccountIdHeroIdAgainstTeamType";
        public const string MatchGroupBySteamAccountIdHeroIdType = "MatchGroupBySteamAccountIdHeroIdType";
        public const string MatchGroupBySteamAccountIdHeroIdWithTeamType = "MatchGroupBySteamAccountIdHeroIdWithTeamType";
        public const string MatchGroupBySteamAccountIdType = "MatchGroupBySteamAccountIdType";
        public const string MatchGroupBySteamAccountIdWithTeamType = "MatchGroupBySteamAccountIdWithTeamType";
        public const string MatchGroupByTeamType = "MatchGroupByTeamType";
        public const string MatchGroupByTotalKillsType = "MatchGroupByTotalKillsType";
        public const string MatchLiveBuildingDetailType = "MatchLiveBuildingDetailType";
        public const string MatchLiveInsightType = "MatchLiveInsightType";
        public const string MatchLivePickBanType = "MatchLivePickBanType";
        public const string MatchLivePlaybackDataType = "MatchLivePlaybackDataType";
        public const string MatchLivePlayerAssistDetailType = "MatchLivePlayerAssistDetailType";
        public const string MatchLivePlayerDeathDetailType = "MatchLivePlayerDeathDetailType";
        public const string MatchLivePlayerDenyDetailType = "MatchLivePlayerDenyDetailType";
        public const string MatchLivePlayerExperienceDetailType = "MatchLivePlayerExperienceDetailType";
        public const string MatchLivePlayerGoldDetailType = "MatchLivePlayerGoldDetailType";
        public const string MatchLivePlayerImpDetailType = "MatchLivePlayerImpDetailType";
        public const string MatchLivePlayerInventoryDetailType = "MatchLivePlayerInventoryDetailType";
        public const string MatchLivePlayerKillDetailType = "MatchLivePlayerKillDetailType";
        public const string MatchLivePlayerLastHitDetailType = "MatchLivePlayerLastHitDetailType";
        public const string MatchLivePlayerLevelDetailType = "MatchLivePlayerLevelDetailType";
        public const string MatchLivePlayerPositionDetailType = "MatchLivePlayerPositionDetailType";
        public const string MatchLivePlayerType = "MatchLivePlayerType";
        public const string MatchLiveRoshanDetailType = "MatchLiveRoshanDetailType";
        public const string MatchLiveTeamScoreDetailType = "MatchLiveTeamScoreDetailType";
        public const string MatchLiveType = "MatchLiveType";
        public const string MatchLiveWinRateDetailType = "MatchLiveWinRateDetailType";
        public const string MatchmakingStatsType = "MatchmakingStatsType";
        public const string MatchPickBanGroupByType = "MatchPickBanGroupByType";
        public const string MatchPlaybackDataBuildingEventType = "MatchPlaybackDataBuildingEventType";
        public const string MatchplaybackDataCourierEventObjectType = "MatchplaybackDataCourierEventObjectType";
        public const string MatchPlaybackDataCourierEventType = "MatchPlaybackDataCourierEventType";
        public const string MatchPlaybackDataRoshanEventType = "MatchPlaybackDataRoshanEventType";
        public const string MatchPlaybackDataRuneEventType = "MatchPlaybackDataRuneEventType";
        public const string MatchPlaybackDataTowerDeathEventType = "MatchPlaybackDataTowerDeathEventType";
        public const string MatchPlaybackDataType = "MatchPlaybackDataType";
        public const string MatchPlaybackDataWardEventType = "MatchPlaybackDataWardEventType";
        public const string MatchPlayerAdditionalUnitType = "MatchPlayerAdditionalUnitType";
        public const string MatchPlayerHeroDamageSourceAbilityReportObjectType = "MatchPlayerHeroDamageSourceAbilityReportObjectType";
        public const string MatchPlayerHeroDamageSourceItemReportObjectType = "MatchPlayerHeroDamageSourceItemReportObjectType";
        public const string MatchPlayerHeroDamageTargetReportObjectType = "MatchPlayerHeroDamageTargetReportObjectType";
        public const string MatchPlayerHeroDamageTotalRecievedReportObjectType = "MatchPlayerHeroDamageTotalRecievedReportObjectType";
        public const string MatchPlayerHeroDamageTotalReportObjectType = "MatchPlayerHeroDamageTotalReportObjectType";
        public const string MatchPlayerInventoryObjectType = "MatchPlayerInventoryObjectType";
        public const string MatchPlayerInventoryType = "MatchPlayerInventoryType";
        public const string MatchPlayerItemPurchaseEventType = "MatchPlayerItemPurchaseEventType";
        public const string MatchPlayerLivePlaybackDataType = "MatchPlayerLivePlaybackDataType";
        public const string MatchPlayerPlaybackDataType = "MatchPlayerPlaybackDataType";
        public const string MatchPlayerSpectatorType = "MatchPlayerSpectatorType";
        public const string MatchPlayerSpiritBearInventoryType = "MatchPlayerSpiritBearInventoryType";
        public const string MatchPlayerStatsAbilityCastObjectType = "MatchPlayerStatsAbilityCastObjectType";
        public const string MatchPlayerStatsAbilityCastReportType = "MatchPlayerStatsAbilityCastReportType";
        public const string MatchPlayerStatsActionReportType = "MatchPlayerStatsActionReportType";
        public const string MatchPlayerStatsAllTalkEventType = "MatchPlayerStatsAllTalkEventType";
        public const string MatchPlayerStatsAssistEventType = "MatchPlayerStatsAssistEventType";
        public const string MatchPlayerStatsBuffEventType = "MatchPlayerStatsBuffEventType";
        public const string MatchPlayerStatsChatWheelEventType = "MatchPlayerStatsChatWheelEventType";
        public const string MatchPlayerStatsCourierKillEventType = "MatchPlayerStatsCourierKillEventType";
        public const string MatchPlayerStatsDeathEventType = "MatchPlayerStatsDeathEventType";
        public const string MatchPlayerStatsFarmDistributionObjectType = "MatchPlayerStatsFarmDistributionObjectType";
        public const string MatchPlayerStatsFarmDistributionReportType = "MatchPlayerStatsFarmDistributionReportType";
        public const string MatchPlayerStatsHeroDamageReportType = "MatchPlayerStatsHeroDamageReportType";
        public const string MatchPlayerStatsItemUsedEventType = "MatchPlayerStatsItemUsedEventType";
        public const string MatchPlayerStatsKillEventType = "MatchPlayerStatsKillEventType";
        public const string MatchPlayerStatsLocationReportType = "MatchPlayerStatsLocationReportType";
        public const string MatchPlayerStatsRuneEventType = "MatchPlayerStatsRuneEventType";
        public const string MatchPlayerStatsTowerDamageReportType = "MatchPlayerStatsTowerDamageReportType";
        public const string MatchPlayerStatsType = "MatchPlayerStatsType";
        public const string MatchPlayerStatsWardEventType = "MatchPlayerStatsWardEventType";
        public const string MatchPlayerType = "MatchPlayerType";
        public const string MatchPlayerWardDestuctionObjectType = "MatchPlayerWardDestuctionObjectType";
        public const string MatchReplayUploadHeroDuoSummaryType = "MatchReplayUploadHeroDuoSummaryType";
        public const string MatchReplayUploadHeroSummaryType = "MatchReplayUploadHeroSummaryType";
        public const string MatchReplayUploadMatchType = "MatchReplayUploadMatchType";
        public const string MatchReplayUploadOverviewType = "MatchReplayUploadOverviewType";
        public const string MatchReplayUploadPickBanType = "MatchReplayUploadPickBanType";
        public const string MatchReplayUploadPlayerStatsItemsType = "MatchReplayUploadPlayerStatsItemsType";
        public const string MatchReplayUploadPlayerType = "MatchReplayUploadPlayerType";
        public const string MatchReplayUploadTeamMemberType = "MatchReplayUploadTeamMemberType";
        public const string MatchReplayUploadTeamType = "MatchReplayUploadTeamType";
        public const string MatchStatsChatEventType = "MatchStatsChatEventType";
        public const string MatchStatsLaneReportFactionLaneObject = "MatchStatsLaneReportFactionLaneObject";
        public const string MatchStatsLaneReportFactionObjectType = "MatchStatsLaneReportFactionObjectType";
        public const string MatchStatsLaneReportType = "MatchStatsLaneReportType";
        public const string MatchStatsOutpostReportObjectType = "MatchStatsOutpostReportObjectType";
        public const string MatchStatsPickBanType = "MatchStatsPickBanType";
        public const string MatchStatsTowerDeathType = "MatchStatsTowerDeathType";
        public const string MatchStatsTowerReportObjectType = "MatchStatsTowerReportObjectType";
        public const string MatchStatsTowerReportType = "MatchStatsTowerReportType";
        public const string MatchType = "MatchType";
        public const string ModifierType = "ModifierType";
        public const string NewsItemType = "NewsItemType";
        public const string NpcStatType = "NpcStatType";
        public const string NpcType = "NpcType";
        public const string PageAghanimQuery = "PageAghanimQuery";
        public const string PageBattlepassQuery = "PageBattlepassQuery";
        public const string PageDireTideQuery = "PageDireTideQuery";
        public const string PageLeaguesQuery = "PageLeaguesQuery";
        public const string PageMatchesQuery = "PageMatchesQuery";
        public const string PagePlayerQuery = "PagePlayerQuery";
        public const string PagePlayersQuery = "PagePlayersQuery";
        public const string PageQuery = "PageQuery";
        public const string PatchNoteLanguageType = "PatchNoteLanguageType";
        public const string PlayerAbilityType = "PlayerAbilityType";
        public const string PlayerActivitySummaryType = "PlayerActivitySummaryType";
        public const string PlayerBadgeType = "PlayerBadgeType";
        public const string PlayerBattlePassGroupByType = "PlayerBattlePassGroupByType";
        public const string PlayerBattlePassResponseType = "PlayerBattlePassResponseType";
        public const string PlayerBattlePassType = "PlayerBattlePassType";
        public const string PlayerBreakdownObjectType = "PlayerBreakdownObjectType";
        public const string PlayerBreakdownType = "PlayerBreakdownType";
        public const string PlayerCardHoverHeroType = "PlayerCardHoverHeroType";
        public const string PlayerCardHoverType = "PlayerCardHoverType";
        public const string PlayerCoachingLeaderboardResponseType = "PlayerCoachingLeaderboardResponseType";
        public const string PlayerCoachingLeaderboardType = "PlayerCoachingLeaderboardType";
        public const string PlayerConductResponseType = "PlayerConductResponseType";
        public const string PlayerDraftHeroHighlightType = "PlayerDraftHeroHighlightType";
        public const string PlayerHeroDotaPlusLeaderboardRankResponseType = "PlayerHeroDotaPlusLeaderboardRankResponseType";
        public const string PlayerHeroesPerformanceScoreType = "PlayerHeroesPerformanceScoreType";
        public const string PlayerHeroesPerformanceType = "PlayerHeroesPerformanceType";
        public const string PlayerHeroPerformanceLongestStreakType = "PlayerHeroPerformanceLongestStreakType";
        public const string PlayerLeaderBoardByHeroType = "PlayerLeaderBoardByHeroType";
        public const string PlayerPerformanceCompositionHeroType = "PlayerPerformanceCompositionHeroType";
        public const string PlayerPerformanceCompositionType = "PlayerPerformanceCompositionType";
        public const string PlayerPerformancePositionObjectType = "PlayerPerformancePositionObjectType";
        public const string PlayerPerformancePositionType = "PlayerPerformancePositionType";
        public const string PlayerPerformanceType = "PlayerPerformanceType";
        public const string PlayerPlayedWithProPlayerMatchType = "PlayerPlayedWithProPlayerMatchType";
        public const string PlayerPlayedWithProPlayerType = "PlayerPlayedWithProPlayerType";
        public const string PlayerPlayedWithProTeamType = "PlayerPlayedWithProTeamType";
        public const string PlayerPlayedWithProType = "PlayerPlayedWithProType";
        public const string PlayerRuneDetailType = "PlayerRuneDetailType";
        public const string PlayerTeammateType = "PlayerTeammateType";
        public const string PlayerType = "PlayerType";
        public const string PlayerUpdateAttributeDetailType = "PlayerUpdateAttributeDetailType";
        public const string PlayerUpdateBattleDetailType = "PlayerUpdateBattleDetailType";
        public const string PlayerUpdateGoldDetailType = "PlayerUpdateGoldDetailType";
        public const string PlayerUpdateHealthDetailType = "PlayerUpdateHealthDetailType";
        public const string PlayerUpdateLevelDetailType = "PlayerUpdateLevelDetailType";
        public const string PlayerUpdatePositionDetailType = "PlayerUpdatePositionDetailType";
        public const string PlusDraftPlayerHeroObjectType = "PlusDraftPlayerHeroObjectType";
        public const string PlusDraftPlayerType = "PlusDraftPlayerType";
        public const string PlusDraftType = "PlusDraftType";
        public const string PlusHeroTeamStatusAveragesType = "PlusHeroTeamStatusAveragesType";
        public const string PlusHeroTeamStatusDetailType = "PlusHeroTeamStatusDetailType";
        public const string PlusHoverBanType = "PlusHoverBanType";
        public const string PlusHoverType = "PlusHoverType";
        public const string PlusPlayerHoverHeroType = "PlusPlayerHoverHeroType";
        public const string PlusPlayerHoverPlayerType = "PlusPlayerHoverPlayerType";
        public const string PlusPlayerHoverType = "PlusPlayerHoverType";
        public const string PlusQuery = "PlusQuery";
        public const string ProPlayerFollowType = "ProPlayerFollowType";
        public const string ProSteamAccountType = "ProSteamAccountType";
        public const string RabbitDetailType = "RabbitDetailType";
        public const string RabbitQueueDetailType = "RabbitQueueDetailType";
        public const string RegionType = "RegionType";
        public const string RoleType = "RoleType";
        public const string RoshCaptainJackIdentityStatDifficultyType = "ROSHCaptainJackIdentityStatDifficultyType";
        public const string RoshGlobalStatType = "ROSHGlobalStatType";
        public const string RoshMutation = "ROSHMutation";
        public const string RoshQuery = "RoshQuery";
        public const string SearchType = "SearchType";
        public const string SeriesType = "SeriesType";
        public const string ServerStatusType = "ServerStatusType";
        public const string SpiritBearInventoryObjectType = "SpiritBearInventoryObjectType";
        public const string SpiritBearInventoryType = "SpiritBearInventoryType";
        public const string SteamAccountBattlePassType = "SteamAccountBattlePassType";
        public const string SteamAccountByRankType = "SteamAccountByRankType";
        public const string SteamAccountNameType = "SteamAccountNameType";
        public const string SteamAccountSeasonActiveLeaderboardCountryDataType = "SteamAccountSeasonActiveLeaderboardCountryDataType";
        public const string SteamAccountSeasonActiveLeaderboardPositionDataType = "SteamAccountSeasonActiveLeaderboardPositionDataType";
        public const string SteamAccountSeasonActiveLeaderboardRankType = "SteamAccountSeasonActiveLeaderboardRankType";
        public const string SteamAccountSeasonActiveLeaderboardType = "SteamAccountSeasonActiveLeaderboardType";
        public const string SteamAccountSeasonLeaderBoardRankType = "SteamAccountSeasonLeaderBoardRankType";
        public const string SteamAccountSeasonRankType = "SteamAccountSeasonRankType";
        public const string SteamAccountTeamMemberType = "SteamAccountTeamMemberType";
        public const string SteamAccountType = "SteamAccountType";
        public const string SteamApiDetailOutageType = "SteamApiDetailOutageType";
        public const string SteamApiDetailType = "SteamApiDetailType";
        public const string StratzQuery = "StratzQuery";
        public const string StreakEventType = "StreakEventType";
        public const string TeamPrizeType = "TeamPrizeType";
        public const string TeamType = "TeamType";
        public const string Ti2020CustomGameRoomModifierType = "TI2020CustomGameRoomModifierType";
        public const string TopPlayersByHeroType = "TopPlayersByHeroType";
        public const string TotalMatchCountType = "TotalMatchCountType";
        public const string TotalPlayerCountType = "TotalPlayerCountType";
        public const string TowerDamageDetailType = "TowerDamageDetailType";
        public const string TwitchTrackerPlayerHeroType = "TwitchTrackerPlayerHeroType";
        public const string TwitchTrackerPlayerMatchType = "TwitchTrackerPlayerMatchType";
        public const string TwitchTrackerPlayerType = "TwitchTrackerPlayerType";
        public const string UserHomepageType = "UserHomepageType";
        public const string UserQuery = "UserQuery";
        public const string UserType = "UserType";
        public const string VendorQuery = "VendorQuery";
        public const string YogurtMutation = "YogurtMutation";
        public const string YogurtQuery = "YogurtQuery";

        public const string CaptainJackIdentityProfileUpdateRequestType = "CaptainJackIdentityProfileUpdateRequestType";
        public const string DeleteProSteamAccountRequestType = "DeleteProSteamAccountRequestType";
        public const string FilterAghanimLabHeroCompositionRequestType = "FilterAghanimLabHeroCompositionRequestType";
        public const string FilterAghanimLabMatchRequestType = "FilterAghanimLabMatchRequestType";
        public const string FilterDireTideCustomMatchRequestType = "FilterDireTideCustomMatchRequestType";
        public const string FilterHeroRampageType = "FilterHeroRampageType";
        public const string FilterLeaderboardGuildRequestType = "FilterLeaderboardGuildRequestType";
        public const string FilterLeaderboardHeroRequestType = "FilterLeaderboardHeroRequestType";
        public const string FilterMatchReplayUploadRequestType = "FilterMatchReplayUploadRequestType";
        public const string FilterSearchRequestType = "FilterSearchRequestType";
        public const string FilterSeasonLeaderboardRequestType = "FilterSeasonLeaderboardRequestType";
        public const string FilterSeriesRequestType = "FilterSeriesRequestType";
        public const string HeroPickBanRequestType = "HeroPickBanRequestType";
        public const string ImpGeneratorPlayerEventRequestType = "ImpGeneratorPlayerEventRequestType";
        public const string ImpGeneratorPlayerRequestType = "ImpGeneratorPlayerRequestType";
        public const string ImpGeneratorRequestType = "ImpGeneratorRequestType";
        public const string ImportPickBanType = "ImportPickBanType";
        public const string LeagueMatchesRequestType = "LeagueMatchesRequestType";
        public const string LeagueRequestType = "LeagueRequestType";
        public const string MatchLiveRequestType = "MatchLiveRequestType";
        public const string MergeProSteamAccountRequestType = "MergeProSteamAccountRequestType";
        public const string PlayerBreakdownRequestType = "PlayerBreakdownRequestType";
        public const string PlayerHeroesPerformanceMatchesRequestType = "PlayerHeroesPerformanceMatchesRequestType";
        public const string PlayerHeroPerformanceMatchesRequestType = "PlayerHeroPerformanceMatchesRequestType";
        public const string PlayerMatchesGroupByRequestType = "PlayerMatchesGroupByRequestType";
        public const string PlayerMatchesRequestType = "PlayerMatchesRequestType";
        public const string PlayerPerformanceMatchesRequestType = "PlayerPerformanceMatchesRequestType";
        public const string PlayerTeammatesGroupByRequestType = "PlayerTeammatesGroupByRequestType";
        public const string PlusDraftMissingLetterRequestType = "PlusDraftMissingLetterRequestType";
        public const string PlusDraftPlayerRequestType = "PlusDraftPlayerRequestType";
        public const string PlusDraftRequestType = "PlusDraftRequestType";
        public const string PlusPlayerHoverRequestType = "PlusPlayerHoverRequestType";
        public const string RoshMatchesRequestType = "ROSHMatchesRequestType";
        public const string TeamMatchesRequestType = "TeamMatchesRequestType";
        public const string UpdateFollowerRequestType = "UpdateFollowerRequestType";
        public const string UpdateMatchReplayMatchUploadPlayerObjectType = "UpdateMatchReplayMatchUploadPlayerObjectType";
        public const string UpdateMatchReplayUploadObjectType = "UpdateMatchReplayUploadObjectType";

        public const string LiveEventType = "LiveEventType";
        public const string MatchGroupByType = "MatchGroupByType";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(int), "Int" },
                { typeof(short), "Short" },
                { typeof(string), "String" },
                { typeof(bool), "Boolean" },
                { typeof(long), "Long" },
                { typeof(decimal), "Float" },
                { typeof(byte), "Byte" },
                { typeof(double), "Decimal" },
                { typeof(Guid), "Guid" },
                { typeof(DateTime), "DateTime" },
                { typeof(ushort), "UShort" },
                { typeof(CaptainJackIdentityProfileUpdateRequestType), "CaptainJackIdentityProfileUpdateRequestType" },
                { typeof(DeleteProSteamAccountRequestType), "DeleteProSteamAccountRequestType" },
                { typeof(FilterAghanimLabHeroCompositionRequestType), "FilterAghanimLabHeroCompositionRequestType" },
                { typeof(FilterAghanimLabMatchRequestType), "FilterAghanimLabMatchRequestType" },
                { typeof(FilterDireTideCustomMatchRequestType), "FilterDireTideCustomMatchRequestType" },
                { typeof(FilterHeroRampageType), "FilterHeroRampageType" },
                { typeof(FilterLeaderboardGuildRequestType), "FilterLeaderboardGuildRequestType" },
                { typeof(FilterLeaderboardHeroRequestType), "FilterLeaderboardHeroRequestType" },
                { typeof(FilterMatchReplayUploadRequestType), "FilterMatchReplayUploadRequestType" },
                { typeof(FilterSearchRequestType), "FilterSearchRequestType" },
                { typeof(FilterSeasonLeaderboardRequestType), "FilterSeasonLeaderboardRequestType" },
                { typeof(FilterSeriesRequestType), "FilterSeriesRequestType" },
                { typeof(HeroPickBanRequestType), "HeroPickBanRequestType" },
                { typeof(ImpGeneratorPlayerEventRequestType), "ImpGeneratorPlayerEventRequestType" },
                { typeof(ImpGeneratorPlayerRequestType), "ImpGeneratorPlayerRequestType" },
                { typeof(ImpGeneratorRequestType), "ImpGeneratorRequestType" },
                { typeof(ImportPickBanType), "ImportPickBanType" },
                { typeof(LeagueMatchesRequestType), "LeagueMatchesRequestType" },
                { typeof(LeagueRequestType), "LeagueRequestType" },
                { typeof(MatchLiveRequestType), "MatchLiveRequestType" },
                { typeof(MergeProSteamAccountRequestType), "MergeProSteamAccountRequestType" },
                { typeof(PlayerBreakdownRequestType), "PlayerBreakdownRequestType" },
                { typeof(PlayerHeroesPerformanceMatchesRequestType), "PlayerHeroesPerformanceMatchesRequestType" },
                { typeof(PlayerHeroPerformanceMatchesRequestType), "PlayerHeroPerformanceMatchesRequestType" },
                { typeof(PlayerMatchesGroupByRequestType), "PlayerMatchesGroupByRequestType" },
                { typeof(PlayerMatchesRequestType), "PlayerMatchesRequestType" },
                { typeof(PlayerPerformanceMatchesRequestType), "PlayerPerformanceMatchesRequestType" },
                { typeof(PlayerTeammatesGroupByRequestType), "PlayerTeammatesGroupByRequestType" },
                { typeof(PlusDraftMissingLetterRequestType), "PlusDraftMissingLetterRequestType" },
                { typeof(PlusDraftPlayerRequestType), "PlusDraftPlayerRequestType" },
                { typeof(PlusDraftRequestType), "PlusDraftRequestType" },
                { typeof(PlusPlayerHoverRequestType), "PlusPlayerHoverRequestType" },
                { typeof(RoshMatchesRequestType), "ROSHMatchesRequestType" },
                { typeof(TeamMatchesRequestType), "TeamMatchesRequestType" },
                { typeof(UpdateFollowerRequestType), "UpdateFollowerRequestType" },
                { typeof(UpdateMatchReplayMatchUploadPlayerObjectType), "UpdateMatchReplayMatchUploadPlayerObjectType" },
                { typeof(UpdateMatchReplayUploadObjectType), "UpdateMatchReplayUploadObjectType" }
            };
}
    #endregion

    #region enums
    public enum LobbyTypeEnum
    {
        [EnumMember(Value = "UNRANKED")] Unranked,
        [EnumMember(Value = "PRACTICE")] Practice,
        [EnumMember(Value = "TOURNAMENT")] Tournament,
        [EnumMember(Value = "TUTORIAL")] Tutorial,
        [EnumMember(Value = "COOP_VS_BOTS")] CoopVsBots,
        [EnumMember(Value = "TEAM_MATCH")] TeamMatch,
        [EnumMember(Value = "SOLO_QUEUE")] SoloQueue,
        [EnumMember(Value = "RANKED")] Ranked,
        [EnumMember(Value = "SOLO_MID")] SoloMid,
        [EnumMember(Value = "BATTLE_CUP")] BattleCup,
        [EnumMember(Value = "EVENT")] Event,
        [EnumMember(Value = "DIRE_TIDE")] DireTide
    }

    public enum GameModeEnumType
    {
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "ALL_PICK")] AllPick,
        [EnumMember(Value = "CAPTAINS_MODE")] CaptainsMode,
        [EnumMember(Value = "RANDOM_DRAFT")] RandomDraft,
        [EnumMember(Value = "SINGLE_DRAFT")] SingleDraft,
        [EnumMember(Value = "ALL_RANDOM")] AllRandom,
        [EnumMember(Value = "INTRO")] Intro,
        [EnumMember(Value = "THE_DIRETIDE")] TheDiretide,
        [EnumMember(Value = "REVERSE_CAPTAINS_MODE")] ReverseCaptainsMode,
        [EnumMember(Value = "THE_GREEVILING")] TheGreeviling,
        [EnumMember(Value = "TUTORIAL")] Tutorial,
        [EnumMember(Value = "MID_ONLY")] MidOnly,
        [EnumMember(Value = "LEAST_PLAYED")] LeastPlayed,
        [EnumMember(Value = "NEW_PLAYER_POOL")] NewPlayerPool,
        [EnumMember(Value = "COMPENDIUM_MATCHMAKING")] CompendiumMatchmaking,
        [EnumMember(Value = "CUSTOM")] Custom,
        [EnumMember(Value = "CAPTAINS_DRAFT")] CaptainsDraft,
        [EnumMember(Value = "BALANCED_DRAFT")] BalancedDraft,
        [EnumMember(Value = "ABILITY_DRAFT")] AbilityDraft,
        [EnumMember(Value = "EVENT")] Event,
        [EnumMember(Value = "ALL_RANDOM_DEATH_MATCH")] AllRandomDeathMatch,
        [EnumMember(Value = "SOLO_MID")] SoloMid,
        [EnumMember(Value = "ALL_PICK_RANKED")] AllPickRanked,
        [EnumMember(Value = "TURBO")] Turbo,
        [EnumMember(Value = "MUTATION")] Mutation,
        [EnumMember(Value = "UNKNOWN")] Unknown
    }

    public enum LeagueTier
    {
        [EnumMember(Value = "UNSET")] Unset,
        [EnumMember(Value = "AMATEUR")] Amateur,
        [EnumMember(Value = "PROFESSIONAL")] Professional,
        [EnumMember(Value = "MINOR")] Minor,
        [EnumMember(Value = "MAJOR")] Major,
        [EnumMember(Value = "INTERNATIONAL")] International,
        [EnumMember(Value = "DPC_QUALIFIER")] DpcQualifier,
        [EnumMember(Value = "DPC_LEAGUE_QUALIFIER")] DpcLeagueQualifier,
        [EnumMember(Value = "DPC_LEAGUE")] DpcLeague,
        [EnumMember(Value = "DPC_LEAGUE_FINALS")] DpcLeagueFinals
    }

    public enum LeagueRegion
    {
        [EnumMember(Value = "UNSET")] Unset,
        [EnumMember(Value = "NA")] Na,
        [EnumMember(Value = "SA")] Sa,
        [EnumMember(Value = "EUROPE")] Europe,
        [EnumMember(Value = "CIS")] Cis,
        [EnumMember(Value = "CHINA")] China,
        [EnumMember(Value = "SEA")] Sea
    }

    public enum LeagueNodeDefaultGroupEnum
    {
        [EnumMember(Value = "INVALID")] Invalid,
        [EnumMember(Value = "BEST_OF_ONE")] BestOfOne,
        [EnumMember(Value = "BEST_OF_THREE")] BestOfThree,
        [EnumMember(Value = "BEST_OF_FIVE")] BestOfFive,
        [EnumMember(Value = "BEST_OF_TWO")] BestOfTwo
    }

    public enum LeagueNodeGroupTypeEnum
    {
        [EnumMember(Value = "INVALID")] Invalid,
        [EnumMember(Value = "ORGANIZATIONAL")] Organizational,
        [EnumMember(Value = "ROUND_ROBIN")] RoundRobin,
        [EnumMember(Value = "SWISS")] Swiss,
        [EnumMember(Value = "BRACKET_SINGLE")] BracketSingle,
        [EnumMember(Value = "BRACKET_DOUBLE_SEED_LOSER")] BracketDoubleSeedLoser,
        [EnumMember(Value = "BRACKET_DOUBLE_ALL_WINNER")] BracketDoubleAllWinner,
        [EnumMember(Value = "SHOWMATCH")] Showmatch,
        [EnumMember(Value = "GSL")] Gsl,
        [EnumMember(Value = "PLACEMENT")] Placement
    }

    public enum MatchPlayerPositionType
    {
        [EnumMember(Value = "POSITION_1")] Position1,
        [EnumMember(Value = "POSITION_2")] Position2,
        [EnumMember(Value = "POSITION_3")] Position3,
        [EnumMember(Value = "POSITION_4")] Position4,
        [EnumMember(Value = "POSITION_5")] Position5,
        [EnumMember(Value = "UNKNOWN")] Unknown,
        [EnumMember(Value = "FILTERED")] Filtered,
        [EnumMember(Value = "ALL")] All
    }

    public enum PlayerBehaviorActivity
    {
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "VERY_LOW")] VeryLow,
        [EnumMember(Value = "LOW")] Low,
        [EnumMember(Value = "MEDIUM")] Medium,
        [EnumMember(Value = "HIGH")] High,
        [EnumMember(Value = "VERY_HIGH")] VeryHigh,
        [EnumMember(Value = "INTENSE")] Intense
    }

    public enum FindMatchPlayerList
    {
        [EnumMember(Value = "ALL")] All,
        [EnumMember(Value = "SINGLE")] Single,
        [EnumMember(Value = "WITH")] With,
        [EnumMember(Value = "AGAINST")] Against
    }

    public enum Series
    {
        [EnumMember(Value = "BEST_OF_ONE")] BestOfOne,
        [EnumMember(Value = "BEST_OF_THREE")] BestOfThree,
        [EnumMember(Value = "BEST_OF_FIVE")] BestOfFive,
        [EnumMember(Value = "BEST_OF_TWO")] BestOfTwo
    }

    public enum LeaderboardDivision
    {
        [EnumMember(Value = "AMERICAS")] Americas,
        [EnumMember(Value = "SE_ASIA")] SeAsia,
        [EnumMember(Value = "EUROPE")] Europe,
        [EnumMember(Value = "CHINA")] China
    }

    public enum MatchPlayerRoleType
    {
        [EnumMember(Value = "CORE")] Core,
        [EnumMember(Value = "LIGHT_SUPPORT")] LightSupport,
        [EnumMember(Value = "HARD_SUPPORT")] HardSupport,
        [EnumMember(Value = "UNKNOWN")] Unknown
    }

    public enum FilterMatchGroupOrderByEnum
    {
        [EnumMember(Value = "MATCH_COUNT")] MatchCount,
        [EnumMember(Value = "WIN_COUNT")] WinCount
    }

    public enum FindMatchPlayerOrderBy
    {
        [EnumMember(Value = "DESC")] Desc,
        [EnumMember(Value = "ASC")] Asc
    }

    public enum AbilityDispellEnum
    {
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "NO")] No,
        [EnumMember(Value = "YES")] Yes,
        [EnumMember(Value = "YES_STRONG")] YesStrong
    }

    public enum Language
    {
        [EnumMember(Value = "ENGLISH")] English,
        [EnumMember(Value = "BRAZILIAN")] Brazilian,
        [EnumMember(Value = "BULGARIAN")] Bulgarian,
        [EnumMember(Value = "CZECH")] Czech,
        [EnumMember(Value = "DANISH")] Danish,
        [EnumMember(Value = "DUTCH")] Dutch,
        [EnumMember(Value = "FINNISH")] Finnish,
        [EnumMember(Value = "FRENCH")] French,
        [EnumMember(Value = "GERMAN")] German,
        [EnumMember(Value = "GREEK")] Greek,
        [EnumMember(Value = "HUNGARIAN")] Hungarian,
        [EnumMember(Value = "ITALIAN")] Italian,
        [EnumMember(Value = "JAPANESE")] Japanese,
        [EnumMember(Value = "KOREAN")] Korean,
        [EnumMember(Value = "KOREANA")] Koreana,
        [EnumMember(Value = "NORWEGIAN")] Norwegian,
        [EnumMember(Value = "POLISH")] Polish,
        [EnumMember(Value = "PORTUGUESE")] Portuguese,
        [EnumMember(Value = "ROMANIAN")] Romanian,
        [EnumMember(Value = "RUSSIAN")] Russian,
        [EnumMember(Value = "S_CHINESE")] SChinese,
        [EnumMember(Value = "SPANISH")] Spanish,
        [EnumMember(Value = "SWEDISH")] Swedish,
        [EnumMember(Value = "T_CHINESE")] TChinese,
        [EnumMember(Value = "THAI")] Thai,
        [EnumMember(Value = "TURKISH")] Turkish,
        [EnumMember(Value = "UKRAINIAN")] Ukrainian
    }

    public enum HeroRoleEnum
    {
        [EnumMember(Value = "CARRY")] Carry,
        [EnumMember(Value = "ESCAPE")] Escape,
        [EnumMember(Value = "NUKER")] Nuker,
        [EnumMember(Value = "INITIATOR")] Initiator,
        [EnumMember(Value = "DURABLE")] Durable,
        [EnumMember(Value = "DISABLER")] Disabler,
        [EnumMember(Value = "JUNGLER")] Jungler,
        [EnumMember(Value = "SUPPORT")] Support,
        [EnumMember(Value = "PUSHER")] Pusher
    }

    public enum HeroPrimaryAttributeType
    {
        [EnumMember(Value = "STR")] Str,
        [EnumMember(Value = "AGI")] Agi,
        [EnumMember(Value = "INT")] Int,
        [EnumMember(Value = "ALL")] All
    }

    public enum MatchLaneType
    {
        [EnumMember(Value = "ROAMING")] Roaming,
        [EnumMember(Value = "SAFE_LANE")] SafeLane,
        [EnumMember(Value = "MID_LANE")] MidLane,
        [EnumMember(Value = "OFF_LANE")] OffLane,
        [EnumMember(Value = "JUNGLE")] Jungle,
        [EnumMember(Value = "UNKNOWN")] Unknown
    }

    public enum MatchPlayerAward
    {
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "MVP")] Mvp,
        [EnumMember(Value = "TOP_CORE")] TopCore,
        [EnumMember(Value = "TOP_SUPPORT")] TopSupport
    }

    public enum FindMatchPlayerGroupBy
    {
        [EnumMember(Value = "HERO")] Hero,
        [EnumMember(Value = "FACTION")] Faction,
        [EnumMember(Value = "KILLS")] Kills,
        [EnumMember(Value = "DEATHS")] Deaths,
        [EnumMember(Value = "ASSISTS")] Assists,
        [EnumMember(Value = "IS_LEAVER")] IsLeaver,
        [EnumMember(Value = "LEVEL")] Level,
        [EnumMember(Value = "IS_PARTY")] IsParty,
        [EnumMember(Value = "IS_RANDOM")] IsRandom,
        [EnumMember(Value = "LANE")] Lane,
        [EnumMember(Value = "ROLE")] Role,
        [EnumMember(Value = "IS_INTENTIONAL_FEEDING")] IsIntentionalFeeding,
        [EnumMember(Value = "AWARD")] Award,
        [EnumMember(Value = "ROAM_LANE")] RoamLane,
        [EnumMember(Value = "IS_VICTORY")] IsVictory,
        [EnumMember(Value = "DURATION_MINUTES")] DurationMinutes,
        [EnumMember(Value = "CLUSTER")] Cluster,
        [EnumMember(Value = "REGION")] Region,
        [EnumMember(Value = "LOBBY_TYPE")] LobbyType,
        [EnumMember(Value = "IS_LEAGUE")] IsLeague,
        [EnumMember(Value = "IS_SERIES")] IsSeries,
        [EnumMember(Value = "GAME_MODE")] GameMode,
        [EnumMember(Value = "IS_STATS")] IsStats,
        [EnumMember(Value = "GAME_VERSION")] GameVersion,
        [EnumMember(Value = "TEAM")] Team,
        [EnumMember(Value = "HERO_PERFORMANCE")] HeroPerformance,
        [EnumMember(Value = "STEAM_ACCOUNT_ID")] SteamAccountId,
        [EnumMember(Value = "STEAM_ACCOUNT_ID_HERO_ID")] SteamAccountIdHeroId,
        [EnumMember(Value = "STEAM_ACCOUNT_ID_WITH_TEAM")] SteamAccountIdWithTeam,
        [EnumMember(Value = "STEAM_ACCOUNT_ID_HERO_ID_WITH_TEAM")] SteamAccountIdHeroIdWithTeam,
        [EnumMember(Value = "STEAM_ACCOUNT_ID_AGAINST_TEAM")] SteamAccountIdAgainstTeam,
        [EnumMember(Value = "STEAM_ACCOUNT_ID_HERO_ID_AGAINST_TEAM")] SteamAccountIdHeroIdAgainstTeam,
        [EnumMember(Value = "LEAGUE_ID")] LeagueId,
        [EnumMember(Value = "POSITION")] Position,
        [EnumMember(Value = "DATE_DAY")] DateDay,
        [EnumMember(Value = "TOTAL_KILLS")] TotalKills,
        [EnumMember(Value = "GOLD_PER_MINUTE")] GoldPerMinute,
        [EnumMember(Value = "DATE_DAY_HERO")] DateDayHero,
        [EnumMember(Value = "HOUR")] Hour
    }

    public enum Feat
    {
        [EnumMember(Value = "RAMPAGE")] Rampage,
        [EnumMember(Value = "WIN_STREAK")] WinStreak,
        [EnumMember(Value = "HIGH_IMP")] HighImp,
        [EnumMember(Value = "DOTA_ACCOUNT_LEVEL")] DotaAccountLevel
    }

    public enum BuildingType
    {
        [EnumMember(Value = "FORT")] Fort,
        [EnumMember(Value = "TOWER")] Tower,
        [EnumMember(Value = "BARRACKS")] Barracks,
        [EnumMember(Value = "HEALER")] Healer,
        [EnumMember(Value = "OUTPOST")] Outpost
    }

    public enum PlusLetterType
    {
        F,
        D,
        C,
        B,
        A,
        S
    }

    public enum MatchLiveGameState
    {
        [EnumMember(Value = "INIT")] Init,
        [EnumMember(Value = "WAIT_FOR_PLAYERS_TO_LOAD")] WaitForPlayersToLoad,
        [EnumMember(Value = "HERO_SELECTION")] HeroSelection,
        [EnumMember(Value = "STRATEGY_TIME")] StrategyTime,
        [EnumMember(Value = "PRE_GAME")] PreGame,
        [EnumMember(Value = "GAME_IN_PROGRESS")] GameInProgress,
        [EnumMember(Value = "POST_GAME")] PostGame,
        [EnumMember(Value = "DISCONNECT")] Disconnect,
        [EnumMember(Value = "TEAM_SHOWCASE")] TeamShowcase,
        [EnumMember(Value = "CUSTOM_GAME_SETUP")] CustomGameSetup,
        [EnumMember(Value = "WAIT_FOR_MAP_TO_LOAD")] WaitForMapToLoad,
        [EnumMember(Value = "SCENARIO_SETUP")] ScenarioSetup,
        [EnumMember(Value = "PLAYER_DRAFT")] PlayerDraft,
        [EnumMember(Value = "LAST")] Last
    }

    public enum LeagueStage
    {
        [EnumMember(Value = "OPEN_QUALIFERS")] OpenQualifers,
        [EnumMember(Value = "CLOSED_QUALIFERS")] ClosedQualifers,
        [EnumMember(Value = "CHAMPIONS_QUALIFERS")] ChampionsQualifers,
        [EnumMember(Value = "GROUP_STAGE")] GroupStage,
        [EnumMember(Value = "MAIN_EVENT")] MainEvent
    }

    public enum TableCalculateEnum
    {
        [EnumMember(Value = "AVERAGE")] Average,
        [EnumMember(Value = "MEDIAN")] Median,
        [EnumMember(Value = "HIGHEST")] Highest,
        [EnumMember(Value = "LOWEST")] Lowest
    }

    public enum MatchAnalysisOutcomeType
    {
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "STOMPED")] Stomped,
        [EnumMember(Value = "COMEBACK")] Comeback,
        [EnumMember(Value = "CLOSE_GAME")] CloseGame
    }

    public enum LeaverStatusEnum
    {
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "DISCONNECTED")] Disconnected,
        [EnumMember(Value = "DISCONNECTED_TOO_LONG")] DisconnectedTooLong,
        [EnumMember(Value = "ABANDONED")] Abandoned,
        [EnumMember(Value = "AFK")] Afk,
        [EnumMember(Value = "NEVER_CONNECTED")] NeverConnected,
        [EnumMember(Value = "NEVER_CONNECTED_TOO_LONG")] NeverConnectedTooLong,
        [EnumMember(Value = "FAILED_TO_READY_UP")] FailedToReadyUp,
        [EnumMember(Value = "DECLINED_READY_UP")] DeclinedReadyUp
    }

    public enum RuneEnums
    {
        [EnumMember(Value = "DOUBLE_DAMAGE")] DoubleDamage,
        [EnumMember(Value = "HASTE")] Haste,
        [EnumMember(Value = "ILLUSION")] Illusion,
        [EnumMember(Value = "INVISIBILITY")] Invisibility,
        [EnumMember(Value = "REGEN")] Regen,
        [EnumMember(Value = "BOUNTY")] Bounty,
        [EnumMember(Value = "ARCANE")] Arcane,
        [EnumMember(Value = "WATER")] Water,
        [EnumMember(Value = "WISDOM")] Wisdom,
        [EnumMember(Value = "SHIELD")] Shield
    }

    public enum RuneAction
    {
        [EnumMember(Value = "PICKUP")] Pickup,
        [EnumMember(Value = "BOTTLE")] Bottle
    }

    public enum MapLocationEnums
    {
        [EnumMember(Value = "RADIANT_BASE")] RadiantBase,
        [EnumMember(Value = "RADIANT_OFF_LANE")] RadiantOffLane,
        [EnumMember(Value = "RADIANT_MID_LANE")] RadiantMidLane,
        [EnumMember(Value = "RADIANT_SAFE_LANE")] RadiantSafeLane,
        [EnumMember(Value = "DIRE_BASE")] DireBase,
        [EnumMember(Value = "DIRE_OFF_LANE")] DireOffLane,
        [EnumMember(Value = "DIRE_MID_LANE")] DireMidLane,
        [EnumMember(Value = "DIRE_SAFE_LANE")] DireSafeLane,
        [EnumMember(Value = "RIVER")] River,
        [EnumMember(Value = "ROSHAN")] Roshan,
        [EnumMember(Value = "ROAMING")] Roaming,
        [EnumMember(Value = "RADIANT_FOUNTAIN")] RadiantFountain,
        [EnumMember(Value = "DIRE_FOUNTAIN")] DireFountain
    }

    public enum GoldReason
    {
        [EnumMember(Value = "OTHER")] Other,
        [EnumMember(Value = "DEATH")] Death,
        [EnumMember(Value = "BUY_BACK")] BuyBack,
        [EnumMember(Value = "ABADONS")] Abadons,
        [EnumMember(Value = "SELLS")] Sells,
        [EnumMember(Value = "STRUCTURES")] Structures,
        [EnumMember(Value = "HEROES")] Heroes,
        [EnumMember(Value = "CREEPS")] Creeps,
        [EnumMember(Value = "NEUTRAL")] Neutral,
        [EnumMember(Value = "ROSHAN")] Roshan,
        [EnumMember(Value = "COURIERS")] Couriers,
        [EnumMember(Value = "BOUNTY")] Bounty,
        [EnumMember(Value = "DOOM_DEVOURER")] DoomDevourer,
        [EnumMember(Value = "WARD_DESTRUCTION")] WardDestruction,
        [EnumMember(Value = "COURIERS_2")] Couriers2
    }

    public enum XpReason
    {
        [EnumMember(Value = "OTHER")] Other,
        [EnumMember(Value = "HEROES")] Heroes,
        [EnumMember(Value = "CREEPS")] Creeps,
        [EnumMember(Value = "ROSHAN")] Roshan,
        [EnumMember(Value = "TOME_OF_KNOWLEDGE")] TomeOfKnowledge,
        [EnumMember(Value = "OUTPOSTS")] Outposts
    }

    public enum Damage
    {
        [EnumMember(Value = "UNKNOWN")] Unknown,
        [EnumMember(Value = "PHYSICAL")] Physical,
        [EnumMember(Value = "MAGICAL")] Magical,
        [EnumMember(Value = "PURE")] Pure
    }

    public enum Streak
    {
        [EnumMember(Value = "MULTI_KILL")] MultiKill,
        [EnumMember(Value = "KILL_STREAK")] KillStreak
    }

    public enum RankBracketBasicEnum
    {
        [EnumMember(Value = "UNCALIBRATED")] Uncalibrated,
        [EnumMember(Value = "HERALD_GUARDIAN")] HeraldGuardian,
        [EnumMember(Value = "CRUSADER_ARCHON")] CrusaderArchon,
        [EnumMember(Value = "LEGEND_ANCIENT")] LegendAncient,
        [EnumMember(Value = "DIVINE_IMMORTAL")] DivineImmortal,
        [EnumMember(Value = "FILTERED")] Filtered,
        [EnumMember(Value = "ALL")] All
    }

    public enum WardType
    {
        [EnumMember(Value = "OBSERVER")] Observer,
        [EnumMember(Value = "SENTRY")] Sentry
    }

    public enum SpawnActionType
    {
        [EnumMember(Value = "SPAWN")] Spawn,
        [EnumMember(Value = "DESPAWN")] Despawn
    }

    public enum LaneOutcomeEnums
    {
        [EnumMember(Value = "TIE")] Tie,
        [EnumMember(Value = "RADIANT_VICTORY")] RadiantVictory,
        [EnumMember(Value = "RADIANT_STOMP")] RadiantStomp,
        [EnumMember(Value = "DIRE_VICTORY")] DireVictory,
        [EnumMember(Value = "DIRE_STOMP")] DireStomp
    }

    public enum FilterOrderBy
    {
        [EnumMember(Value = "LAST_MATCH_TIME")] LastMatchTime,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "NONE")] None,
        [EnumMember(Value = "START_DATE_THEN_TIER")] StartDateThenTier,
        [EnumMember(Value = "LAST_MATCH_TIME_THEN_TIER")] LastMatchTimeThenTier
    }

    public enum MatchPlayerTeamPickOrderType
    {
        [EnumMember(Value = "FIRST_PICK")] FirstPick,
        [EnumMember(Value = "SECOND_PICK")] SecondPick,
        [EnumMember(Value = "THIRD_PICK")] ThirdPick,
        [EnumMember(Value = "FOURTH_PICK")] FourthPick,
        [EnumMember(Value = "FIFTH_PICK")] FifthPick
    }

    public enum RoshDifficultyEnum
    {
        [EnumMember(Value = "EASY")] Easy,
        [EnumMember(Value = "MEDIUM")] Medium,
        [EnumMember(Value = "HARD")] Hard,
        [EnumMember(Value = "EXPERT")] Expert,
        [EnumMember(Value = "ALPHA")] Alpha
    }

    public enum StratzApiType
    {
        [EnumMember(Value = "DATA_COLLECTOR")] DataCollector,
        [EnumMember(Value = "MULTI_KEY")] MultiKey
    }

    public enum FilterPlayerTeammateEnum
    {
        [EnumMember(Value = "WITH")] With,
        [EnumMember(Value = "AGAINST")] Against
    }

    public enum RankBracket
    {
        [EnumMember(Value = "UNCALIBRATED")] Uncalibrated,
        [EnumMember(Value = "HERALD")] Herald,
        [EnumMember(Value = "GUARDIAN")] Guardian,
        [EnumMember(Value = "CRUSADER")] Crusader,
        [EnumMember(Value = "ARCHON")] Archon,
        [EnumMember(Value = "LEGEND")] Legend,
        [EnumMember(Value = "ANCIENT")] Ancient,
        [EnumMember(Value = "DIVINE")] Divine,
        [EnumMember(Value = "IMMORTAL")] Immortal
    }

    public enum BasicRegionType
    {
        [EnumMember(Value = "CHINA")] China,
        [EnumMember(Value = "SEA")] Sea,
        [EnumMember(Value = "NORTH_AMERICA")] NorthAmerica,
        [EnumMember(Value = "SOUTH_AMERICA")] SouthAmerica,
        [EnumMember(Value = "EUROPE")] Europe
    }

    public enum AghanimLabMatchDifficultyEnum
    {
        [EnumMember(Value = "APPRENTICE")] Apprentice,
        [EnumMember(Value = "MAGICIAN")] Magician,
        [EnumMember(Value = "SORCERER")] Sorcerer,
        [EnumMember(Value = "GRANDMAGUS")] Grandmagus,
        [EnumMember(Value = "APEXMAGE")] Apexmage
    }

    public enum AghanimLabPlayerBlessingEnum
    {
        [EnumMember(Value = "MODIFIER_BLESSING_AGILITY")] ModifierBlessingAgility,
        [EnumMember(Value = "MODIFIER_BLESSING_ARMOR")] ModifierBlessingArmor,
        [EnumMember(Value = "MODIFIER_BLESSING_ATTACK_SPEED")] ModifierBlessingAttackSpeed,
        [EnumMember(Value = "MODIFIER_BLESSING_BASE")] ModifierBlessingBase,
        [EnumMember(Value = "MODIFIER_BLESSING_BOOK_AGILITY")] ModifierBlessingBookAgility,
        [EnumMember(Value = "MODIFIER_BLESSING_BOOK_INTELLIGENCE")] ModifierBlessingBookIntelligence,
        [EnumMember(Value = "MODIFIER_BLESSING_BOOK_STRENGTH")] ModifierBlessingBookStrength,
        [EnumMember(Value = "MODIFIER_BLESSING_BOTTLE_UPGRADE")] ModifierBlessingBottleUpgrade,
        [EnumMember(Value = "MODIFIER_BLESSING_DAMAGE_BONUS")] ModifierBlessingDamageBonus,
        [EnumMember(Value = "MODIFIER_BLESSING_DAMAGE_REFLECT")] ModifierBlessingDamageReflect,
        [EnumMember(Value = "MODIFIER_BLESSING_DETONATION")] ModifierBlessingDetonation,
        [EnumMember(Value = "MODIFIER_BLESSING_EVASION")] ModifierBlessingEvasion,
        [EnumMember(Value = "MODIFIER_BLESSING_HEALTH_BOOST")] ModifierBlessingHealthBoost,
        [EnumMember(Value = "MODIFIER_BLESSING_INTELLIGENCE")] ModifierBlessingIntelligence,
        [EnumMember(Value = "MODIFIER_BLESSING_LIFE_STEAL")] ModifierBlessingLifeSteal,
        [EnumMember(Value = "MODIFIER_BLESSING_MAGIC_DAMAGE_BONUS")] ModifierBlessingMagicDamageBonus,
        [EnumMember(Value = "MODIFIER_BLESSING_MAGIC_RESIST")] ModifierBlessingMagicResist,
        [EnumMember(Value = "MODIFIER_BLESSING_MANA_BOOST")] ModifierBlessingManaBoost,
        [EnumMember(Value = "MODIFIER_BLESSING_MOVEMENT_SPEED")] ModifierBlessingMovementSpeed,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_ARCANIST")] ModifierBlessingPotionArcanist,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_DRAGON")] ModifierBlessingPotionDragon,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_ECHO_SLAM")] ModifierBlessingPotionEchoSlam,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_HEALTH")] ModifierBlessingPotionHealth,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_MANA")] ModifierBlessingPotionMana,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_PURIFICATION")] ModifierBlessingPotionPurification,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_RAVAGE")] ModifierBlessingPotionRavage,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_SHADOW_WAVE")] ModifierBlessingPotionShadowWave,
        [EnumMember(Value = "MODIFIER_BLESSING_POTION_TORRENT")] ModifierBlessingPotionTorrent,
        [EnumMember(Value = "MODIFIER_BLESSING_REFRESHER_SHARD")] ModifierBlessingRefresherShard,
        [EnumMember(Value = "MODIFIER_BLESSING_RESPAWN_INVULNERABILITY")] ModifierBlessingRespawnInvulnerability,
        [EnumMember(Value = "MODIFIER_BLESSING_RESPAWN_TIME_REDUCTION")] ModifierBlessingRespawnTimeReduction,
        [EnumMember(Value = "MODIFIER_BLESSING_RESTORE_MANA")] ModifierBlessingRestoreMana,
        [EnumMember(Value = "MODIFIER_BLESSING_SPELL_LIFE_STEAL")] ModifierBlessingSpellLifeSteal,
        [EnumMember(Value = "MODIFIER_BLESSING_STRENGTH")] ModifierBlessingStrength,
        [EnumMember(Value = "BOTTLE_CHARGES")] BottleCharges,
        [EnumMember(Value = "STAT_AGI")] StatAgi,
        [EnumMember(Value = "STAT_INT")] StatInt,
        [EnumMember(Value = "STAT_STR")] StatStr,
        [EnumMember(Value = "STAT_DAMAGE")] StatDamage,
        [EnumMember(Value = "STAT_SPELL_AMP")] StatSpellAmp,
        [EnumMember(Value = "STAT_HEALTH")] StatHealth,
        [EnumMember(Value = "STAT_MANA")] StatMana,
        [EnumMember(Value = "STAT_MAGIC_RESIST")] StatMagicResist,
        [EnumMember(Value = "STARTING_GOLD")] StartingGold,
        [EnumMember(Value = "PURIFICATION_POTION")] PurificationPotion,
        [EnumMember(Value = "DEATH_DETONATION")] DeathDetonation,
        [EnumMember(Value = "POTION_HEALTH")] PotionHealth,
        [EnumMember(Value = "POTION_MANA")] PotionMana,
        [EnumMember(Value = "RESPAWN_TIME_REDUCTION")] RespawnTimeReduction,
        [EnumMember(Value = "BOTTLE_REGEN_DURATION")] BottleRegenDuration,
        [EnumMember(Value = "BOTTLE_REGEN_MOVEMENT_SPEED")] BottleRegenMovementSpeed,
        [EnumMember(Value = "ROSHAN_SHOP_DISCOUNT")] RoshanShopDiscount,
        [EnumMember(Value = "ORACLE_SHOP_DISCOUNT")] OracleShopDiscount,
        [EnumMember(Value = "RESPAWN_INVULNERABILITY")] RespawnInvulnerability,
        [EnumMember(Value = "RESPAWN_HASTE")] RespawnHaste,
        [EnumMember(Value = "RESPAWN_ATTACK_SPEED")] RespawnAttackSpeed,
        [EnumMember(Value = "STAT_EVASION")] StatEvasion,
        [EnumMember(Value = "UPGRADE_REROLL")] UpgradeReroll,
        [EnumMember(Value = "ELITE_UPGRADE")] EliteUpgrade,
        [EnumMember(Value = "START_TOME")] StartTome,
        [EnumMember(Value = "BOSS_TOME")] BossTome,
        [EnumMember(Value = "EXTRA_LIFE")] ExtraLife,
        [EnumMember(Value = "MELEE_CLEAVE")] MeleeCleave,
        [EnumMember(Value = "ATTACK_RANGE")] AttackRange,
        [EnumMember(Value = "PROJECTILE_SPEED")] ProjectileSpeed,
        [EnumMember(Value = "CAST_RANGE")] CastRange,
        [EnumMember(Value = "DAMAGE_ON_STUNNED")] DamageOnStunned,
        [EnumMember(Value = "REGEN_AROUND_ALLIES")] RegenAroundAllies,
        [EnumMember(Value = "DEBUFF_DURATION_INCREASE")] DebuffDurationIncrease,
        [EnumMember(Value = "LOW_HP_OUTGOING_DAMAGE")] LowHpOutgoingDamage
    }

    public enum AghanimLabDepthListEncounterEnum
    {
        [EnumMember(Value = "ENCOUNTER_EMPTY_CAVERN")] EncounterEmptyCavern,
        [EnumMember(Value = "ENCOUNTER_EMPTY_BEACH")] EncounterEmptyBeach,
        [EnumMember(Value = "ENCOUNTER_BREWMASTER")] EncounterBrewmaster,
        [EnumMember(Value = "ENCOUNTER_HELLBEARS_PORTAL_V_3")] EncounterHellbearsPortalV3,
        [EnumMember(Value = "ENCOUNTER_PINECONES")] EncounterPinecones,
        [EnumMember(Value = "ENCOUNTER_QUILL_BEASTS")] EncounterQuillBeasts,
        [EnumMember(Value = "ENCOUNTER_JUNGLE_HIJINX")] EncounterJungleHijinx,
        [EnumMember(Value = "ENCOUNTER_TUSK_SKELETONS")] EncounterTuskSkeletons,
        [EnumMember(Value = "ENCOUNTER_BOMBERS")] EncounterBombers,
        [EnumMember(Value = "ENCOUNTER_DROW_RANGER_MINIBOSS")] EncounterDrowRangerMiniboss,
        [EnumMember(Value = "ENCOUNTER_WAVE_BLASTERS")] EncounterWaveBlasters,
        [EnumMember(Value = "ENCOUNTER_BABY_OGRES")] EncounterBabyOgres,
        [EnumMember(Value = "ENCOUNTER_MORPHLINGS_B")] EncounterMorphlingsB,
        [EnumMember(Value = "ENCOUNTER_ZEALOT_SCARABS")] EncounterZealotScarabs,
        [EnumMember(Value = "ENCOUNTER_OGRE_SEALS")] EncounterOgreSeals,
        [EnumMember(Value = "ENCOUNTER_WARLOCKS")] EncounterWarlocks,
        [EnumMember(Value = "ENCOUNTER_GAUNTLET")] EncounterGauntlet,
        [EnumMember(Value = "ENCOUNTER_MORTY_TRANSITION")] EncounterMortyTransition,
        [EnumMember(Value = "ENCOUNTER_PENGUINS_TRANSITION")] EncounterPenguinsTransition,
        [EnumMember(Value = "ENCOUNTER_MIRANA")] EncounterMirana,
        [EnumMember(Value = "ENCOUNTER_MUSHROOM_MINES")] EncounterMushroomMines,
        [EnumMember(Value = "ENCOUNTER_LEGION_COMMANDER")] EncounterLegionCommander,
        [EnumMember(Value = "ENCOUNTER_TROLL_WARLORD")] EncounterTrollWarlord,
        [EnumMember(Value = "ENCOUNTER_PUDGE_MINIBOSS")] EncounterPudgeMiniboss,
        [EnumMember(Value = "ENCOUNTER_PUCKS")] EncounterPucks,
        [EnumMember(Value = "ENCOUNTER_DARK_SEER")] EncounterDarkSeer,
        [EnumMember(Value = "ENCOUNTER_SPECTRES")] EncounterSpectres,
        [EnumMember(Value = "ENCOUNTER_SHADOW_DEMONS")] EncounterShadowDemons,
        [EnumMember(Value = "ENCOUNTER_NAGA_SIREN")] EncounterNagaSiren,
        [EnumMember(Value = "ENCOUNTER_DIRE_SIEGE")] EncounterDireSiege,
        [EnumMember(Value = "ENCOUNTER_BIG_OGRES")] EncounterBigOgres,
        [EnumMember(Value = "ENCOUNTER_DRAGON_KNIGHT")] EncounterDragonKnight,
        [EnumMember(Value = "ENCOUNTER_KUNKKA_TIDE")] EncounterKunkkaTide,
        [EnumMember(Value = "ENCOUNTER_ALCHEMIST")] EncounterAlchemist,
        [EnumMember(Value = "ENCOUNTER_ENRAGED_WILDWINGS")] EncounterEnragedWildwings,
        [EnumMember(Value = "ENCOUNTER_ELEMENTAL_TINY")] EncounterElementalTiny,
        [EnumMember(Value = "ENCOUNTER_BANDITS")] EncounterBandits,
        [EnumMember(Value = "ENCOUNTER_BOMB_SQUAD")] EncounterBombSquad,
        [EnumMember(Value = "ENCOUNTER_UNDEAD_WOODS")] EncounterUndeadWoods,
        [EnumMember(Value = "ENCOUNTER_PHOENIX")] EncounterPhoenix,
        [EnumMember(Value = "ENCOUNTER_BROODMOTHERS")] EncounterBroodmothers,
        [EnumMember(Value = "ENCOUNTER_FIRE_ROSHAN")] EncounterFireRoshan,
        [EnumMember(Value = "ENCOUNTER_BOSS_VISAGE")] EncounterBossVisage,
        [EnumMember(Value = "ENCOUNTER_BOSS_TIMBERSAW")] EncounterBossTimbersaw,
        [EnumMember(Value = "ENCOUNTER_TEMPLE_GUARDIANS")] EncounterTempleGuardians,
        [EnumMember(Value = "ENCOUNTER_STOREGGA")] EncounterStoregga,
        [EnumMember(Value = "ENCOUNTER_BOSS_VOID_SPIRIT")] EncounterBossVoidSpirit,
        [EnumMember(Value = "ENCOUNTER_AGHANIM")] EncounterAghanim,
        [EnumMember(Value = "ENCOUNTER_JUNGLE_FIRE_MAZE")] EncounterJungleFireMaze,
        [EnumMember(Value = "ENCOUNTER_CLIFF_PASS")] EncounterCliffPass,
        [EnumMember(Value = "ENCOUNTER_HELLFIRE_CANYON")] EncounterHellfireCanyon,
        [EnumMember(Value = "ENCOUNTER_TEMPLE_GARDEN")] EncounterTempleGarden,
        [EnumMember(Value = "ENCOUNTER_CASTLE_TRAPS")] EncounterCastleTraps,
        [EnumMember(Value = "ENCOUNTER_CRYPT_TRAPS")] EncounterCryptTraps,
        [EnumMember(Value = "ENCOUNTER_BONUS_CHICKEN")] EncounterBonusChicken,
        [EnumMember(Value = "ENCOUNTER_PANGOLIER")] EncounterPangolier,
        [EnumMember(Value = "ENCOUNTER_ROCK_GOLEMS")] EncounterRockGolems,
        [EnumMember(Value = "ENCOUNTER_WENDIGOES")] EncounterWendigoes,
        [EnumMember(Value = "ENCOUNTER_COLLAPSED_MINES")] EncounterCollapsedMines,
        [EnumMember(Value = "ENCOUNTER_BEARS_LAIR")] EncounterBearsLair,
        [EnumMember(Value = "ENCOUNTER_PINE_GROVE")] EncounterPineGrove,
        [EnumMember(Value = "ENCOUNTER_SACRED_GROUNDS")] EncounterSacredGrounds,
        [EnumMember(Value = "ENCOUNTER_DEEP_TRAPS")] EncounterDeepTraps,
        [EnumMember(Value = "ENCOUNTER_DARK_FOREST")] EncounterDarkForest,
        [EnumMember(Value = "ENCOUNTER_TROPICAL_KEEP")] EncounterTropicalKeep,
        [EnumMember(Value = "ENCOUNTER_SALTY_SHORE")] EncounterSaltyShore,
        [EnumMember(Value = "ENCOUNTER_REGAL_TRAPS")] EncounterRegalTraps,
        [EnumMember(Value = "ENCOUNTER_DESERT_OASIS")] EncounterDesertOasis,
        [EnumMember(Value = "ENCOUNTER_PRISON_TRAPS")] EncounterPrisonTraps,
        [EnumMember(Value = "ENCOUNTER_BRIDGE_TRAPS")] EncounterBridgeTraps,
        [EnumMember(Value = "ENCOUNTER_MOLE_CAVE")] EncounterMoleCave,
        [EnumMember(Value = "ENCOUNTER_BLOB_DUNGEON")] EncounterBlobDungeon,
        [EnumMember(Value = "ENCOUNTER_MULTIPLICITY")] EncounterMultiplicity,
        [EnumMember(Value = "ENCOUNTER_CATACOMBS")] EncounterCatacombs,
        [EnumMember(Value = "ENCOUNTER_SWAMP_OF_SADNESS")] EncounterSwampOfSadness,
        [EnumMember(Value = "ENCOUNTER_CAVERN_TRAPS")] EncounterCavernTraps,
        [EnumMember(Value = "ENCOUNTER_AZIYOG_CAVERNS")] EncounterAziyogCaverns,
        [EnumMember(Value = "ENCOUNTER_BAMBOO_GARDEN")] EncounterBambooGarden,
        [EnumMember(Value = "ENCOUNTER_BOG_TRAPS")] EncounterBogTraps,
        [EnumMember(Value = "ENCOUNTER_BOSS_WINTER_WYVERN")] EncounterBossWinterWyvern,
        [EnumMember(Value = "ENCOUNTER_BOSS_EARTHSHAKER")] EncounterBossEarthshaker,
        [EnumMember(Value = "ENCOUNTER_BOSS_DARK_WILLOW")] EncounterBossDarkWillow,
        [EnumMember(Value = "ENCOUNTER_BOSS_RIZZRICK")] EncounterBossRizzrick,
        [EnumMember(Value = "ENCOUNTER_PENGUIN_SLEDDING")] EncounterPenguinSledding,
        [EnumMember(Value = "ENCOUNTER_BONUS_MANGO_ORCHARD")] EncounterBonusMangoOrchard,
        [EnumMember(Value = "ENCOUNTER_BONUS_HOOKING")] EncounterBonusHooking,
        [EnumMember(Value = "ENCOUNTER_MUSHROOM_MINES_2021")] EncounterMushroomMines2021,
        [EnumMember(Value = "ENCOUNTER_GAOLERS")] EncounterGaolers,
        [EnumMember(Value = "ENCOUNTER_EGGS_HOLDOUT")] EncounterEggsHoldout,
        [EnumMember(Value = "ENCOUNTER_SPOOK_TOWN")] EncounterSpookTown,
        [EnumMember(Value = "ENCOUNTER_TEMPLE_TRAPS")] EncounterTempleTraps,
        [EnumMember(Value = "ENCOUNTER_CANOPY_TRAPS")] EncounterCanopyTraps,
        [EnumMember(Value = "ENCOUNTER_INNER_RING")] EncounterInnerRing,
        [EnumMember(Value = "ENCOUNTER_LESHRAC")] EncounterLeshrac,
        [EnumMember(Value = "ENCOUNTER_OUTWORLD")] EncounterOutworld,
        [EnumMember(Value = "ENCOUNTER_TWILIGHT_MAZE")] EncounterTwilightMaze,
        [EnumMember(Value = "ENCOUNTER_RUINOUS_TRAPS")] EncounterRuinousTraps,
        [EnumMember(Value = "ENCOUNTER_BEACH_TRAPS")] EncounterBeachTraps,
        [EnumMember(Value = "ENCOUNTER_GOLEM_GORGE")] EncounterGolemGorge,
        [EnumMember(Value = "ENCOUNTER_SNAPFIRE")] EncounterSnapfire,
        [EnumMember(Value = "ENCOUNTER_POLARITY_SWAP")] EncounterPolaritySwap,
        [EnumMember(Value = "ENCOUNTER_STONEHALL_CITADEL")] EncounterStonehallCitadel,
        [EnumMember(Value = "ENCOUNTER_MYSTICAL_TRAPS")] EncounterMysticalTraps,
        [EnumMember(Value = "ENCOUNTER_HEDGE_TRAPS")] EncounterHedgeTraps,
        [EnumMember(Value = "ENCOUNTER_TEMPLE_SIEGE")] EncounterTempleSiege,
        [EnumMember(Value = "ENCOUNTER_FORBIDDEN_PALACE")] EncounterForbiddenPalace,
        [EnumMember(Value = "ENCOUNTER_CRYPT_GATE")] EncounterCryptGate,
        [EnumMember(Value = "ENCOUNTER_PUGNA_NETHER_REACHES")] EncounterPugnaNetherReaches,
        [EnumMember(Value = "ENCOUNTER_MINING_TRAPS")] EncounterMiningTraps,
        [EnumMember(Value = "ENCOUNTER_DUNGEON_TRAPS")] EncounterDungeonTraps,
        [EnumMember(Value = "ENCOUNTER_BOSS_ARC_WARDEN")] EncounterBossArcWarden,
        [EnumMember(Value = "ENCOUNTER_BOSS_CLOCKWERK_TINKER")] EncounterBossClockwerkTinker,
        [EnumMember(Value = "ENCOUNTER_BOSS_AMOEBA")] EncounterBossAmoeba,
        [EnumMember(Value = "ENCOUNTER_BOSS_STOREGGA")] EncounterBossStoregga,
        [EnumMember(Value = "ENCOUNTER_BONUS_LIVESTOCK")] EncounterBonusLivestock,
        [EnumMember(Value = "ENCOUNTER_BONUS_SMASH_CHICKENS")] EncounterBonusSmashChickens,
        [EnumMember(Value = "ENCOUNTER_BONUS_GALLERY")] EncounterBonusGallery,
        [EnumMember(Value = "ENCOUNTER_TOXIC_TERRACE")] EncounterToxicTerrace,
        [EnumMember(Value = "ENCOUNTER_HIDDEN_COLOSSEUM")] EncounterHiddenColosseum,
        [EnumMember(Value = "ENCOUNTER_FROZEN_RAVINE")] EncounterFrozenRavine,
        [EnumMember(Value = "ENCOUNTER_PALACE_TRAPS")] EncounterPalaceTraps,
        [EnumMember(Value = "ENCOUNTER_ICY_POOLS")] EncounterIcyPools,
        [EnumMember(Value = "ENCOUNTER_DEMONIC_WOODS")] EncounterDemonicWoods,
        [EnumMember(Value = "ENCOUNTER_THUNDER_MOUNTAIN")] EncounterThunderMountain,
        [EnumMember(Value = "ENCOUNTER_FRIGID_PINNACLE")] EncounterFrigidPinnacle,
        [EnumMember(Value = "ENCOUNTER_VILLAGE_TRAPS")] EncounterVillageTraps,
        [EnumMember(Value = "ENCOUNTER_FORSAKEN_PIT")] EncounterForsakenPit,
        [EnumMember(Value = "ENCOUNTER_BURNING_MESA")] EncounterBurningMesa,
        [EnumMember(Value = "ENCOUNTER_SMASHY_AND_BASHY")] EncounterSmashyAndBashy,
        [EnumMember(Value = "ENCOUNTER_PUSH_PULL")] EncounterPushPull,
        [EnumMember(Value = "ENCOUNTER_JUNGLE_TRAPS")] EncounterJungleTraps,
        [EnumMember(Value = "ENCOUNTER_TRANSITION_GATEWAY")] EncounterTransitionGateway,
        [EnumMember(Value = "ENCOUNTER_PRIMAL_BEAST")] EncounterPrimalBeast,
        [EnumMember(Value = "ENCOUNTER_EVENT_MINOR_SHARD_SHOP")] EncounterEventMinorShardShop,
        [EnumMember(Value = "ENCOUNTER_EVENT_DOOM_LIFE_SWAP")] EncounterEventDoomLifeSwap,
        [EnumMember(Value = "ENCOUNTER_EVENT_WARLOCK_LIBRARY")] EncounterEventWarlockLibrary,
        [EnumMember(Value = "ENCOUNTER_EVENT_ALCHEMIST_NEUTRAL_ITEMS")] EncounterEventAlchemistNeutralItems,
        [EnumMember(Value = "ENCOUNTER_EVENT_BREWMASTER_BAR")] EncounterEventBrewmasterBar,
        [EnumMember(Value = "ENCOUNTER_EVENT_LIFE_SHOP")] EncounterEventLifeShop,
        [EnumMember(Value = "ENCOUNTER_EVENT_MORPHLING_ATTRIBUTE_SHIFT")] EncounterEventMorphlingAttributeShift,
        [EnumMember(Value = "ENCOUNTER_EVENT_TINKER_RANGE_RETROFIT")] EncounterEventTinkerRangeRetrofit,
        [EnumMember(Value = "ENCOUNTER_EVENT_NAGA_BOTTLE_RUNE")] EncounterEventNagaBottleRune,
        [EnumMember(Value = "ENCOUNTER_EVENT_SLARK")] EncounterEventSlark,
        [EnumMember(Value = "ENCOUNTER_EVENT_ZEUS")] EncounterEventZeus,
        [EnumMember(Value = "ENCOUNTER_EVENT_LESHRAC")] EncounterEventLeshrac,
        [EnumMember(Value = "ENCOUNTER_EVENT_NECROPHOS")] EncounterEventNecrophos,
        [EnumMember(Value = "ENCOUNTER_EVENT_SMALL_TINY_SHRINK")] EncounterEventSmallTinyShrink,
        [EnumMember(Value = "ENCOUNTER_EVENT_BIG_TINY_GROW")] EncounterEventBigTinyGrow,
        [EnumMember(Value = "ENCOUNTER_EVENT_OGRE_MAGI_CASINO")] EncounterEventOgreMagiCasino,
        [EnumMember(Value = "ENCOUNTER_SPLITSVILLE")] EncounterSplitsville,
        [EnumMember(Value = "ENCOUNTER_AQUA_MANOR")] EncounterAquaManor,
        [EnumMember(Value = "ENCOUNTER_JUNGLE_TREK")] EncounterJungleTrek
    }

    public enum AghanimLabDepthListRewardEnum
    {
        [EnumMember(Value = "REWARD_TYPE_NONE")] RewardTypeNone,
        [EnumMember(Value = "REWARD_TYPE_GOLD")] RewardTypeGold,
        [EnumMember(Value = "REWARD_TYPE_EXTRA_LIVES")] RewardTypeExtraLives,
        [EnumMember(Value = "REWARD_TYPE_TREASURE")] RewardTypeTreasure
    }

    public enum AghanimLabDepthListAscensionAbilitiesEnum
    {
        [EnumMember(Value = "ASCENSION_ARMOR")] AscensionArmor,
        [EnumMember(Value = "ASCENSION_ARMOR_SAPPING")] AscensionArmorSapping,
        [EnumMember(Value = "ASCENSION_ATTACK_SPEED")] AscensionAttackSpeed,
        [EnumMember(Value = "ASCENSION_BOMB")] AscensionBomb,
        [EnumMember(Value = "ASCENSION_CHILLING_TOUCH")] AscensionChillingTouch,
        [EnumMember(Value = "ASCENSION_CRIT")] AscensionCrit,
        [EnumMember(Value = "ASCENSION_DAMAGE")] AscensionDamage,
        [EnumMember(Value = "ASCENSION_DRUNKEN")] AscensionDrunken,
        [EnumMember(Value = "ASCENSION_EXTRA_FAST")] AscensionExtraFast,
        [EnumMember(Value = "ASCENSION_FLICKER")] AscensionFlicker,
        [EnumMember(Value = "ASCENSION_HEAL_SUPPRESSION")] AscensionHealSuppression,
        [EnumMember(Value = "ASCENSION_MAGIC_IMMUNITY")] AscensionMagicImmunity,
        [EnumMember(Value = "ASCENSION_MAGIC_RESIST")] AscensionMagicResist,
        [EnumMember(Value = "ASCENSION_VAMPIRIC")] AscensionVampiric,
        [EnumMember(Value = "ASCENSION_MAGNETIC_FIELD")] AscensionMagneticField,
        [EnumMember(Value = "ASCENSION_SILENCE")] AscensionSilence,
        [EnumMember(Value = "ASCENSION_FIREFLY")] AscensionFirefly,
        [EnumMember(Value = "ASCENSION_EMBIGGEN")] AscensionEmbiggen,
        [EnumMember(Value = "ASCENSION_VENGEANCE")] AscensionVengeance,
        [EnumMember(Value = "AGHSFORT_ASCENSION_INVIS")] AghsfortAscensionInvis,
        [EnumMember(Value = "ASCENSION_METEORIC")] AscensionMeteoric,
        [EnumMember(Value = "ASCENSION_PLASMA_FIELD")] AscensionPlasmaField,
        [EnumMember(Value = "ASCENSION_BULWARK")] AscensionBulwark
    }

    public enum FilterAghanimLabMatchOrderBy
    {
        [EnumMember(Value = "DURATION")] Duration,
        [EnumMember(Value = "END_DATE_TIME")] EndDateTime
    }

    public enum FilterOrder
    {
        [EnumMember(Value = "ASC")] Asc,
        [EnumMember(Value = "DESC")] Desc
    }

    public enum FilterDireTide2020CustomGameMatchOrderBy
    {
        [EnumMember(Value = "CANDY_SCORED")] CandyScored,
        [EnumMember(Value = "END_DATE_TIME")] EndDateTime
    }

    public enum Search
    {
        [EnumMember(Value = "PLAYERS")] Players,
        [EnumMember(Value = "MATCHES")] Matches,
        [EnumMember(Value = "LEAGUES")] Leagues,
        [EnumMember(Value = "TEAMS")] Teams,
        [EnumMember(Value = "PRO_PLAYERS")] ProPlayers,
        [EnumMember(Value = "CASTERS")] Casters,
        [EnumMember(Value = "GUILDS")] Guilds
    }

    public enum NeutralItemTierEnum
    {
        [EnumMember(Value = "TIER_1")] Tier1,
        [EnumMember(Value = "TIER_2")] Tier2,
        [EnumMember(Value = "TIER_3")] Tier3,
        [EnumMember(Value = "TIER_4")] Tier4,
        [EnumMember(Value = "TIER_5")] Tier5
    }

    public enum FilterHeroWinRequestGroupBy
    {
        [EnumMember(Value = "HERO_ID")] HeroId,
        [EnumMember(Value = "ALL")] All,
        [EnumMember(Value = "HERO_ID_DURATION_MINUTES")] HeroIdDurationMinutes,
        [EnumMember(Value = "TIME")] Time,
        [EnumMember(Value = "HERO_ID_POSITION_BRACKET")] HeroIdPositionBracket
    }

    public enum PatchNoteType
    {
        [EnumMember(Value = "HERO")] Hero,
        [EnumMember(Value = "GENERAL")] General,
        [EnumMember(Value = "GENERIC")] Generic,
        [EnumMember(Value = "ITEM")] Item,
        [EnumMember(Value = "NPC")] Npc
    }

    public enum FilterLeaderboardOrder
    {
        [EnumMember(Value = "RECENT")] Recent,
        [EnumMember(Value = "LEVEL")] Level,
        [EnumMember(Value = "FIRST")] First
    }

    public enum PlayerBattlePassGroupByEnum
    {
        [EnumMember(Value = "COUNTRY_CODE")] CountryCode,
        [EnumMember(Value = "BRACKET")] Bracket
    }

    public enum FilterLeaderboardGuildOrderBy
    {
        [EnumMember(Value = "BATTLE_PASS_LEVELS")] BattlePassLevels,
        [EnumMember(Value = "MEMBER_COUNT")] MemberCount,
        [EnumMember(Value = "POINTS")] Points,
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "PREVIOUS_WEEK_RANK")] PreviousWeekRank,
        [EnumMember(Value = "RANK")] Rank
    }

    public enum MatchLiveRequestOrderBy
    {
        [EnumMember(Value = "GAME_TIME")] GameTime,
        [EnumMember(Value = "MATCH_ID")] MatchId,
        [EnumMember(Value = "SPECTATOR_COUNT")] SpectatorCount,
        [EnumMember(Value = "AVERAGE_RANK")] AverageRank
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public partial class DotaQueryQueryBuilder : GraphQlQueryBuilder<DotaQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "match", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "player", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "players", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "team", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teams", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "league", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leagues", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "guild", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "yogurt", IsComplex = true, QueryBuilderType = typeof(YogurtQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "plus", IsComplex = true, QueryBuilderType = typeof(PlusQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stratz", IsComplex = true, QueryBuilderType = typeof(StratzQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroStats", IsComplex = true, QueryBuilderType = typeof(HeroStatsQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "constants", IsComplex = true, QueryBuilderType = typeof(ConstantQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leaderboard", IsComplex = true, QueryBuilderType = typeof(LeaderboardQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "live", IsComplex = true, QueryBuilderType = typeof(LiveQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "vendor", IsComplex = true, QueryBuilderType = typeof(VendorQueryQueryBuilder) }
            };

        protected override string TypeName { get { return "DotaQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaQueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public DotaQueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public DotaQueryQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<long?> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public DotaQueryQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<IEnumerable<long?>> ids, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public DotaQueryQueryBuilder WithPlayer(PlayerTypeQueryBuilder playerTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithObjectField("player", alias, playerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptPlayer()
        {
            return ExceptField("player");
        }

        public DotaQueryQueryBuilder WithPlayers(PlayerTypeQueryBuilder playerTypeQueryBuilder, QueryBuilderParameter<IEnumerable<long?>> steamAccountIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            return WithObjectField("players", alias, playerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public DotaQueryQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, QueryBuilderParameter<int> teamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamId", ArgumentValue = teamId} );
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public DotaQueryQueryBuilder WithTeams(TeamTypeQueryBuilder teamTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            return WithObjectField("teams", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public DotaQueryQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public DotaQueryQueryBuilder WithLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<LeagueRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("leagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }

        public DotaQueryQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaQueryQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public DotaQueryQueryBuilder WithYogurt(YogurtQueryQueryBuilder yogurtQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("yogurt", alias, yogurtQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptYogurt()
        {
            return ExceptField("yogurt");
        }

        public DotaQueryQueryBuilder WithPlus(PlusQueryQueryBuilder plusQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("plus", alias, plusQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptPlus()
        {
            return ExceptField("plus");
        }

        public DotaQueryQueryBuilder WithStratz(StratzQueryQueryBuilder stratzQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stratz", alias, stratzQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptStratz()
        {
            return ExceptField("stratz");
        }

        public DotaQueryQueryBuilder WithHeroStats(HeroStatsQueryQueryBuilder heroStatsQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroStats", alias, heroStatsQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptHeroStats()
        {
            return ExceptField("heroStats");
        }

        public DotaQueryQueryBuilder WithConstants(ConstantQueryQueryBuilder constantQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("constants", alias, constantQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptConstants()
        {
            return ExceptField("constants");
        }

        public DotaQueryQueryBuilder WithLeaderboard(LeaderboardQueryQueryBuilder leaderboardQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leaderboard", alias, leaderboardQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptLeaderboard()
        {
            return ExceptField("leaderboard");
        }

        public DotaQueryQueryBuilder WithLive(LiveQueryQueryBuilder liveQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("live", alias, liveQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptLive()
        {
            return ExceptField("live");
        }

        public DotaQueryQueryBuilder WithVendor(VendorQueryQueryBuilder vendorQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vendor", alias, vendorQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaQueryQueryBuilder ExceptVendor()
        {
            return ExceptField("vendor");
        }
    }

    public partial class MatchTypeQueryBuilder : GraphQlQueryBuilder<MatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "didRadiantWin" },
                new GraphQlFieldMetadata { Name = "durationSeconds" },
                new GraphQlFieldMetadata { Name = "startDateTime" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "towerStatusRadiant" },
                new GraphQlFieldMetadata { Name = "towerStatusDire" },
                new GraphQlFieldMetadata { Name = "barracksStatusRadiant" },
                new GraphQlFieldMetadata { Name = "barracksStatusDire" },
                new GraphQlFieldMetadata { Name = "clusterId" },
                new GraphQlFieldMetadata { Name = "firstBloodTime" },
                new GraphQlFieldMetadata { Name = "lobbyType" },
                new GraphQlFieldMetadata { Name = "numHumanPlayers" },
                new GraphQlFieldMetadata { Name = "gameMode" },
                new GraphQlFieldMetadata { Name = "replaySalt" },
                new GraphQlFieldMetadata { Name = "isStats" },
                new GraphQlFieldMetadata { Name = "tournamentId" },
                new GraphQlFieldMetadata { Name = "tournamentRound" },
                new GraphQlFieldMetadata { Name = "actualRank" },
                new GraphQlFieldMetadata { Name = "averageRank" },
                new GraphQlFieldMetadata { Name = "averageImp" },
                new GraphQlFieldMetadata { Name = "parsedDateTime" },
                new GraphQlFieldMetadata { Name = "statsDateTime" },
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "radiantTeamId" },
                new GraphQlFieldMetadata { Name = "radiantTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "direTeamId" },
                new GraphQlFieldMetadata { Name = "direTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seriesId" },
                new GraphQlFieldMetadata { Name = "series", IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "regionId" },
                new GraphQlFieldMetadata { Name = "sequenceNum" },
                new GraphQlFieldMetadata { Name = "rank" },
                new GraphQlFieldMetadata { Name = "bracket" },
                new GraphQlFieldMetadata { Name = "analysisOutcome" },
                new GraphQlFieldMetadata { Name = "predictedOutcomeWeight" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(MatchPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "radiantNetworthLeads", IsComplex = true },
                new GraphQlFieldMetadata { Name = "radiantExperienceLeads", IsComplex = true },
                new GraphQlFieldMetadata { Name = "radiantKills", IsComplex = true },
                new GraphQlFieldMetadata { Name = "direKills", IsComplex = true },
                new GraphQlFieldMetadata { Name = "pickBans", IsComplex = true, QueryBuilderType = typeof(MatchStatsPickBanTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "towerStatus", IsComplex = true, QueryBuilderType = typeof(MatchStatsTowerReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "laneReport", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winRates", IsComplex = true },
                new GraphQlFieldMetadata { Name = "predictedWinRates", IsComplex = true },
                new GraphQlFieldMetadata { Name = "chatEvents", IsComplex = true, QueryBuilderType = typeof(MatchStatsChatEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "towerDeaths", IsComplex = true, QueryBuilderType = typeof(MatchStatsTowerDeathTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playbackData", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spectators", IsComplex = true, QueryBuilderType = typeof(MatchPlayerSpectatorTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "bottomLaneOutcome" },
                new GraphQlFieldMetadata { Name = "midLaneOutcome" },
                new GraphQlFieldMetadata { Name = "topLaneOutcome" },
                new GraphQlFieldMetadata { Name = "didRequestDownload" }
            };

        protected override string TypeName { get { return "MatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchTypeQueryBuilder WithDidRadiantWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRadiantWin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDidRadiantWin()
        {
            return ExceptField("didRadiantWin");
        }

        public MatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public MatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public MatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public MatchTypeQueryBuilder WithTowerStatusRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerStatusRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerStatusRadiant()
        {
            return ExceptField("towerStatusRadiant");
        }

        public MatchTypeQueryBuilder WithTowerStatusDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerStatusDire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerStatusDire()
        {
            return ExceptField("towerStatusDire");
        }

        public MatchTypeQueryBuilder WithBarracksStatusRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("barracksStatusRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBarracksStatusRadiant()
        {
            return ExceptField("barracksStatusRadiant");
        }

        public MatchTypeQueryBuilder WithBarracksStatusDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("barracksStatusDire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBarracksStatusDire()
        {
            return ExceptField("barracksStatusDire");
        }

        public MatchTypeQueryBuilder WithClusterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clusterId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptClusterId()
        {
            return ExceptField("clusterId");
        }

        public MatchTypeQueryBuilder WithFirstBloodTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstBloodTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptFirstBloodTime()
        {
            return ExceptField("firstBloodTime");
        }

        public MatchTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public MatchTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public MatchTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public MatchTypeQueryBuilder WithReplaySalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replaySalt", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptReplaySalt()
        {
            return ExceptField("replaySalt");
        }

        public MatchTypeQueryBuilder WithIsStats(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStats", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptIsStats()
        {
            return ExceptField("isStats");
        }

        public MatchTypeQueryBuilder WithTournamentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tournamentId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTournamentId()
        {
            return ExceptField("tournamentId");
        }

        public MatchTypeQueryBuilder WithTournamentRound(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tournamentRound", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTournamentRound()
        {
            return ExceptField("tournamentRound");
        }

        public MatchTypeQueryBuilder WithActualRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("actualRank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptActualRank()
        {
            return ExceptField("actualRank");
        }

        public MatchTypeQueryBuilder WithAverageRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageRank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptAverageRank()
        {
            return ExceptField("averageRank");
        }

        public MatchTypeQueryBuilder WithAverageImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptAverageImp()
        {
            return ExceptField("averageImp");
        }

        public MatchTypeQueryBuilder WithParsedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parsedDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptParsedDateTime()
        {
            return ExceptField("parsedDateTime");
        }

        public MatchTypeQueryBuilder WithStatsDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statsDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptStatsDateTime()
        {
            return ExceptField("statsDateTime");
        }

        public MatchTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public MatchTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public MatchTypeQueryBuilder WithRadiantTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantTeamId()
        {
            return ExceptField("radiantTeamId");
        }

        public MatchTypeQueryBuilder WithRadiantTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantTeam()
        {
            return ExceptField("radiantTeam");
        }

        public MatchTypeQueryBuilder WithDireTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDireTeamId()
        {
            return ExceptField("direTeamId");
        }

        public MatchTypeQueryBuilder WithDireTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDireTeam()
        {
            return ExceptField("direTeam");
        }

        public MatchTypeQueryBuilder WithSeriesId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSeriesId()
        {
            return ExceptField("seriesId");
        }

        public MatchTypeQueryBuilder WithSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("series", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public MatchTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public MatchTypeQueryBuilder WithSequenceNum(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sequenceNum", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSequenceNum()
        {
            return ExceptField("sequenceNum");
        }

        public MatchTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public MatchTypeQueryBuilder WithBracket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracket", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBracket()
        {
            return ExceptField("bracket");
        }

        public MatchTypeQueryBuilder WithAnalysisOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("analysisOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptAnalysisOutcome()
        {
            return ExceptField("analysisOutcome");
        }

        public MatchTypeQueryBuilder WithPredictedOutcomeWeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("predictedOutcomeWeight", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPredictedOutcomeWeight()
        {
            return ExceptField("predictedOutcomeWeight");
        }

        public MatchTypeQueryBuilder WithPlayers(MatchPlayerTypeQueryBuilder matchPlayerTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (steamAccountId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );

            return WithObjectField("players", alias, matchPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public MatchTypeQueryBuilder WithRadiantNetworthLeads(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantNetworthLeads", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantNetworthLeads()
        {
            return ExceptField("radiantNetworthLeads");
        }

        public MatchTypeQueryBuilder WithRadiantExperienceLeads(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantExperienceLeads", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantExperienceLeads()
        {
            return ExceptField("radiantExperienceLeads");
        }

        public MatchTypeQueryBuilder WithRadiantKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptRadiantKills()
        {
            return ExceptField("radiantKills");
        }

        public MatchTypeQueryBuilder WithDireKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDireKills()
        {
            return ExceptField("direKills");
        }

        public MatchTypeQueryBuilder WithPickBans(MatchStatsPickBanTypeQueryBuilder matchStatsPickBanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pickBans", alias, matchStatsPickBanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPickBans()
        {
            return ExceptField("pickBans");
        }

        public MatchTypeQueryBuilder WithTowerStatus(MatchStatsTowerReportTypeQueryBuilder matchStatsTowerReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerStatus", alias, matchStatsTowerReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerStatus()
        {
            return ExceptField("towerStatus");
        }

        public MatchTypeQueryBuilder WithLaneReport(MatchStatsLaneReportTypeQueryBuilder matchStatsLaneReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("laneReport", alias, matchStatsLaneReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptLaneReport()
        {
            return ExceptField("laneReport");
        }

        public MatchTypeQueryBuilder WithWinRates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRates", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptWinRates()
        {
            return ExceptField("winRates");
        }

        public MatchTypeQueryBuilder WithPredictedWinRates(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("predictedWinRates", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPredictedWinRates()
        {
            return ExceptField("predictedWinRates");
        }

        public MatchTypeQueryBuilder WithChatEvents(MatchStatsChatEventTypeQueryBuilder matchStatsChatEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chatEvents", alias, matchStatsChatEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptChatEvents()
        {
            return ExceptField("chatEvents");
        }

        public MatchTypeQueryBuilder WithTowerDeaths(MatchStatsTowerDeathTypeQueryBuilder matchStatsTowerDeathTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerDeaths", alias, matchStatsTowerDeathTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTowerDeaths()
        {
            return ExceptField("towerDeaths");
        }

        public MatchTypeQueryBuilder WithPlaybackData(MatchPlaybackDataTypeQueryBuilder matchPlaybackDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playbackData", alias, matchPlaybackDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptPlaybackData()
        {
            return ExceptField("playbackData");
        }

        public MatchTypeQueryBuilder WithSpectators(MatchPlayerSpectatorTypeQueryBuilder matchPlayerSpectatorTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("spectators", alias, matchPlayerSpectatorTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptSpectators()
        {
            return ExceptField("spectators");
        }

        public MatchTypeQueryBuilder WithBottomLaneOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bottomLaneOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptBottomLaneOutcome()
        {
            return ExceptField("bottomLaneOutcome");
        }

        public MatchTypeQueryBuilder WithMidLaneOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("midLaneOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptMidLaneOutcome()
        {
            return ExceptField("midLaneOutcome");
        }

        public MatchTypeQueryBuilder WithTopLaneOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topLaneOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptTopLaneOutcome()
        {
            return ExceptField("topLaneOutcome");
        }

        public MatchTypeQueryBuilder WithDidRequestDownload(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRequestDownload", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchTypeQueryBuilder ExceptDidRequestDownload()
        {
            return ExceptField("didRequestDownload");
        }
    }

    public partial class LeagueTypeQueryBuilder : GraphQlQueryBuilder<LeagueTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "banner" },
                new GraphQlFieldMetadata { Name = "basePrizePool" },
                new GraphQlFieldMetadata { Name = "stopSalesTime" },
                new GraphQlFieldMetadata { Name = "tier" },
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "private" },
                new GraphQlFieldMetadata { Name = "freeToSpectate" },
                new GraphQlFieldMetadata { Name = "startDateTime" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "tournamentUrl" },
                new GraphQlFieldMetadata { Name = "lastMatchDate" },
                new GraphQlFieldMetadata { Name = "hasLiveMatches" },
                new GraphQlFieldMetadata { Name = "prizePool" },
                new GraphQlFieldMetadata { Name = "imageUri" },
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "country" },
                new GraphQlFieldMetadata { Name = "venue" },
                new GraphQlFieldMetadata { Name = "isFollowed" },
                new GraphQlFieldMetadata { Name = "nodeGroups", IsComplex = true, QueryBuilderType = typeof(LeagueNodeGroupTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "liveMatches", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesGroupBy", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchGroupByTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "series", IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tables", IsComplex = true, QueryBuilderType = typeof(LeagueTableTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "battlePass", IsComplex = true, QueryBuilderType = typeof(LeagueBattlePassTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(LeagueStatTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "prizePoolPercentages", IsComplex = true, QueryBuilderType = typeof(LeaguePrizePoolPercentageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "standings", IsComplex = true, QueryBuilderType = typeof(TeamPrizeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "streams", IsComplex = true, QueryBuilderType = typeof(LeagueStreamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeagueTypeQueryBuilder WithBanner(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banner", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptBanner()
        {
            return ExceptField("banner");
        }

        public LeagueTypeQueryBuilder WithBasePrizePool(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basePrizePool", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptBasePrizePool()
        {
            return ExceptField("basePrizePool");
        }

        public LeagueTypeQueryBuilder WithStopSalesTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stopSalesTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptStopSalesTime()
        {
            return ExceptField("stopSalesTime");
        }

        public LeagueTypeQueryBuilder WithTier(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tier", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptTier()
        {
            return ExceptField("tier");
        }

        public LeagueTypeQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public LeagueTypeQueryBuilder WithPrivate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("private", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptPrivate()
        {
            return ExceptField("private");
        }

        public LeagueTypeQueryBuilder WithFreeToSpectate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("freeToSpectate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptFreeToSpectate()
        {
            return ExceptField("freeToSpectate");
        }

        public LeagueTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public LeagueTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public LeagueTypeQueryBuilder WithTournamentUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tournamentUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptTournamentUrl()
        {
            return ExceptField("tournamentUrl");
        }

        public LeagueTypeQueryBuilder WithLastMatchDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptLastMatchDate()
        {
            return ExceptField("lastMatchDate");
        }

        public LeagueTypeQueryBuilder WithHasLiveMatches(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasLiveMatches", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptHasLiveMatches()
        {
            return ExceptField("hasLiveMatches");
        }

        public LeagueTypeQueryBuilder WithPrizePool(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("prizePool", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptPrizePool()
        {
            return ExceptField("prizePool");
        }

        public LeagueTypeQueryBuilder WithImageUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imageUri", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptImageUri()
        {
            return ExceptField("imageUri");
        }

        public LeagueTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public LeagueTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public LeagueTypeQueryBuilder WithCountry(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("country", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptCountry()
        {
            return ExceptField("country");
        }

        public LeagueTypeQueryBuilder WithVenue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("venue", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptVenue()
        {
            return ExceptField("venue");
        }

        public LeagueTypeQueryBuilder WithIsFollowed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFollowed", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptIsFollowed()
        {
            return ExceptField("isFollowed");
        }

        public LeagueTypeQueryBuilder WithNodeGroups(LeagueNodeGroupTypeQueryBuilder leagueNodeGroupTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodeGroups", alias, leagueNodeGroupTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptNodeGroups()
        {
            return ExceptField("nodeGroups");
        }

        public LeagueTypeQueryBuilder WithLiveMatches(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("liveMatches", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptLiveMatches()
        {
            return ExceptField("liveMatches");
        }

        public LeagueTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<LeagueMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeagueTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public LeagueTypeQueryBuilder WithMatchesGroupBy(MatchGroupByTypeQueryBuilder matchGroupByTypeQueryBuilder, QueryBuilderParameter<PlayerMatchesGroupByRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matchesGroupBy", alias, matchGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeagueTypeQueryBuilder ExceptMatchesGroupBy()
        {
            return ExceptField("matchesGroupBy");
        }

        public LeagueTypeQueryBuilder WithSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, QueryBuilderParameter<IEnumerable<LeagueStage>> leagueStageTypeIds = null, QueryBuilderParameter<int?> seriesId = null, QueryBuilderParameter<int?> teamId = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (leagueStageTypeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueStageTypeIds", ArgumentValue = leagueStageTypeIds} );

            if (seriesId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "seriesId", ArgumentValue = seriesId} );

            if (teamId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamId", ArgumentValue = teamId} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("series", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public LeagueTypeQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public LeagueTypeQueryBuilder WithTables(LeagueTableTypeQueryBuilder leagueTableTypeQueryBuilder, QueryBuilderParameter<IEnumerable<LeagueStage>> leagueStageTypeIds = null, QueryBuilderParameter<TableCalculateEnum> calculateTypeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (leagueStageTypeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueStageTypeIds", ArgumentValue = leagueStageTypeIds} );

            if (calculateTypeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "calculateTypeId", ArgumentValue = calculateTypeId} );

            return WithObjectField("tables", alias, leagueTableTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeagueTypeQueryBuilder ExceptTables()
        {
            return ExceptField("tables");
        }

        public LeagueTypeQueryBuilder WithBattlePass(LeagueBattlePassTypeQueryBuilder leagueBattlePassTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("battlePass", alias, leagueBattlePassTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptBattlePass()
        {
            return ExceptField("battlePass");
        }

        public LeagueTypeQueryBuilder WithStats(LeagueStatTypeQueryBuilder leagueStatTypeQueryBuilder, QueryBuilderParameter<IEnumerable<LeagueStage>> leagueStageTypeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (leagueStageTypeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueStageTypeIds", ArgumentValue = leagueStageTypeIds} );

            return WithObjectField("stats", alias, leagueStatTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeagueTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public LeagueTypeQueryBuilder WithPrizePoolPercentages(LeaguePrizePoolPercentageTypeQueryBuilder leaguePrizePoolPercentageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("prizePoolPercentages", alias, leaguePrizePoolPercentageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptPrizePoolPercentages()
        {
            return ExceptField("prizePoolPercentages");
        }

        public LeagueTypeQueryBuilder WithStandings(TeamPrizeTypeQueryBuilder teamPrizeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("standings", alias, teamPrizeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptStandings()
        {
            return ExceptField("standings");
        }

        public LeagueTypeQueryBuilder WithStreams(LeagueStreamTypeQueryBuilder leagueStreamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("streams", alias, leagueStreamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTypeQueryBuilder ExceptStreams()
        {
            return ExceptField("streams");
        }
    }

    public partial class LeagueNodeGroupTypeQueryBuilder : GraphQlQueryBuilder<LeagueNodeGroupTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "parentNodeGroupId" },
                new GraphQlFieldMetadata { Name = "advancingNodeGroupId" },
                new GraphQlFieldMetadata { Name = "advancingTeamCount" },
                new GraphQlFieldMetadata { Name = "teamCount" },
                new GraphQlFieldMetadata { Name = "defaultNodeType" },
                new GraphQlFieldMetadata { Name = "nodeGroupType" },
                new GraphQlFieldMetadata { Name = "round" },
                new GraphQlFieldMetadata { Name = "maxRounds" },
                new GraphQlFieldMetadata { Name = "isTieBreaker" },
                new GraphQlFieldMetadata { Name = "isFinalGroup" },
                new GraphQlFieldMetadata { Name = "isCompleted" },
                new GraphQlFieldMetadata { Name = "phase" },
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "startDate" },
                new GraphQlFieldMetadata { Name = "endDate" },
                new GraphQlFieldMetadata { Name = "secondaryAdvancingNodeGroupId" },
                new GraphQlFieldMetadata { Name = "secondaryAdvancingTeamCount" },
                new GraphQlFieldMetadata { Name = "tertiaryAdvancingNodeGroupId" },
                new GraphQlFieldMetadata { Name = "tertiaryAdvancingTeamCount" },
                new GraphQlFieldMetadata { Name = "eliminationDPCPoints" },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(LeagueNodeTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueNodeGroupType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueNodeGroupTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueNodeGroupTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeagueNodeGroupTypeQueryBuilder WithParentNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parentNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptParentNodeGroupId()
        {
            return ExceptField("parentNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithAdvancingNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancingNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptAdvancingNodeGroupId()
        {
            return ExceptField("advancingNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithAdvancingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("advancingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptAdvancingTeamCount()
        {
            return ExceptField("advancingTeamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptTeamCount()
        {
            return ExceptField("teamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithDefaultNodeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("defaultNodeType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptDefaultNodeType()
        {
            return ExceptField("defaultNodeType");
        }

        public LeagueNodeGroupTypeQueryBuilder WithNodeGroupType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nodeGroupType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptNodeGroupType()
        {
            return ExceptField("nodeGroupType");
        }

        public LeagueNodeGroupTypeQueryBuilder WithRound(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("round", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptRound()
        {
            return ExceptField("round");
        }

        public LeagueNodeGroupTypeQueryBuilder WithMaxRounds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxRounds", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptMaxRounds()
        {
            return ExceptField("maxRounds");
        }

        public LeagueNodeGroupTypeQueryBuilder WithIsTieBreaker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTieBreaker", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptIsTieBreaker()
        {
            return ExceptField("isTieBreaker");
        }

        public LeagueNodeGroupTypeQueryBuilder WithIsFinalGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFinalGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptIsFinalGroup()
        {
            return ExceptField("isFinalGroup");
        }

        public LeagueNodeGroupTypeQueryBuilder WithIsCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptIsCompleted()
        {
            return ExceptField("isCompleted");
        }

        public LeagueNodeGroupTypeQueryBuilder WithPhase(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("phase", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptPhase()
        {
            return ExceptField("phase");
        }

        public LeagueNodeGroupTypeQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public LeagueNodeGroupTypeQueryBuilder WithStartDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptStartDate()
        {
            return ExceptField("startDate");
        }

        public LeagueNodeGroupTypeQueryBuilder WithEndDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptEndDate()
        {
            return ExceptField("endDate");
        }

        public LeagueNodeGroupTypeQueryBuilder WithSecondaryAdvancingNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryAdvancingNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptSecondaryAdvancingNodeGroupId()
        {
            return ExceptField("secondaryAdvancingNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithSecondaryAdvancingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryAdvancingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptSecondaryAdvancingTeamCount()
        {
            return ExceptField("secondaryAdvancingTeamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithTertiaryAdvancingNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tertiaryAdvancingNodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptTertiaryAdvancingNodeGroupId()
        {
            return ExceptField("tertiaryAdvancingNodeGroupId");
        }

        public LeagueNodeGroupTypeQueryBuilder WithTertiaryAdvancingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tertiaryAdvancingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptTertiaryAdvancingTeamCount()
        {
            return ExceptField("tertiaryAdvancingTeamCount");
        }

        public LeagueNodeGroupTypeQueryBuilder WithEliminationDpcPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliminationDPCPoints", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptEliminationDpcPoints()
        {
            return ExceptField("eliminationDPCPoints");
        }

        public LeagueNodeGroupTypeQueryBuilder WithNodes(LeagueNodeTypeQueryBuilder leagueNodeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, leagueNodeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeGroupTypeQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class LeagueNodeTypeQueryBuilder : GraphQlQueryBuilder<LeagueNodeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodeGroupId" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "winningNodeId" },
                new GraphQlFieldMetadata { Name = "losingNodeId" },
                new GraphQlFieldMetadata { Name = "nodeType" },
                new GraphQlFieldMetadata { Name = "scheduledTime" },
                new GraphQlFieldMetadata { Name = "actualTime" },
                new GraphQlFieldMetadata { Name = "seriesId" },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamOneId" },
                new GraphQlFieldMetadata { Name = "teamOne", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamTwoId" },
                new GraphQlFieldMetadata { Name = "teamTwo", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamOneWins" },
                new GraphQlFieldMetadata { Name = "teamTwoWins" },
                new GraphQlFieldMetadata { Name = "hasStarted" },
                new GraphQlFieldMetadata { Name = "isCompleted" },
                new GraphQlFieldMetadata { Name = "streamIds", IsComplex = true },
                new GraphQlFieldMetadata { Name = "streams", IsComplex = true, QueryBuilderType = typeof(LeagueStreamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueNodeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueNodeTypeQueryBuilder WithNodeGroupId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nodeGroupId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptNodeGroupId()
        {
            return ExceptField("nodeGroupId");
        }

        public LeagueNodeTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueNodeTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeagueNodeTypeQueryBuilder WithWinningNodeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winningNodeId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptWinningNodeId()
        {
            return ExceptField("winningNodeId");
        }

        public LeagueNodeTypeQueryBuilder WithLosingNodeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("losingNodeId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptLosingNodeId()
        {
            return ExceptField("losingNodeId");
        }

        public LeagueNodeTypeQueryBuilder WithNodeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nodeType", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptNodeType()
        {
            return ExceptField("nodeType");
        }

        public LeagueNodeTypeQueryBuilder WithScheduledTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scheduledTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptScheduledTime()
        {
            return ExceptField("scheduledTime");
        }

        public LeagueNodeTypeQueryBuilder WithActualTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("actualTime", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptActualTime()
        {
            return ExceptField("actualTime");
        }

        public LeagueNodeTypeQueryBuilder WithSeriesId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptSeriesId()
        {
            return ExceptField("seriesId");
        }

        public LeagueNodeTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public LeagueNodeTypeQueryBuilder WithTeamOneId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamOneId()
        {
            return ExceptField("teamOneId");
        }

        public LeagueNodeTypeQueryBuilder WithTeamOne(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamOne", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamOne()
        {
            return ExceptField("teamOne");
        }

        public LeagueNodeTypeQueryBuilder WithTeamTwoId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamTwoId()
        {
            return ExceptField("teamTwoId");
        }

        public LeagueNodeTypeQueryBuilder WithTeamTwo(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamTwo", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamTwo()
        {
            return ExceptField("teamTwo");
        }

        public LeagueNodeTypeQueryBuilder WithTeamOneWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamOneWins()
        {
            return ExceptField("teamOneWins");
        }

        public LeagueNodeTypeQueryBuilder WithTeamTwoWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptTeamTwoWins()
        {
            return ExceptField("teamTwoWins");
        }

        public LeagueNodeTypeQueryBuilder WithHasStarted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasStarted", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptHasStarted()
        {
            return ExceptField("hasStarted");
        }

        public LeagueNodeTypeQueryBuilder WithIsCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptIsCompleted()
        {
            return ExceptField("isCompleted");
        }

        public LeagueNodeTypeQueryBuilder WithStreamIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streamIds", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptStreamIds()
        {
            return ExceptField("streamIds");
        }

        public LeagueNodeTypeQueryBuilder WithStreams(LeagueStreamTypeQueryBuilder leagueStreamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("streams", alias, leagueStreamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueNodeTypeQueryBuilder ExceptStreams()
        {
            return ExceptField("streams");
        }
    }

    public partial class TeamTypeQueryBuilder : GraphQlQueryBuilder<TeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "tag" },
                new GraphQlFieldMetadata { Name = "dateCreated" },
                new GraphQlFieldMetadata { Name = "isPro" },
                new GraphQlFieldMetadata { Name = "isLocked" },
                new GraphQlFieldMetadata { Name = "countryCode" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "logo" },
                new GraphQlFieldMetadata { Name = "baseLogo" },
                new GraphQlFieldMetadata { Name = "bannerLogo" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lossCount" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "countryName" },
                new GraphQlFieldMetadata { Name = "coachSteamAccountId" },
                new GraphQlFieldMetadata { Name = "coachSteamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "series", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(SteamAccountTeamMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesGroupBy", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchGroupByTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroPickBan", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchPickBanGroupByTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TeamTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TeamTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TeamTypeQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public TeamTypeQueryBuilder WithDateCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptDateCreated()
        {
            return ExceptField("dateCreated");
        }

        public TeamTypeQueryBuilder WithIsPro(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPro", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptIsPro()
        {
            return ExceptField("isPro");
        }

        public TeamTypeQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public TeamTypeQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public TeamTypeQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public TeamTypeQueryBuilder WithLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logo", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLogo()
        {
            return ExceptField("logo");
        }

        public TeamTypeQueryBuilder WithBaseLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseLogo", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptBaseLogo()
        {
            return ExceptField("baseLogo");
        }

        public TeamTypeQueryBuilder WithBannerLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannerLogo", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptBannerLogo()
        {
            return ExceptField("bannerLogo");
        }

        public TeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public TeamTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }

        public TeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public TeamTypeQueryBuilder WithCountryName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryName", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCountryName()
        {
            return ExceptField("countryName");
        }

        public TeamTypeQueryBuilder WithCoachSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coachSteamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCoachSteamAccountId()
        {
            return ExceptField("coachSteamAccountId");
        }

        public TeamTypeQueryBuilder WithCoachSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("coachSteamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptCoachSteamAccount()
        {
            return ExceptField("coachSteamAccount");
        }

        public TeamTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<TeamMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public TeamTypeQueryBuilder WithSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, QueryBuilderParameter<FilterSeriesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("series", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptSeries()
        {
            return ExceptField("series");
        }

        public TeamTypeQueryBuilder WithMembers(SteamAccountTeamMemberTypeQueryBuilder steamAccountTeamMemberTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("members", alias, steamAccountTeamMemberTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public TeamTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public TeamTypeQueryBuilder WithMatchesGroupBy(MatchGroupByTypeQueryBuilder matchGroupByTypeQueryBuilder, QueryBuilderParameter<PlayerMatchesGroupByRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matchesGroupBy", alias, matchGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptMatchesGroupBy()
        {
            return ExceptField("matchesGroupBy");
        }

        public TeamTypeQueryBuilder WithHeroPickBan(MatchPickBanGroupByTypeQueryBuilder matchPickBanGroupByTypeQueryBuilder, QueryBuilderParameter<HeroPickBanRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("heroPickBan", alias, matchPickBanGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TeamTypeQueryBuilder ExceptHeroPickBan()
        {
            return ExceptField("heroPickBan");
        }

        public TeamTypeQueryBuilder WithLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamTypeQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }
    }

    public partial class SteamAccountTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "profileUri" },
                new GraphQlFieldMetadata { Name = "realName" },
                new GraphQlFieldMetadata { Name = "timeCreated" },
                new GraphQlFieldMetadata { Name = "countryCode" },
                new GraphQlFieldMetadata { Name = "stateCode" },
                new GraphQlFieldMetadata { Name = "cityId" },
                new GraphQlFieldMetadata { Name = "communityVisibleState" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "lastLogOff" },
                new GraphQlFieldMetadata { Name = "avatar" },
                new GraphQlFieldMetadata { Name = "primaryClanId" },
                new GraphQlFieldMetadata { Name = "isDotaPlusSubscriber" },
                new GraphQlFieldMetadata { Name = "dotaAccountLevel" },
                new GraphQlFieldMetadata { Name = "rankShift" },
                new GraphQlFieldMetadata { Name = "isAnonymous" },
                new GraphQlFieldMetadata { Name = "isStratzPublic" },
                new GraphQlFieldMetadata { Name = "seasonRank" },
                new GraphQlFieldMetadata { Name = "seasonLeaderboardRank" },
                new GraphQlFieldMetadata { Name = "seasonLeaderboardDivisionId" },
                new GraphQlFieldMetadata { Name = "proSteamAccount", IsComplex = true, QueryBuilderType = typeof(ProSteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(PlayerActivitySummaryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "smurfFlag" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "lastMatchRegionId" },
                new GraphQlFieldMetadata { Name = "battlepass", IsComplex = true, QueryBuilderType = typeof(SteamAccountBattlePassTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isCaster" }
            };

        protected override string TypeName { get { return "SteamAccountType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SteamAccountTypeQueryBuilder WithProfileUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("profileUri", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptProfileUri()
        {
            return ExceptField("profileUri");
        }

        public SteamAccountTypeQueryBuilder WithRealName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("realName", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptRealName()
        {
            return ExceptField("realName");
        }

        public SteamAccountTypeQueryBuilder WithTimeCreated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeCreated", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptTimeCreated()
        {
            return ExceptField("timeCreated");
        }

        public SteamAccountTypeQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public SteamAccountTypeQueryBuilder WithStateCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stateCode", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptStateCode()
        {
            return ExceptField("stateCode");
        }

        public SteamAccountTypeQueryBuilder WithCityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cityId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptCityId()
        {
            return ExceptField("cityId");
        }

        public SteamAccountTypeQueryBuilder WithCommunityVisibleState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("communityVisibleState", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptCommunityVisibleState()
        {
            return ExceptField("communityVisibleState");
        }

        public SteamAccountTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SteamAccountTypeQueryBuilder WithLastLogOff(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastLogOff", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptLastLogOff()
        {
            return ExceptField("lastLogOff");
        }

        public SteamAccountTypeQueryBuilder WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptAvatar()
        {
            return ExceptField("avatar");
        }

        public SteamAccountTypeQueryBuilder WithPrimaryClanId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("primaryClanId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptPrimaryClanId()
        {
            return ExceptField("primaryClanId");
        }

        public SteamAccountTypeQueryBuilder WithIsDotaPlusSubscriber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDotaPlusSubscriber", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptIsDotaPlusSubscriber()
        {
            return ExceptField("isDotaPlusSubscriber");
        }

        public SteamAccountTypeQueryBuilder WithDotaAccountLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dotaAccountLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptDotaAccountLevel()
        {
            return ExceptField("dotaAccountLevel");
        }

        public SteamAccountTypeQueryBuilder WithRankShift(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rankShift", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptRankShift()
        {
            return ExceptField("rankShift");
        }

        public SteamAccountTypeQueryBuilder WithIsAnonymous(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAnonymous", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptIsAnonymous()
        {
            return ExceptField("isAnonymous");
        }

        public SteamAccountTypeQueryBuilder WithIsStratzPublic(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStratzPublic", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptIsStratzPublic()
        {
            return ExceptField("isStratzPublic");
        }

        public SteamAccountTypeQueryBuilder WithSeasonRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonRank", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptSeasonRank()
        {
            return ExceptField("seasonRank");
        }

        public SteamAccountTypeQueryBuilder WithSeasonLeaderboardRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonLeaderboardRank", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptSeasonLeaderboardRank()
        {
            return ExceptField("seasonLeaderboardRank");
        }

        public SteamAccountTypeQueryBuilder WithSeasonLeaderboardDivisionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonLeaderboardDivisionId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptSeasonLeaderboardDivisionId()
        {
            return ExceptField("seasonLeaderboardDivisionId");
        }

        public SteamAccountTypeQueryBuilder WithProSteamAccount(ProSteamAccountTypeQueryBuilder proSteamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("proSteamAccount", alias, proSteamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptProSteamAccount()
        {
            return ExceptField("proSteamAccount");
        }

        public SteamAccountTypeQueryBuilder WithActivity(PlayerActivitySummaryTypeQueryBuilder playerActivitySummaryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, playerActivitySummaryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public SteamAccountTypeQueryBuilder WithSmurfFlag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("smurfFlag", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptSmurfFlag()
        {
            return ExceptField("smurfFlag");
        }

        public SteamAccountTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public SteamAccountTypeQueryBuilder WithLastMatchRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchRegionId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptLastMatchRegionId()
        {
            return ExceptField("lastMatchRegionId");
        }

        public SteamAccountTypeQueryBuilder WithBattlepass(SteamAccountBattlePassTypeQueryBuilder steamAccountBattlePassTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("battlepass", alias, steamAccountBattlePassTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptBattlepass()
        {
            return ExceptField("battlepass");
        }

        public SteamAccountTypeQueryBuilder WithGuild(GuildMemberTypeQueryBuilder guildMemberTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("guild", alias, guildMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public SteamAccountTypeQueryBuilder WithIsCaster(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCaster", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTypeQueryBuilder ExceptIsCaster()
        {
            return ExceptField("isCaster");
        }
    }

    public partial class ProSteamAccountTypeQueryBuilder : GraphQlQueryBuilder<ProSteamAccountTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "realName" },
                new GraphQlFieldMetadata { Name = "fantasyRole" },
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "sponsor" },
                new GraphQlFieldMetadata { Name = "isLocked" },
                new GraphQlFieldMetadata { Name = "isPro" },
                new GraphQlFieldMetadata { Name = "totalEarnings" },
                new GraphQlFieldMetadata { Name = "birthday" },
                new GraphQlFieldMetadata { Name = "romanizedRealName" },
                new GraphQlFieldMetadata { Name = "roles" },
                new GraphQlFieldMetadata { Name = "aliases", IsComplex = true },
                new GraphQlFieldMetadata { Name = "statuses" },
                new GraphQlFieldMetadata { Name = "twitterLink" },
                new GraphQlFieldMetadata { Name = "twitchLink" },
                new GraphQlFieldMetadata { Name = "instagramLink" },
                new GraphQlFieldMetadata { Name = "vkLink" },
                new GraphQlFieldMetadata { Name = "youTubeLink" },
                new GraphQlFieldMetadata { Name = "facebookLink" },
                new GraphQlFieldMetadata { Name = "weiboLink" },
                new GraphQlFieldMetadata { Name = "signatureHeroes", IsComplex = true },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "countries", IsComplex = true },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ProSteamAccountType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProSteamAccountTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ProSteamAccountTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ProSteamAccountTypeQueryBuilder WithRealName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("realName", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptRealName()
        {
            return ExceptField("realName");
        }

        public ProSteamAccountTypeQueryBuilder WithFantasyRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fantasyRole", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptFantasyRole()
        {
            return ExceptField("fantasyRole");
        }

        public ProSteamAccountTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public ProSteamAccountTypeQueryBuilder WithSponsor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sponsor", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptSponsor()
        {
            return ExceptField("sponsor");
        }

        public ProSteamAccountTypeQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptIsLocked()
        {
            return ExceptField("isLocked");
        }

        public ProSteamAccountTypeQueryBuilder WithIsPro(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPro", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptIsPro()
        {
            return ExceptField("isPro");
        }

        public ProSteamAccountTypeQueryBuilder WithTotalEarnings(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalEarnings", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTotalEarnings()
        {
            return ExceptField("totalEarnings");
        }

        public ProSteamAccountTypeQueryBuilder WithBirthday(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("birthday", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptBirthday()
        {
            return ExceptField("birthday");
        }

        public ProSteamAccountTypeQueryBuilder WithRomanizedRealName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("romanizedRealName", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptRomanizedRealName()
        {
            return ExceptField("romanizedRealName");
        }

        public ProSteamAccountTypeQueryBuilder WithRoles(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roles", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public ProSteamAccountTypeQueryBuilder WithAliases(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("aliases", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptAliases()
        {
            return ExceptField("aliases");
        }

        public ProSteamAccountTypeQueryBuilder WithStatuses(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statuses", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptStatuses()
        {
            return ExceptField("statuses");
        }

        public ProSteamAccountTypeQueryBuilder WithTwitterLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitterLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTwitterLink()
        {
            return ExceptField("twitterLink");
        }

        public ProSteamAccountTypeQueryBuilder WithTwitchLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitchLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTwitchLink()
        {
            return ExceptField("twitchLink");
        }

        public ProSteamAccountTypeQueryBuilder WithInstagramLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("instagramLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptInstagramLink()
        {
            return ExceptField("instagramLink");
        }

        public ProSteamAccountTypeQueryBuilder WithVkLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("vkLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptVkLink()
        {
            return ExceptField("vkLink");
        }

        public ProSteamAccountTypeQueryBuilder WithYouTubeLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("youTubeLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptYouTubeLink()
        {
            return ExceptField("youTubeLink");
        }

        public ProSteamAccountTypeQueryBuilder WithFacebookLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facebookLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptFacebookLink()
        {
            return ExceptField("facebookLink");
        }

        public ProSteamAccountTypeQueryBuilder WithWeiboLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weiboLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptWeiboLink()
        {
            return ExceptField("weiboLink");
        }

        public ProSteamAccountTypeQueryBuilder WithSignatureHeroes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("signatureHeroes", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptSignatureHeroes()
        {
            return ExceptField("signatureHeroes");
        }

        public ProSteamAccountTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public ProSteamAccountTypeQueryBuilder WithCountries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countries", alias, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptCountries()
        {
            return ExceptField("countries");
        }

        public ProSteamAccountTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProSteamAccountTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }
    }

    public partial class PlayerActivitySummaryTypeQueryBuilder : GraphQlQueryBuilder<PlayerActivitySummaryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "activity" }
            };

        protected override string TypeName { get { return "PlayerActivitySummaryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerActivitySummaryTypeQueryBuilder WithActivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activity", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerActivitySummaryTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }
    }

    public partial class SteamAccountBattlePassTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountBattlePassTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "eventId" },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "SteamAccountBattlePassType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountBattlePassTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountBattlePassTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public SteamAccountBattlePassTypeQueryBuilder WithEventId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountBattlePassTypeQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public SteamAccountBattlePassTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountBattlePassTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public partial class GuildMemberTypeQueryBuilder : GraphQlQueryBuilder<GuildMemberTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "guildId" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "joinDateTime" },
                new GraphQlFieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "GuildMemberType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GuildMemberTypeQueryBuilder WithGuildId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("guildId", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptGuildId()
        {
            return ExceptField("guildId");
        }

        public GuildMemberTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public GuildMemberTypeQueryBuilder WithJoinDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("joinDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptJoinDateTime()
        {
            return ExceptField("joinDateTime");
        }

        public GuildMemberTypeQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public GuildMemberTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public GuildMemberTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public GuildMemberTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public GuildMemberTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildMemberTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }

    public partial class GuildTypeQueryBuilder : GraphQlQueryBuilder<GuildTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "motd" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "tag" },
                new GraphQlFieldMetadata { Name = "createdDateTime" },
                new GraphQlFieldMetadata { Name = "language" },
                new GraphQlFieldMetadata { Name = "flags" },
                new GraphQlFieldMetadata { Name = "logo" },
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "requiredRank" },
                new GraphQlFieldMetadata { Name = "primaryColor" },
                new GraphQlFieldMetadata { Name = "secondaryColor" },
                new GraphQlFieldMetadata { Name = "pattern" },
                new GraphQlFieldMetadata { Name = "points" },
                new GraphQlFieldMetadata { Name = "pastWeeklyRank" },
                new GraphQlFieldMetadata { Name = "pastWeeklyPercentile" },
                new GraphQlFieldMetadata { Name = "currentPercentile" },
                new GraphQlFieldMetadata { Name = "lastUpdateDateTime" },
                new GraphQlFieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(GuildMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "memberCount" },
                new GraphQlFieldMetadata { Name = "totalBattlePassLevels" },
                new GraphQlFieldMetadata { Name = "rank" }
            };

        protected override string TypeName { get { return "GuildType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GuildTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GuildTypeQueryBuilder WithMotd(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("motd", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptMotd()
        {
            return ExceptField("motd");
        }

        public GuildTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public GuildTypeQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public GuildTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }

        public GuildTypeQueryBuilder WithLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("language", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public GuildTypeQueryBuilder WithFlags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flags", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptFlags()
        {
            return ExceptField("flags");
        }

        public GuildTypeQueryBuilder WithLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("logo", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptLogo()
        {
            return ExceptField("logo");
        }

        public GuildTypeQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public GuildTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public GuildTypeQueryBuilder WithRequiredRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiredRank", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptRequiredRank()
        {
            return ExceptField("requiredRank");
        }

        public GuildTypeQueryBuilder WithPrimaryColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("primaryColor", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPrimaryColor()
        {
            return ExceptField("primaryColor");
        }

        public GuildTypeQueryBuilder WithSecondaryColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryColor", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptSecondaryColor()
        {
            return ExceptField("secondaryColor");
        }

        public GuildTypeQueryBuilder WithPattern(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pattern", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPattern()
        {
            return ExceptField("pattern");
        }

        public GuildTypeQueryBuilder WithPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("points", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public GuildTypeQueryBuilder WithPastWeeklyRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pastWeeklyRank", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPastWeeklyRank()
        {
            return ExceptField("pastWeeklyRank");
        }

        public GuildTypeQueryBuilder WithPastWeeklyPercentile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pastWeeklyPercentile", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptPastWeeklyPercentile()
        {
            return ExceptField("pastWeeklyPercentile");
        }

        public GuildTypeQueryBuilder WithCurrentPercentile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentPercentile", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptCurrentPercentile()
        {
            return ExceptField("currentPercentile");
        }

        public GuildTypeQueryBuilder WithLastUpdateDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdateDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptLastUpdateDateTime()
        {
            return ExceptField("lastUpdateDateTime");
        }

        public GuildTypeQueryBuilder WithMembers(GuildMemberTypeQueryBuilder guildMemberTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("members", alias, guildMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public GuildTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public GuildTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public GuildTypeQueryBuilder WithMemberCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("memberCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptMemberCount()
        {
            return ExceptField("memberCount");
        }

        public GuildTypeQueryBuilder WithTotalBattlePassLevels(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalBattlePassLevels", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptTotalBattlePassLevels()
        {
            return ExceptField("totalBattlePassLevels");
        }

        public GuildTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public GuildTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }
    }

    public partial class SeriesTypeQueryBuilder : GraphQlQueryBuilder<SeriesTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "teamOneId" },
                new GraphQlFieldMetadata { Name = "teamTwoId" },
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "teamOneWinCount" },
                new GraphQlFieldMetadata { Name = "teamTwoWinCount" },
                new GraphQlFieldMetadata { Name = "winningTeamId" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamOne", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamTwo", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(LeagueNodeTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SeriesType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SeriesTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SeriesTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public SeriesTypeQueryBuilder WithTeamOneId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamOneId()
        {
            return ExceptField("teamOneId");
        }

        public SeriesTypeQueryBuilder WithTeamTwoId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamTwoId()
        {
            return ExceptField("teamTwoId");
        }

        public SeriesTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public SeriesTypeQueryBuilder WithTeamOneWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamOneWinCount()
        {
            return ExceptField("teamOneWinCount");
        }

        public SeriesTypeQueryBuilder WithTeamTwoWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamTwoWinCount()
        {
            return ExceptField("teamTwoWinCount");
        }

        public SeriesTypeQueryBuilder WithWinningTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winningTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptWinningTeamId()
        {
            return ExceptField("winningTeamId");
        }

        public SeriesTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public SeriesTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public SeriesTypeQueryBuilder WithTeamOne(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamOne", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamOne()
        {
            return ExceptField("teamOne");
        }

        public SeriesTypeQueryBuilder WithTeamTwo(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamTwo", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptTeamTwo()
        {
            return ExceptField("teamTwo");
        }

        public SeriesTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public SeriesTypeQueryBuilder WithNode(LeagueNodeTypeQueryBuilder leagueNodeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, leagueNodeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeriesTypeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public partial class SteamAccountTeamMemberTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountTeamMemberTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "player", IsComplex = true, QueryBuilderType = typeof(PlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "firstMatchId" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" },
                new GraphQlFieldMetadata { Name = "lastMatchId" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SteamAccountTeamMemberType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountTeamMemberTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithPlayer(PlayerTypeQueryBuilder playerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("player", alias, playerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptPlayer()
        {
            return ExceptField("player");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithFirstMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptFirstMatchId()
        {
            return ExceptField("firstMatchId");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithLastMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptLastMatchId()
        {
            return ExceptField("lastMatchId");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public SteamAccountTeamMemberTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountTeamMemberTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }
    }

    public partial class PlayerTypeQueryBuilder : GraphQlQueryBuilder<PlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "identity", IsComplex = true, QueryBuilderType = typeof(CaptainJackIdentityPublicProfileTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "firstMatchDate" },
                new GraphQlFieldMetadata { Name = "lastMatchDate" },
                new GraphQlFieldMetadata { Name = "lastMatchRegionId" },
                new GraphQlFieldMetadata { Name = "ranks", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonRankTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leaderboardRanks", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonLeaderBoardRankTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "badges", IsComplex = true, QueryBuilderType = typeof(PlayerBadgeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "names", IsComplex = true, QueryBuilderType = typeof(SteamAccountNameTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "behaviorScore" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(SteamAccountTeamMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "guildMember", IsComplex = true, QueryBuilderType = typeof(GuildMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "activity", IsComplex = true, QueryBuilderType = typeof(PlayerActivitySummaryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isFollowed" },
                new GraphQlFieldMetadata { Name = "simpleSummary", IsComplex = true, QueryBuilderType = typeof(PlayerCardHoverTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "performance", IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroPerformance", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroesPerformance", IsComplex = true, QueryBuilderType = typeof(PlayerHeroesPerformanceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesGroupBy", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchGroupByTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dotaPlus", IsComplex = true, QueryBuilderType = typeof(HeroDotaPlusLeaderboardRankTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroStreaks", IsComplex = true, QueryBuilderType = typeof(PlayerHeroPerformanceLongestStreakTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feats", IsComplex = true, QueryBuilderType = typeof(FeatTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerTypeQueryBuilder WithIdentity(CaptainJackIdentityPublicProfileTypeQueryBuilder captainJackIdentityPublicProfileTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("identity", alias, captainJackIdentityPublicProfileTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptIdentity()
        {
            return ExceptField("identity");
        }

        public PlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlayerTypeQueryBuilder WithFirstMatchDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDate", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptFirstMatchDate()
        {
            return ExceptField("firstMatchDate");
        }

        public PlayerTypeQueryBuilder WithLastMatchDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDate", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptLastMatchDate()
        {
            return ExceptField("lastMatchDate");
        }

        public PlayerTypeQueryBuilder WithLastMatchRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchRegionId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptLastMatchRegionId()
        {
            return ExceptField("lastMatchRegionId");
        }

        public PlayerTypeQueryBuilder WithRanks(SteamAccountSeasonRankTypeQueryBuilder steamAccountSeasonRankTypeQueryBuilder, QueryBuilderParameter<IEnumerable<byte?>> seasonRankIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (seasonRankIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "seasonRankIds", ArgumentValue = seasonRankIds} );

            return WithObjectField("ranks", alias, steamAccountSeasonRankTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerTypeQueryBuilder ExceptRanks()
        {
            return ExceptField("ranks");
        }

        public PlayerTypeQueryBuilder WithLeaderboardRanks(SteamAccountSeasonLeaderBoardRankTypeQueryBuilder steamAccountSeasonLeaderBoardRankTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("leaderboardRanks", alias, steamAccountSeasonLeaderBoardRankTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PlayerTypeQueryBuilder ExceptLeaderboardRanks()
        {
            return ExceptField("leaderboardRanks");
        }

        public PlayerTypeQueryBuilder WithBadges(PlayerBadgeTypeQueryBuilder playerBadgeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("badges", alias, playerBadgeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptBadges()
        {
            return ExceptField("badges");
        }

        public PlayerTypeQueryBuilder WithNames(SteamAccountNameTypeQueryBuilder steamAccountNameTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("names", alias, steamAccountNameTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PlayerTypeQueryBuilder ExceptNames()
        {
            return ExceptField("names");
        }

        public PlayerTypeQueryBuilder WithBehaviorScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorScore", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptBehaviorScore()
        {
            return ExceptField("behaviorScore");
        }

        public PlayerTypeQueryBuilder WithTeam(SteamAccountTeamMemberTypeQueryBuilder steamAccountTeamMemberTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, steamAccountTeamMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public PlayerTypeQueryBuilder WithGuildMember(GuildMemberTypeQueryBuilder guildMemberTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("guildMember", alias, guildMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptGuildMember()
        {
            return ExceptField("guildMember");
        }

        public PlayerTypeQueryBuilder WithActivity(PlayerActivitySummaryTypeQueryBuilder playerActivitySummaryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("activity", alias, playerActivitySummaryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public PlayerTypeQueryBuilder WithIsFollowed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFollowed", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptIsFollowed()
        {
            return ExceptField("isFollowed");
        }

        public PlayerTypeQueryBuilder WithSimpleSummary(PlayerCardHoverTypeQueryBuilder playerCardHoverTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("simpleSummary", alias, playerCardHoverTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptSimpleSummary()
        {
            return ExceptField("simpleSummary");
        }

        public PlayerTypeQueryBuilder WithPerformance(PlayerPerformanceTypeQueryBuilder playerPerformanceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("performance", alias, playerPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptPerformance()
        {
            return ExceptField("performance");
        }

        public PlayerTypeQueryBuilder WithHeroPerformance(PlayerPerformanceTypeQueryBuilder playerPerformanceTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<PlayerHeroPerformanceMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("heroPerformance", alias, playerPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerTypeQueryBuilder ExceptHeroPerformance()
        {
            return ExceptField("heroPerformance");
        }

        public PlayerTypeQueryBuilder WithHeroesPerformance(PlayerHeroesPerformanceTypeQueryBuilder playerHeroesPerformanceTypeQueryBuilder, QueryBuilderParameter<PlayerHeroPerformanceMatchesRequestType> request = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("heroesPerformance", alias, playerHeroesPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PlayerTypeQueryBuilder ExceptHeroesPerformance()
        {
            return ExceptField("heroesPerformance");
        }

        public PlayerTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, QueryBuilderParameter<PlayerMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PlayerTypeQueryBuilder WithMatchesGroupBy(MatchGroupByTypeQueryBuilder matchGroupByTypeQueryBuilder, QueryBuilderParameter<PlayerMatchesGroupByRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matchesGroupBy", alias, matchGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerTypeQueryBuilder ExceptMatchesGroupBy()
        {
            return ExceptField("matchesGroupBy");
        }

        public PlayerTypeQueryBuilder WithDotaPlus(HeroDotaPlusLeaderboardRankTypeQueryBuilder heroDotaPlusLeaderboardRankTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dotaPlus", alias, heroDotaPlusLeaderboardRankTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTypeQueryBuilder ExceptDotaPlus()
        {
            return ExceptField("dotaPlus");
        }

        public PlayerTypeQueryBuilder WithHeroStreaks(PlayerHeroPerformanceLongestStreakTypeQueryBuilder playerHeroPerformanceLongestStreakTypeQueryBuilder, QueryBuilderParameter<PlayerMatchesRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("heroStreaks", alias, playerHeroPerformanceLongestStreakTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerTypeQueryBuilder ExceptHeroStreaks()
        {
            return ExceptField("heroStreaks");
        }

        public PlayerTypeQueryBuilder WithFeats(FeatTypeQueryBuilder featTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("feats", alias, featTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PlayerTypeQueryBuilder ExceptFeats()
        {
            return ExceptField("feats");
        }
    }

    public partial class CaptainJackIdentityPublicProfileTypeQueryBuilder : GraphQlQueryBuilder<CaptainJackIdentityPublicProfileTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "captainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "twitter" },
                new GraphQlFieldMetadata { Name = "facebook" },
                new GraphQlFieldMetadata { Name = "twitch" },
                new GraphQlFieldMetadata { Name = "youTube" },
                new GraphQlFieldMetadata { Name = "isAdmin" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "CaptainJackIdentityPublicProfileType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithTwitter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitter", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptTwitter()
        {
            return ExceptField("twitter");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithFacebook(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facebook", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptFacebook()
        {
            return ExceptField("facebook");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithTwitch(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitch", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptTwitch()
        {
            return ExceptField("twitch");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithYouTube(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("youTube", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptYouTube()
        {
            return ExceptField("youTube");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithIsAdmin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAdmin", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptIsAdmin()
        {
            return ExceptField("isAdmin");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPublicProfileTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class SteamAccountSeasonRankTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonRankTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "seasonRankId" },
                new GraphQlFieldMetadata { Name = "asOfDateTime" },
                new GraphQlFieldMetadata { Name = "isCore" },
                new GraphQlFieldMetadata { Name = "rank" }
            };

        protected override string TypeName { get { return "SteamAccountSeasonRankType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonRankTypeQueryBuilder WithSeasonRankId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonRankId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonRankTypeQueryBuilder ExceptSeasonRankId()
        {
            return ExceptField("seasonRankId");
        }

        public SteamAccountSeasonRankTypeQueryBuilder WithAsOfDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("asOfDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonRankTypeQueryBuilder ExceptAsOfDateTime()
        {
            return ExceptField("asOfDateTime");
        }

        public SteamAccountSeasonRankTypeQueryBuilder WithIsCore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCore", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonRankTypeQueryBuilder ExceptIsCore()
        {
            return ExceptField("isCore");
        }

        public SteamAccountSeasonRankTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonRankTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }
    }

    public partial class SteamAccountSeasonLeaderBoardRankTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonLeaderBoardRankTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "seasonRankId" },
                new GraphQlFieldMetadata { Name = "asOfDateTime" },
                new GraphQlFieldMetadata { Name = "seasonLeaderBoardDivisionId" },
                new GraphQlFieldMetadata { Name = "rank" }
            };

        protected override string TypeName { get { return "SteamAccountSeasonLeaderBoardRankType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder WithSeasonRankId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonRankId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder ExceptSeasonRankId()
        {
            return ExceptField("seasonRankId");
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder WithAsOfDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("asOfDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder ExceptAsOfDateTime()
        {
            return ExceptField("asOfDateTime");
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder WithSeasonLeaderBoardDivisionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonLeaderBoardDivisionId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder ExceptSeasonLeaderBoardDivisionId()
        {
            return ExceptField("seasonLeaderBoardDivisionId");
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonLeaderBoardRankTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }
    }

    public partial class PlayerBadgeTypeQueryBuilder : GraphQlQueryBuilder<PlayerBadgeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "badgeId" },
                new GraphQlFieldMetadata { Name = "slot" },
                new GraphQlFieldMetadata { Name = "createdDateTime" }
            };

        protected override string TypeName { get { return "PlayerBadgeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBadgeTypeQueryBuilder WithBadgeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("badgeId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBadgeTypeQueryBuilder ExceptBadgeId()
        {
            return ExceptField("badgeId");
        }

        public PlayerBadgeTypeQueryBuilder WithSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slot", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBadgeTypeQueryBuilder ExceptSlot()
        {
            return ExceptField("slot");
        }

        public PlayerBadgeTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBadgeTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }
    }

    public partial class SteamAccountNameTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountNameTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "lastSeenDateTime" }
            };

        protected override string TypeName { get { return "SteamAccountNameType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountNameTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountNameTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SteamAccountNameTypeQueryBuilder WithLastSeenDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeenDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountNameTypeQueryBuilder ExceptLastSeenDateTime()
        {
            return ExceptField("lastSeenDateTime");
        }
    }

    public partial class PlayerCardHoverTypeQueryBuilder : GraphQlQueryBuilder<PlayerCardHoverTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lastUpdateDateTime" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "coreCount" },
                new GraphQlFieldMetadata { Name = "supportCount" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(PlayerCardHoverHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "activity" }
            };

        protected override string TypeName { get { return "PlayerCardHoverType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerCardHoverTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerCardHoverTypeQueryBuilder WithLastUpdateDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdateDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptLastUpdateDateTime()
        {
            return ExceptField("lastUpdateDateTime");
        }

        public PlayerCardHoverTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerCardHoverTypeQueryBuilder WithCoreCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coreCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptCoreCount()
        {
            return ExceptField("coreCount");
        }

        public PlayerCardHoverTypeQueryBuilder WithSupportCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptSupportCount()
        {
            return ExceptField("supportCount");
        }

        public PlayerCardHoverTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlayerCardHoverTypeQueryBuilder WithHeroes(PlayerCardHoverHeroTypeQueryBuilder playerCardHoverHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, playerCardHoverHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public PlayerCardHoverTypeQueryBuilder WithActivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activity", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }
    }

    public partial class PlayerCardHoverHeroTypeQueryBuilder : GraphQlQueryBuilder<PlayerCardHoverHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lossCount" }
            };

        protected override string TypeName { get { return "PlayerCardHoverHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerCardHoverHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerCardHoverHeroTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverHeroTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerCardHoverHeroTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCardHoverHeroTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }
    }

    public partial class PlayerPerformanceTypeQueryBuilder : GraphQlQueryBuilder<PlayerPerformanceTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId", IsComplex = true },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "streak" },
                new GraphQlFieldMetadata { Name = "maxStreak" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "rank" },
                new GraphQlFieldMetadata { Name = "mmrTier" },
                new GraphQlFieldMetadata { Name = "mmrBracket" },
                new GraphQlFieldMetadata { Name = "awardMatchCount" },
                new GraphQlFieldMetadata { Name = "mvpCount" },
                new GraphQlFieldMetadata { Name = "topCoreCount" },
                new GraphQlFieldMetadata { Name = "topSupportCount" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "killsAverage" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "deathsAverage" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "assistsAverage" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "csAverage" },
                new GraphQlFieldMetadata { Name = "gpm" },
                new GraphQlFieldMetadata { Name = "gpmAverage" },
                new GraphQlFieldMetadata { Name = "xpm" },
                new GraphQlFieldMetadata { Name = "xpmAverage" },
                new GraphQlFieldMetadata { Name = "composition", IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceCompositionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "position", IsComplex = true, QueryBuilderType = typeof(PlayerPerformancePositionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pickOrder", IsComplex = true }
            };

        protected override string TypeName { get { return "PlayerPerformanceType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPerformanceTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerPerformanceTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerPerformanceTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerPerformanceTypeQueryBuilder WithStreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streak", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptStreak()
        {
            return ExceptField("streak");
        }

        public PlayerPerformanceTypeQueryBuilder WithMaxStreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxStreak", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptMaxStreak()
        {
            return ExceptField("maxStreak");
        }

        public PlayerPerformanceTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlayerPerformanceTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public PlayerPerformanceTypeQueryBuilder WithMmrTier(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mmrTier", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptMmrTier()
        {
            return ExceptField("mmrTier");
        }

        public PlayerPerformanceTypeQueryBuilder WithMmrBracket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mmrBracket", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptMmrBracket()
        {
            return ExceptField("mmrBracket");
        }

        public PlayerPerformanceTypeQueryBuilder WithAwardMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("awardMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptAwardMatchCount()
        {
            return ExceptField("awardMatchCount");
        }

        public PlayerPerformanceTypeQueryBuilder WithMvpCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mvpCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptMvpCount()
        {
            return ExceptField("mvpCount");
        }

        public PlayerPerformanceTypeQueryBuilder WithTopCoreCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topCoreCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptTopCoreCount()
        {
            return ExceptField("topCoreCount");
        }

        public PlayerPerformanceTypeQueryBuilder WithTopSupportCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topSupportCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptTopSupportCount()
        {
            return ExceptField("topSupportCount");
        }

        public PlayerPerformanceTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public PlayerPerformanceTypeQueryBuilder WithKillsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptKillsAverage()
        {
            return ExceptField("killsAverage");
        }

        public PlayerPerformanceTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public PlayerPerformanceTypeQueryBuilder WithDeathsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptDeathsAverage()
        {
            return ExceptField("deathsAverage");
        }

        public PlayerPerformanceTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public PlayerPerformanceTypeQueryBuilder WithAssistsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptAssistsAverage()
        {
            return ExceptField("assistsAverage");
        }

        public PlayerPerformanceTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public PlayerPerformanceTypeQueryBuilder WithCsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("csAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptCsAverage()
        {
            return ExceptField("csAverage");
        }

        public PlayerPerformanceTypeQueryBuilder WithGpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gpm", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptGpm()
        {
            return ExceptField("gpm");
        }

        public PlayerPerformanceTypeQueryBuilder WithGpmAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gpmAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptGpmAverage()
        {
            return ExceptField("gpmAverage");
        }

        public PlayerPerformanceTypeQueryBuilder WithXpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpm", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptXpm()
        {
            return ExceptField("xpm");
        }

        public PlayerPerformanceTypeQueryBuilder WithXpmAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpmAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptXpmAverage()
        {
            return ExceptField("xpmAverage");
        }

        public PlayerPerformanceTypeQueryBuilder WithComposition(PlayerPerformanceCompositionTypeQueryBuilder playerPerformanceCompositionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("composition", alias, playerPerformanceCompositionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptComposition()
        {
            return ExceptField("composition");
        }

        public PlayerPerformanceTypeQueryBuilder WithPosition(PlayerPerformancePositionTypeQueryBuilder playerPerformancePositionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("position", alias, playerPerformancePositionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public PlayerPerformanceTypeQueryBuilder WithPickOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceTypeQueryBuilder ExceptPickOrder()
        {
            return ExceptField("pickOrder");
        }
    }

    public partial class PlayerPerformanceCompositionTypeQueryBuilder : GraphQlQueryBuilder<PlayerPerformanceCompositionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "allies", IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceCompositionHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "foes", IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceCompositionHeroTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPerformanceCompositionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPerformanceCompositionTypeQueryBuilder WithAllies(PlayerPerformanceCompositionHeroTypeQueryBuilder playerPerformanceCompositionHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("allies", alias, playerPerformanceCompositionHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceCompositionTypeQueryBuilder ExceptAllies()
        {
            return ExceptField("allies");
        }

        public PlayerPerformanceCompositionTypeQueryBuilder WithFoes(PlayerPerformanceCompositionHeroTypeQueryBuilder playerPerformanceCompositionHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("foes", alias, playerPerformanceCompositionHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceCompositionTypeQueryBuilder ExceptFoes()
        {
            return ExceptField("foes");
        }
    }

    public partial class PlayerPerformanceCompositionHeroTypeQueryBuilder : GraphQlQueryBuilder<PlayerPerformanceCompositionHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" }
            };

        protected override string TypeName { get { return "PlayerPerformanceCompositionHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPerformanceCompositionHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceCompositionHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerPerformanceCompositionHeroTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceCompositionHeroTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerPerformanceCompositionHeroTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformanceCompositionHeroTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }
    }

    public partial class PlayerPerformancePositionTypeQueryBuilder : GraphQlQueryBuilder<PlayerPerformancePositionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "roleType" },
                new GraphQlFieldMetadata { Name = "roleMatchCount" },
                new GraphQlFieldMetadata { Name = "roleWinCount" },
                new GraphQlFieldMetadata { Name = "lanes", IsComplex = true, QueryBuilderType = typeof(PlayerPerformancePositionObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPerformancePositionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPerformancePositionTypeQueryBuilder WithRoleType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleType", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionTypeQueryBuilder ExceptRoleType()
        {
            return ExceptField("roleType");
        }

        public PlayerPerformancePositionTypeQueryBuilder WithRoleMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionTypeQueryBuilder ExceptRoleMatchCount()
        {
            return ExceptField("roleMatchCount");
        }

        public PlayerPerformancePositionTypeQueryBuilder WithRoleWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionTypeQueryBuilder ExceptRoleWinCount()
        {
            return ExceptField("roleWinCount");
        }

        public PlayerPerformancePositionTypeQueryBuilder WithLanes(PlayerPerformancePositionObjectTypeQueryBuilder playerPerformancePositionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lanes", alias, playerPerformancePositionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionTypeQueryBuilder ExceptLanes()
        {
            return ExceptField("lanes");
        }
    }

    public partial class PlayerPerformancePositionObjectTypeQueryBuilder : GraphQlQueryBuilder<PlayerPerformancePositionObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "laneType" },
                new GraphQlFieldMetadata { Name = "laneMatchCount" },
                new GraphQlFieldMetadata { Name = "laneWinCount" }
            };

        protected override string TypeName { get { return "PlayerPerformancePositionObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPerformancePositionObjectTypeQueryBuilder WithLaneType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("laneType", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionObjectTypeQueryBuilder ExceptLaneType()
        {
            return ExceptField("laneType");
        }

        public PlayerPerformancePositionObjectTypeQueryBuilder WithLaneMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("laneMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionObjectTypeQueryBuilder ExceptLaneMatchCount()
        {
            return ExceptField("laneMatchCount");
        }

        public PlayerPerformancePositionObjectTypeQueryBuilder WithLaneWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("laneWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPerformancePositionObjectTypeQueryBuilder ExceptLaneWinCount()
        {
            return ExceptField("laneWinCount");
        }
    }

    public partial class PlayerHeroesPerformanceTypeQueryBuilder : GraphQlQueryBuilder<PlayerHeroesPerformanceTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "kDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "duration" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "best" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "experiencePerMinute" },
                new GraphQlFieldMetadata { Name = "positionScore", IsComplex = true, QueryBuilderType = typeof(PlayerHeroesPerformanceScoreTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lastPlayedDateTime" }
            };

        protected override string TypeName { get { return "PlayerHeroesPerformanceType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerHeroesPerformanceTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kDA", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptKda()
        {
            return ExceptField("kDA");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithBest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("best", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptBest()
        {
            return ExceptField("best");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithPositionScore(PlayerHeroesPerformanceScoreTypeQueryBuilder playerHeroesPerformanceScoreTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("positionScore", alias, playerHeroesPerformanceScoreTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptPositionScore()
        {
            return ExceptField("positionScore");
        }

        public PlayerHeroesPerformanceTypeQueryBuilder WithLastPlayedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastPlayedDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceTypeQueryBuilder ExceptLastPlayedDateTime()
        {
            return ExceptField("lastPlayedDateTime");
        }
    }

    public partial class HeroTypeQueryBuilder : GraphQlQueryBuilder<HeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "shortName" },
                new GraphQlFieldMetadata { Name = "aliases", IsComplex = true },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "abilities", IsComplex = true, QueryBuilderType = typeof(HeroAbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true, QueryBuilderType = typeof(HeroRoleTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(HeroLanguageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "talents", IsComplex = true, QueryBuilderType = typeof(HeroTalentTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(HeroStatTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public HeroTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public HeroTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public HeroTypeQueryBuilder WithShortName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shortName", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptShortName()
        {
            return ExceptField("shortName");
        }

        public HeroTypeQueryBuilder WithAliases(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("aliases", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptAliases()
        {
            return ExceptField("aliases");
        }

        public HeroTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public HeroTypeQueryBuilder WithAbilities(HeroAbilityTypeQueryBuilder heroAbilityTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("abilities", alias, heroAbilityTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptAbilities()
        {
            return ExceptField("abilities");
        }

        public HeroTypeQueryBuilder WithRoles(HeroRoleTypeQueryBuilder heroRoleTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roles", alias, heroRoleTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public HeroTypeQueryBuilder WithLanguage(HeroLanguageTypeQueryBuilder heroLanguageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, heroLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public HeroTypeQueryBuilder WithTalents(HeroTalentTypeQueryBuilder heroTalentTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("talents", alias, heroTalentTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptTalents()
        {
            return ExceptField("talents");
        }

        public HeroTypeQueryBuilder WithStats(HeroStatTypeQueryBuilder heroStatTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, heroStatTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }
    }

    public partial class HeroAbilityTypeQueryBuilder : GraphQlQueryBuilder<HeroAbilityTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "slot" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "ability", IsComplex = true, QueryBuilderType = typeof(AbilityTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroAbilityType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroAbilityTypeQueryBuilder WithSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slot", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTypeQueryBuilder ExceptSlot()
        {
            return ExceptField("slot");
        }

        public HeroAbilityTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public HeroAbilityTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public HeroAbilityTypeQueryBuilder WithAbility(AbilityTypeQueryBuilder abilityTypeQueryBuilder, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("ability", alias, abilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroAbilityTypeQueryBuilder ExceptAbility()
        {
            return ExceptField("ability");
        }
    }

    public partial class AbilityTypeQueryBuilder : GraphQlQueryBuilder<AbilityTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "uri" },
                new GraphQlFieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(AbilityLanguageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stat", IsComplex = true, QueryBuilderType = typeof(AbilityStatTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "attributes", IsComplex = true, QueryBuilderType = typeof(AbilityAttributeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isTalent" }
            };

        protected override string TypeName { get { return "AbilityType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AbilityTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AbilityTypeQueryBuilder WithUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uri", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptUri()
        {
            return ExceptField("uri");
        }

        public AbilityTypeQueryBuilder WithLanguage(AbilityLanguageTypeQueryBuilder abilityLanguageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, abilityLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public AbilityTypeQueryBuilder WithStat(AbilityStatTypeQueryBuilder abilityStatTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stat", alias, abilityStatTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptStat()
        {
            return ExceptField("stat");
        }

        public AbilityTypeQueryBuilder WithAttributes(AbilityAttributeTypeQueryBuilder abilityAttributeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("attributes", alias, abilityAttributeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }

        public AbilityTypeQueryBuilder WithIsTalent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTalent", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityTypeQueryBuilder ExceptIsTalent()
        {
            return ExceptField("isTalent");
        }
    }

    public partial class AbilityLanguageTypeQueryBuilder : GraphQlQueryBuilder<AbilityLanguageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "description", IsComplex = true },
                new GraphQlFieldMetadata { Name = "attributes", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lore" },
                new GraphQlFieldMetadata { Name = "aghanimDescription" },
                new GraphQlFieldMetadata { Name = "shardDescription" },
                new GraphQlFieldMetadata { Name = "notes", IsComplex = true }
            };

        protected override string TypeName { get { return "AbilityLanguageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityLanguageTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public AbilityLanguageTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public AbilityLanguageTypeQueryBuilder WithAttributes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attributes", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }

        public AbilityLanguageTypeQueryBuilder WithLore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lore", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptLore()
        {
            return ExceptField("lore");
        }

        public AbilityLanguageTypeQueryBuilder WithAghanimDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("aghanimDescription", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptAghanimDescription()
        {
            return ExceptField("aghanimDescription");
        }

        public AbilityLanguageTypeQueryBuilder WithShardDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shardDescription", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptShardDescription()
        {
            return ExceptField("shardDescription");
        }

        public AbilityLanguageTypeQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLanguageTypeQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }
    }

    public partial class AbilityStatTypeQueryBuilder : GraphQlQueryBuilder<AbilityStatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "behavior" },
                new GraphQlFieldMetadata { Name = "unitTargetType" },
                new GraphQlFieldMetadata { Name = "unitTargetTeam" },
                new GraphQlFieldMetadata { Name = "unitTargetFlags" },
                new GraphQlFieldMetadata { Name = "unitDamageType" },
                new GraphQlFieldMetadata { Name = "spellImmunity" },
                new GraphQlFieldMetadata { Name = "modifierSupportValue" },
                new GraphQlFieldMetadata { Name = "modifierSupportBonus" },
                new GraphQlFieldMetadata { Name = "isOnCastbar" },
                new GraphQlFieldMetadata { Name = "isOnLearnbar" },
                new GraphQlFieldMetadata { Name = "fightRecapLevel" },
                new GraphQlFieldMetadata { Name = "isGrantedByScepter" },
                new GraphQlFieldMetadata { Name = "hasScepterUpgrade" },
                new GraphQlFieldMetadata { Name = "maxLevel" },
                new GraphQlFieldMetadata { Name = "levelsBetweenUpgrades" },
                new GraphQlFieldMetadata { Name = "requiredLevel" },
                new GraphQlFieldMetadata { Name = "hotKeyOverride" },
                new GraphQlFieldMetadata { Name = "displayAdditionalHeroes" },
                new GraphQlFieldMetadata { Name = "castRange", IsComplex = true },
                new GraphQlFieldMetadata { Name = "castRangeBuffer", IsComplex = true },
                new GraphQlFieldMetadata { Name = "castPoint", IsComplex = true },
                new GraphQlFieldMetadata { Name = "channelTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "cooldown", IsComplex = true },
                new GraphQlFieldMetadata { Name = "damage", IsComplex = true },
                new GraphQlFieldMetadata { Name = "manaCost", IsComplex = true },
                new GraphQlFieldMetadata { Name = "isUltimate" },
                new GraphQlFieldMetadata { Name = "duration" },
                new GraphQlFieldMetadata { Name = "charges" },
                new GraphQlFieldMetadata { Name = "chargeRestoreTime" },
                new GraphQlFieldMetadata { Name = "hasShardUpgrade" },
                new GraphQlFieldMetadata { Name = "isGrantedByShard" },
                new GraphQlFieldMetadata { Name = "dispellable" },
                new GraphQlFieldMetadata { Name = "linkedAbilityId" }
            };

        protected override string TypeName { get { return "AbilityStatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityStatTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public AbilityStatTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public AbilityStatTypeQueryBuilder WithBehavior(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behavior", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptBehavior()
        {
            return ExceptField("behavior");
        }

        public AbilityStatTypeQueryBuilder WithUnitTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitTargetType", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptUnitTargetType()
        {
            return ExceptField("unitTargetType");
        }

        public AbilityStatTypeQueryBuilder WithUnitTargetTeam(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitTargetTeam", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptUnitTargetTeam()
        {
            return ExceptField("unitTargetTeam");
        }

        public AbilityStatTypeQueryBuilder WithUnitTargetFlags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitTargetFlags", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptUnitTargetFlags()
        {
            return ExceptField("unitTargetFlags");
        }

        public AbilityStatTypeQueryBuilder WithUnitDamageType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitDamageType", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptUnitDamageType()
        {
            return ExceptField("unitDamageType");
        }

        public AbilityStatTypeQueryBuilder WithSpellImmunity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("spellImmunity", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptSpellImmunity()
        {
            return ExceptField("spellImmunity");
        }

        public AbilityStatTypeQueryBuilder WithModifierSupportValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modifierSupportValue", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptModifierSupportValue()
        {
            return ExceptField("modifierSupportValue");
        }

        public AbilityStatTypeQueryBuilder WithModifierSupportBonus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modifierSupportBonus", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptModifierSupportBonus()
        {
            return ExceptField("modifierSupportBonus");
        }

        public AbilityStatTypeQueryBuilder WithIsOnCastbar(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isOnCastbar", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptIsOnCastbar()
        {
            return ExceptField("isOnCastbar");
        }

        public AbilityStatTypeQueryBuilder WithIsOnLearnbar(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isOnLearnbar", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptIsOnLearnbar()
        {
            return ExceptField("isOnLearnbar");
        }

        public AbilityStatTypeQueryBuilder WithFightRecapLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fightRecapLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptFightRecapLevel()
        {
            return ExceptField("fightRecapLevel");
        }

        public AbilityStatTypeQueryBuilder WithIsGrantedByScepter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGrantedByScepter", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptIsGrantedByScepter()
        {
            return ExceptField("isGrantedByScepter");
        }

        public AbilityStatTypeQueryBuilder WithHasScepterUpgrade(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasScepterUpgrade", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptHasScepterUpgrade()
        {
            return ExceptField("hasScepterUpgrade");
        }

        public AbilityStatTypeQueryBuilder WithMaxLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptMaxLevel()
        {
            return ExceptField("maxLevel");
        }

        public AbilityStatTypeQueryBuilder WithLevelsBetweenUpgrades(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("levelsBetweenUpgrades", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptLevelsBetweenUpgrades()
        {
            return ExceptField("levelsBetweenUpgrades");
        }

        public AbilityStatTypeQueryBuilder WithRequiredLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiredLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptRequiredLevel()
        {
            return ExceptField("requiredLevel");
        }

        public AbilityStatTypeQueryBuilder WithHotKeyOverride(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hotKeyOverride", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptHotKeyOverride()
        {
            return ExceptField("hotKeyOverride");
        }

        public AbilityStatTypeQueryBuilder WithDisplayAdditionalHeroes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayAdditionalHeroes", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptDisplayAdditionalHeroes()
        {
            return ExceptField("displayAdditionalHeroes");
        }

        public AbilityStatTypeQueryBuilder WithCastRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castRange", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptCastRange()
        {
            return ExceptField("castRange");
        }

        public AbilityStatTypeQueryBuilder WithCastRangeBuffer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castRangeBuffer", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptCastRangeBuffer()
        {
            return ExceptField("castRangeBuffer");
        }

        public AbilityStatTypeQueryBuilder WithCastPoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castPoint", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptCastPoint()
        {
            return ExceptField("castPoint");
        }

        public AbilityStatTypeQueryBuilder WithChannelTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channelTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptChannelTime()
        {
            return ExceptField("channelTime");
        }

        public AbilityStatTypeQueryBuilder WithCooldown(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cooldown", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptCooldown()
        {
            return ExceptField("cooldown");
        }

        public AbilityStatTypeQueryBuilder WithDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damage", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptDamage()
        {
            return ExceptField("damage");
        }

        public AbilityStatTypeQueryBuilder WithManaCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("manaCost", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptManaCost()
        {
            return ExceptField("manaCost");
        }

        public AbilityStatTypeQueryBuilder WithIsUltimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isUltimate", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptIsUltimate()
        {
            return ExceptField("isUltimate");
        }

        public AbilityStatTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }

        public AbilityStatTypeQueryBuilder WithCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("charges", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptCharges()
        {
            return ExceptField("charges");
        }

        public AbilityStatTypeQueryBuilder WithChargeRestoreTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chargeRestoreTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptChargeRestoreTime()
        {
            return ExceptField("chargeRestoreTime");
        }

        public AbilityStatTypeQueryBuilder WithHasShardUpgrade(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasShardUpgrade", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptHasShardUpgrade()
        {
            return ExceptField("hasShardUpgrade");
        }

        public AbilityStatTypeQueryBuilder WithIsGrantedByShard(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGrantedByShard", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptIsGrantedByShard()
        {
            return ExceptField("isGrantedByShard");
        }

        public AbilityStatTypeQueryBuilder WithDispellable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dispellable", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptDispellable()
        {
            return ExceptField("dispellable");
        }

        public AbilityStatTypeQueryBuilder WithLinkedAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("linkedAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityStatTypeQueryBuilder ExceptLinkedAbilityId()
        {
            return ExceptField("linkedAbilityId");
        }
    }

    public partial class AbilityAttributeTypeQueryBuilder : GraphQlQueryBuilder<AbilityAttributeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "linkedSpecialBonusAbilityId" },
                new GraphQlFieldMetadata { Name = "requiresScepter" }
            };

        protected override string TypeName { get { return "AbilityAttributeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityAttributeTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityAttributeTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AbilityAttributeTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityAttributeTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public AbilityAttributeTypeQueryBuilder WithLinkedSpecialBonusAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("linkedSpecialBonusAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityAttributeTypeQueryBuilder ExceptLinkedSpecialBonusAbilityId()
        {
            return ExceptField("linkedSpecialBonusAbilityId");
        }

        public AbilityAttributeTypeQueryBuilder WithRequiresScepter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("requiresScepter", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityAttributeTypeQueryBuilder ExceptRequiresScepter()
        {
            return ExceptField("requiresScepter");
        }
    }

    public partial class HeroRoleTypeQueryBuilder : GraphQlQueryBuilder<HeroRoleTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "roleId" },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "HeroRoleType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroRoleTypeQueryBuilder WithRoleId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroRoleTypeQueryBuilder ExceptRoleId()
        {
            return ExceptField("roleId");
        }

        public HeroRoleTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroRoleTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public partial class HeroLanguageTypeQueryBuilder : GraphQlQueryBuilder<HeroLanguageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "lore" },
                new GraphQlFieldMetadata { Name = "hype" }
            };

        protected override string TypeName { get { return "HeroLanguageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroLanguageTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLanguageTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public HeroLanguageTypeQueryBuilder WithLore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lore", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLanguageTypeQueryBuilder ExceptLore()
        {
            return ExceptField("lore");
        }

        public HeroLanguageTypeQueryBuilder WithHype(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hype", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLanguageTypeQueryBuilder ExceptHype()
        {
            return ExceptField("hype");
        }
    }

    public partial class HeroTalentTypeQueryBuilder : GraphQlQueryBuilder<HeroTalentTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "slot" }
            };

        protected override string TypeName { get { return "HeroTalentType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroTalentTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTalentTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public HeroTalentTypeQueryBuilder WithSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slot", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTalentTypeQueryBuilder ExceptSlot()
        {
            return ExceptField("slot");
        }
    }

    public partial class HeroStatTypeQueryBuilder : GraphQlQueryBuilder<HeroStatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "enabled" },
                new GraphQlFieldMetadata { Name = "heroUnlockOrder" },
                new GraphQlFieldMetadata { Name = "team" },
                new GraphQlFieldMetadata { Name = "cMEnabled" },
                new GraphQlFieldMetadata { Name = "newPlayerEnabled" },
                new GraphQlFieldMetadata { Name = "attackType" },
                new GraphQlFieldMetadata { Name = "startingArmor" },
                new GraphQlFieldMetadata { Name = "startingMagicArmor" },
                new GraphQlFieldMetadata { Name = "startingDamageMin" },
                new GraphQlFieldMetadata { Name = "startingDamageMax" },
                new GraphQlFieldMetadata { Name = "attackRate" },
                new GraphQlFieldMetadata { Name = "attackAnimationPoint" },
                new GraphQlFieldMetadata { Name = "attackAcquisitionRange" },
                new GraphQlFieldMetadata { Name = "attackRange" },
                new GraphQlFieldMetadata { Name = "primaryAttribute" },
                new GraphQlFieldMetadata { Name = "strengthBase" },
                new GraphQlFieldMetadata { Name = "strengthGain" },
                new GraphQlFieldMetadata { Name = "intelligenceBase" },
                new GraphQlFieldMetadata { Name = "intelligenceGain" },
                new GraphQlFieldMetadata { Name = "agilityBase" },
                new GraphQlFieldMetadata { Name = "agilityGain" },
                new GraphQlFieldMetadata { Name = "hpRegen" },
                new GraphQlFieldMetadata { Name = "mpRegen" },
                new GraphQlFieldMetadata { Name = "moveSpeed" },
                new GraphQlFieldMetadata { Name = "moveTurnRate" },
                new GraphQlFieldMetadata { Name = "hpBarOffset" },
                new GraphQlFieldMetadata { Name = "visionDaytimeRange" },
                new GraphQlFieldMetadata { Name = "visionNighttimeRange" },
                new GraphQlFieldMetadata { Name = "complexity" },
                new GraphQlFieldMetadata { Name = "primaryAttributeEnum" }
            };

        protected override string TypeName { get { return "HeroStatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroStatTypeQueryBuilder WithEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("enabled", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptEnabled()
        {
            return ExceptField("enabled");
        }

        public HeroStatTypeQueryBuilder WithHeroUnlockOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroUnlockOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptHeroUnlockOrder()
        {
            return ExceptField("heroUnlockOrder");
        }

        public HeroStatTypeQueryBuilder WithTeam(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("team", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public HeroStatTypeQueryBuilder WithCmEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cMEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptCmEnabled()
        {
            return ExceptField("cMEnabled");
        }

        public HeroStatTypeQueryBuilder WithNewPlayerEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("newPlayerEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptNewPlayerEnabled()
        {
            return ExceptField("newPlayerEnabled");
        }

        public HeroStatTypeQueryBuilder WithAttackType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackType", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAttackType()
        {
            return ExceptField("attackType");
        }

        public HeroStatTypeQueryBuilder WithStartingArmor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startingArmor", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptStartingArmor()
        {
            return ExceptField("startingArmor");
        }

        public HeroStatTypeQueryBuilder WithStartingMagicArmor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startingMagicArmor", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptStartingMagicArmor()
        {
            return ExceptField("startingMagicArmor");
        }

        public HeroStatTypeQueryBuilder WithStartingDamageMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startingDamageMin", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptStartingDamageMin()
        {
            return ExceptField("startingDamageMin");
        }

        public HeroStatTypeQueryBuilder WithStartingDamageMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startingDamageMax", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptStartingDamageMax()
        {
            return ExceptField("startingDamageMax");
        }

        public HeroStatTypeQueryBuilder WithAttackRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackRate", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAttackRate()
        {
            return ExceptField("attackRate");
        }

        public HeroStatTypeQueryBuilder WithAttackAnimationPoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackAnimationPoint", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAttackAnimationPoint()
        {
            return ExceptField("attackAnimationPoint");
        }

        public HeroStatTypeQueryBuilder WithAttackAcquisitionRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackAcquisitionRange", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAttackAcquisitionRange()
        {
            return ExceptField("attackAcquisitionRange");
        }

        public HeroStatTypeQueryBuilder WithAttackRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackRange", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAttackRange()
        {
            return ExceptField("attackRange");
        }

        public HeroStatTypeQueryBuilder WithPrimaryAttribute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("primaryAttribute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptPrimaryAttribute()
        {
            return ExceptField("primaryAttribute");
        }

        public HeroStatTypeQueryBuilder WithStrengthBase(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("strengthBase", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptStrengthBase()
        {
            return ExceptField("strengthBase");
        }

        public HeroStatTypeQueryBuilder WithStrengthGain(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("strengthGain", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptStrengthGain()
        {
            return ExceptField("strengthGain");
        }

        public HeroStatTypeQueryBuilder WithIntelligenceBase(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("intelligenceBase", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptIntelligenceBase()
        {
            return ExceptField("intelligenceBase");
        }

        public HeroStatTypeQueryBuilder WithIntelligenceGain(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("intelligenceGain", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptIntelligenceGain()
        {
            return ExceptField("intelligenceGain");
        }

        public HeroStatTypeQueryBuilder WithAgilityBase(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("agilityBase", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAgilityBase()
        {
            return ExceptField("agilityBase");
        }

        public HeroStatTypeQueryBuilder WithAgilityGain(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("agilityGain", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptAgilityGain()
        {
            return ExceptField("agilityGain");
        }

        public HeroStatTypeQueryBuilder WithHpRegen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hpRegen", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptHpRegen()
        {
            return ExceptField("hpRegen");
        }

        public HeroStatTypeQueryBuilder WithMpRegen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mpRegen", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptMpRegen()
        {
            return ExceptField("mpRegen");
        }

        public HeroStatTypeQueryBuilder WithMoveSpeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moveSpeed", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptMoveSpeed()
        {
            return ExceptField("moveSpeed");
        }

        public HeroStatTypeQueryBuilder WithMoveTurnRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moveTurnRate", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptMoveTurnRate()
        {
            return ExceptField("moveTurnRate");
        }

        public HeroStatTypeQueryBuilder WithHpBarOffset(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hpBarOffset", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptHpBarOffset()
        {
            return ExceptField("hpBarOffset");
        }

        public HeroStatTypeQueryBuilder WithVisionDaytimeRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visionDaytimeRange", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptVisionDaytimeRange()
        {
            return ExceptField("visionDaytimeRange");
        }

        public HeroStatTypeQueryBuilder WithVisionNighttimeRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visionNighttimeRange", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptVisionNighttimeRange()
        {
            return ExceptField("visionNighttimeRange");
        }

        public HeroStatTypeQueryBuilder WithComplexity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("complexity", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptComplexity()
        {
            return ExceptField("complexity");
        }

        public HeroStatTypeQueryBuilder WithPrimaryAttributeEnum(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("primaryAttributeEnum", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatTypeQueryBuilder ExceptPrimaryAttributeEnum()
        {
            return ExceptField("primaryAttributeEnum");
        }
    }

    public partial class PlayerHeroesPerformanceScoreTypeQueryBuilder : GraphQlQueryBuilder<PlayerHeroesPerformanceScoreTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "score" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "PlayerHeroesPerformanceScoreType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerHeroesPerformanceScoreTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroesPerformanceScoreTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }

    public partial class MatchGroupByTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public MatchGroupByTypeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "MatchGroupByType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByTypeQueryBuilder WithMatchGroupByHeroTypeFragment(MatchGroupByHeroTypeQueryBuilder matchGroupByHeroTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByFactionTypeFragment(MatchGroupByFactionTypeQueryBuilder matchGroupByFactionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByFactionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByKillsTypeFragment(MatchGroupByKillsTypeQueryBuilder matchGroupByKillsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByKillsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDeathsTypeFragment(MatchGroupByDeathsTypeQueryBuilder matchGroupByDeathsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDeathsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByAssistsTypeFragment(MatchGroupByAssistsTypeQueryBuilder matchGroupByAssistsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByAssistsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsLeaverTypeFragment(MatchGroupByIsLeaverTypeQueryBuilder matchGroupByIsLeaverTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsLeaverTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLevelTypeFragment(MatchGroupByLevelTypeQueryBuilder matchGroupByLevelTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLevelTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsPartyTypeFragment(MatchGroupByIsPartyTypeQueryBuilder matchGroupByIsPartyTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsPartyTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsRandomTypeFragment(MatchGroupByIsRandomTypeQueryBuilder matchGroupByIsRandomTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsRandomTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLaneTypeFragment(MatchGroupByLaneTypeQueryBuilder matchGroupByLaneTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLaneTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByRoleTypeFragment(MatchGroupByRoleTypeQueryBuilder matchGroupByRoleTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByRoleTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsIntentionalFeedingTypeFragment(MatchGroupByIsIntentionalFeedingTypeQueryBuilder matchGroupByIsIntentionalFeedingTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsIntentionalFeedingTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByAwardTypeFragment(MatchGroupByAwardTypeQueryBuilder matchGroupByAwardTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByAwardTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByRoamLaneTypeFragment(MatchGroupByRoamLaneTypeQueryBuilder matchGroupByRoamLaneTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByRoamLaneTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsVictoryTypeFragment(MatchGroupByIsVictoryTypeQueryBuilder matchGroupByIsVictoryTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsVictoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDurationMinutesTypeFragment(MatchGroupByDurationMinutesTypeQueryBuilder matchGroupByDurationMinutesTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDurationMinutesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByClusterTypeFragment(MatchGroupByClusterTypeQueryBuilder matchGroupByClusterTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByClusterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByRegionTypeFragment(MatchGroupByRegionTypeQueryBuilder matchGroupByRegionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByRegionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLobbyTypeTypeFragment(MatchGroupByLobbyTypeTypeQueryBuilder matchGroupByLobbyTypeTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLobbyTypeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsLeagueTypeFragment(MatchGroupByIsLeagueTypeQueryBuilder matchGroupByIsLeagueTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsLeagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsSeriesTypeFragment(MatchGroupByIsSeriesTypeQueryBuilder matchGroupByIsSeriesTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsSeriesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByGameModeTypeFragment(MatchGroupByGameModeTypeQueryBuilder matchGroupByGameModeTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByGameModeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByIsStatsTypeFragment(MatchGroupByIsStatsTypeQueryBuilder matchGroupByIsStatsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByIsStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByGameVersionTypeFragment(MatchGroupByGameVersionTypeQueryBuilder matchGroupByGameVersionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByGameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByTeamTypeFragment(MatchGroupByTeamTypeQueryBuilder matchGroupByTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByHeroPerformanceTypeFragment(MatchGroupByHeroPerformanceTypeQueryBuilder matchGroupByHeroPerformanceTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByHeroPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdTypeFragment(MatchGroupBySteamAccountIdTypeQueryBuilder matchGroupBySteamAccountIdTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdHeroIdTypeFragment(MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder matchGroupBySteamAccountIdHeroIdTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdHeroIdTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdWithTeamTypeFragment(MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder matchGroupBySteamAccountIdWithTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdWithTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdHeroIdWithTeamTypeFragment(MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder matchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdAgainstTeamTypeFragment(MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder matchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupBySteamAccountIdHeroIdAgainstTeamTypeFragment(MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder matchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByLeagueIdTypeFragment(MatchGroupByLeagueIdTypeQueryBuilder matchGroupByLeagueIdTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByLeagueIdTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByPositionTypeFragment(MatchGroupByPositionTypeQueryBuilder matchGroupByPositionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByPositionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDateDayTypeFragment(MatchGroupByDateDayTypeQueryBuilder matchGroupByDateDayTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDateDayTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByDateDayHeroTypeFragment(MatchGroupByDateDayHeroTypeQueryBuilder matchGroupByDateDayHeroTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByDateDayHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByTotalKillsTypeFragment(MatchGroupByTotalKillsTypeQueryBuilder matchGroupByTotalKillsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByTotalKillsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByGoldPerMinuteTypeFragment(MatchGroupByGoldPerMinuteTypeQueryBuilder matchGroupByGoldPerMinuteTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByGoldPerMinuteTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTypeQueryBuilder WithMatchGroupByHourTypeFragment(MatchGroupByHourTypeQueryBuilder matchGroupByHourTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(matchGroupByHourTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public partial class MatchGroupByHeroTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchGroupByHeroTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchGroupByHeroTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByHeroTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByHeroTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByHeroTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByHeroTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByFactionTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByFactionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByFactionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByFactionTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchGroupByFactionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByFactionTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByFactionTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByFactionTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByFactionTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByFactionTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByKillsTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByKillsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "killCount" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByKillsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByKillsTypeQueryBuilder WithKillCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptKillCount()
        {
            return ExceptField("killCount");
        }

        public MatchGroupByKillsTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByKillsTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByKillsTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByKillsTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByKillsTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByKillsTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByDeathsTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByDeathsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "deathCount" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByDeathsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByDeathsTypeQueryBuilder WithDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptDeathCount()
        {
            return ExceptField("deathCount");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByDeathsTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDeathsTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByAssistsTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByAssistsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "assistCount" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByAssistsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByAssistsTypeQueryBuilder WithAssistCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAssistCount()
        {
            return ExceptField("assistCount");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByAssistsTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAssistsTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsLeaverTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsLeaverTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isLeaver" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsLeaverType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsLeaverTypeQueryBuilder WithIsLeaver(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLeaver", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptIsLeaver()
        {
            return ExceptField("isLeaver");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsLeaverTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeaverTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByLevelTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByLevelTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByLevelType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByLevelTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchGroupByLevelTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByLevelTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByLevelTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByLevelTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByLevelTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLevelTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsPartyTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsPartyTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isParty" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsPartyType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsPartyTypeQueryBuilder WithIsParty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isParty", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptIsParty()
        {
            return ExceptField("isParty");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsPartyTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsPartyTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsRandomTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsRandomTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isRandom" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsRandomType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsRandomTypeQueryBuilder WithIsRandom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRandom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptIsRandom()
        {
            return ExceptField("isRandom");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsRandomTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsRandomTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByLaneTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByLaneTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "lane" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByLaneType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByLaneTypeQueryBuilder WithLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lane", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptLane()
        {
            return ExceptField("lane");
        }

        public MatchGroupByLaneTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByLaneTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByLaneTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByLaneTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByLaneTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLaneTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByRoleTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByRoleTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "role" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByRoleType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByRoleTypeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public MatchGroupByRoleTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByRoleTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByRoleTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByRoleTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByRoleTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoleTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsIntentionalFeedingTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsIntentionalFeedingTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isIntentionalFeeding" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsIntentionalFeedingType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithIsIntentionalFeeding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isIntentionalFeeding", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptIsIntentionalFeeding()
        {
            return ExceptField("isIntentionalFeeding");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsIntentionalFeedingTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByAwardTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByAwardTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "award" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByAwardType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByAwardTypeQueryBuilder WithAward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("award", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAward()
        {
            return ExceptField("award");
        }

        public MatchGroupByAwardTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByAwardTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByAwardTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByAwardTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByAwardTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByAwardTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByRoamLaneTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByRoamLaneTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "roamLane" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByRoamLaneType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByRoamLaneTypeQueryBuilder WithRoamLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roamLane", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptRoamLane()
        {
            return ExceptField("roamLane");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByRoamLaneTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRoamLaneTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsVictoryTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsVictoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isVictory" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsVictoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsVictoryTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsVictoryTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsVictoryTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByDurationMinutesTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByDurationMinutesTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "durationMinutes" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByDurationMinutesType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByDurationMinutesTypeQueryBuilder WithDurationMinutes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinutes", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptDurationMinutes()
        {
            return ExceptField("durationMinutes");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDurationMinutesTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByClusterTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByClusterTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cluster" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByClusterType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByClusterTypeQueryBuilder WithCluster(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cluster", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptCluster()
        {
            return ExceptField("cluster");
        }

        public MatchGroupByClusterTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByClusterTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByClusterTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByClusterTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByClusterTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByClusterTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByRegionTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByRegionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "region" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByRegionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByRegionTypeQueryBuilder WithRegion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("region", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptRegion()
        {
            return ExceptField("region");
        }

        public MatchGroupByRegionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByRegionTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByRegionTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByRegionTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByRegionTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByRegionTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByLobbyTypeTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByLobbyTypeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "lobbyType" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByLobbyTypeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByLobbyTypeTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLobbyTypeTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsLeagueTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsLeagueTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isLeague" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsLeagueType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsLeagueTypeQueryBuilder WithIsLeague(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLeague", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptIsLeague()
        {
            return ExceptField("isLeague");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsLeagueTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsLeagueTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsSeriesTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsSeriesTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isSeries" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsSeriesType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsSeriesTypeQueryBuilder WithIsSeries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSeries", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptIsSeries()
        {
            return ExceptField("isSeries");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsSeriesTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsSeriesTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByGameModeTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByGameModeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "gameMode" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByGameModeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByGameModeTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByGameModeTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameModeTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByIsStatsTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByIsStatsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isStats" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByIsStatsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByIsStatsTypeQueryBuilder WithIsStats(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStats", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptIsStats()
        {
            return ExceptField("isStats");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByIsStatsTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByIsStatsTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByGameVersionTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByGameVersionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "gameVersion" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByGameVersionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByGameVersionTypeQueryBuilder WithGameVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptGameVersion()
        {
            return ExceptField("gameVersion");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByGameVersionTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGameVersionTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByTeamTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public MatchGroupByTeamTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public MatchGroupByTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByTeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByTeamTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByTeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByTeamTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTeamTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByHeroPerformanceTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByHeroPerformanceTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByHeroPerformanceType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHeroPerformanceTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupBySteamAccountIdTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupBySteamAccountIdTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupBySteamAccountIdType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupBySteamAccountIdHeroIdType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupBySteamAccountIdWithTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdWithTeamTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupBySteamAccountIdHeroIdWithTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdWithTeamTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupBySteamAccountIdAgainstTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdAgainstTeamTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupBySteamAccountIdHeroIdAgainstTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupBySteamAccountIdHeroIdAgainstTeamTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByLeagueIdTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByLeagueIdTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByLeagueIdType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByLeagueIdTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByLeagueIdTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByLeagueIdTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByPositionTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByPositionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByPositionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByPositionTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public MatchGroupByPositionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByPositionTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByPositionTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByPositionTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByPositionTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByPositionTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByDateDayTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByDateDayTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "dateDay" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByDateDayType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByDateDayTypeQueryBuilder WithDateDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateDay", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptDateDay()
        {
            return ExceptField("dateDay");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByDateDayTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByDateDayHeroTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByDateDayHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "dateDay" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByDateDayHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByDateDayHeroTypeQueryBuilder WithDateDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateDay", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptDateDay()
        {
            return ExceptField("dateDay");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByDateDayHeroTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByTotalKillsTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByTotalKillsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "totalKills" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByTotalKillsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByTotalKillsTypeQueryBuilder WithTotalKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptTotalKills()
        {
            return ExceptField("totalKills");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByTotalKillsTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByTotalKillsTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByGoldPerMinuteTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByGoldPerMinuteTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByGoldPerMinuteType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByGoldPerMinuteTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class MatchGroupByHourTypeQueryBuilder : GraphQlQueryBuilder<MatchGroupByHourTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "hour" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "MatchGroupByHourType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchGroupByHourTypeQueryBuilder WithHour(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hour", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptHour()
        {
            return ExceptField("hour");
        }

        public MatchGroupByHourTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchGroupByHourTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public MatchGroupByHourTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public MatchGroupByHourTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public MatchGroupByHourTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchGroupByHourTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class HeroDotaPlusLeaderboardRankTypeQueryBuilder : GraphQlQueryBuilder<HeroDotaPlusLeaderboardRankTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "totalActions" },
                new GraphQlFieldMetadata { Name = "createdDateTime" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroDotaPlusLeaderboardRankType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder WithTotalActions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalActions", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder ExceptTotalActions()
        {
            return ExceptField("totalActions");
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class PlayerHeroPerformanceLongestStreakTypeQueryBuilder : GraphQlQueryBuilder<PlayerHeroPerformanceLongestStreakTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "longestStreak" },
                new GraphQlFieldMetadata { Name = "currentStreak" }
            };

        protected override string TypeName { get { return "PlayerHeroPerformanceLongestStreakType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerHeroPerformanceLongestStreakTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroPerformanceLongestStreakTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerHeroPerformanceLongestStreakTypeQueryBuilder WithLongestStreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longestStreak", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroPerformanceLongestStreakTypeQueryBuilder ExceptLongestStreak()
        {
            return ExceptField("longestStreak");
        }

        public PlayerHeroPerformanceLongestStreakTypeQueryBuilder WithCurrentStreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentStreak", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroPerformanceLongestStreakTypeQueryBuilder ExceptCurrentStreak()
        {
            return ExceptField("currentStreak");
        }
    }

    public partial class FeatTypeQueryBuilder : GraphQlQueryBuilder<FeatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "FeatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FeatTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FeatTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FeatTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public FeatTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public FeatTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeatTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public FeatTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeatTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public FeatTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeatTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public FeatTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeatTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }
    }

    public partial class MatchPickBanGroupByTypeQueryBuilder : GraphQlQueryBuilder<MatchPickBanGroupByTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "pickCount" },
                new GraphQlFieldMetadata { Name = "banCount" }
            };

        protected override string TypeName { get { return "MatchPickBanGroupByType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPickBanGroupByTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchPickBanGroupByTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchPickBanGroupByTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }

        public MatchPickBanGroupByTypeQueryBuilder WithBanCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPickBanGroupByTypeQueryBuilder ExceptBanCount()
        {
            return ExceptField("banCount");
        }
    }

    public partial class LeagueStreamTypeQueryBuilder : GraphQlQueryBuilder<LeagueStreamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "languageId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "broadcastProvider" },
                new GraphQlFieldMetadata { Name = "streamUrl" },
                new GraphQlFieldMetadata { Name = "vodUrl" }
            };

        protected override string TypeName { get { return "LeagueStreamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueStreamTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStreamTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueStreamTypeQueryBuilder WithLanguageId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStreamTypeQueryBuilder ExceptLanguageId()
        {
            return ExceptField("languageId");
        }

        public LeagueStreamTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStreamTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LeagueStreamTypeQueryBuilder WithBroadcastProvider(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("broadcastProvider", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStreamTypeQueryBuilder ExceptBroadcastProvider()
        {
            return ExceptField("broadcastProvider");
        }

        public LeagueStreamTypeQueryBuilder WithStreamUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streamUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStreamTypeQueryBuilder ExceptStreamUrl()
        {
            return ExceptField("streamUrl");
        }

        public LeagueStreamTypeQueryBuilder WithVodUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("vodUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStreamTypeQueryBuilder ExceptVodUrl()
        {
            return ExceptField("vodUrl");
        }
    }

    public partial class MatchLiveTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "radiantScore" },
                new GraphQlFieldMetadata { Name = "direScore" },
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "delay" },
                new GraphQlFieldMetadata { Name = "spectators" },
                new GraphQlFieldMetadata { Name = "averageRank" },
                new GraphQlFieldMetadata { Name = "buildingState" },
                new GraphQlFieldMetadata { Name = "radiantLead" },
                new GraphQlFieldMetadata { Name = "lobbyId" },
                new GraphQlFieldMetadata { Name = "lobbyType" },
                new GraphQlFieldMetadata { Name = "serverSteamId" },
                new GraphQlFieldMetadata { Name = "gameTime" },
                new GraphQlFieldMetadata { Name = "completed" },
                new GraphQlFieldMetadata { Name = "isUpdating" },
                new GraphQlFieldMetadata { Name = "isParsing" },
                new GraphQlFieldMetadata { Name = "radiantTeamId" },
                new GraphQlFieldMetadata { Name = "direTeamId" },
                new GraphQlFieldMetadata { Name = "radiantTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "direTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "parseBeginGameTime" },
                new GraphQlFieldMetadata { Name = "numHumanPlayers" },
                new GraphQlFieldMetadata { Name = "gameMode" },
                new GraphQlFieldMetadata { Name = "playbackData", IsComplex = true, QueryBuilderType = typeof(MatchLivePlaybackDataTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameState" },
                new GraphQlFieldMetadata { Name = "gameMinute" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdDateTime" },
                new GraphQlFieldMetadata { Name = "modifiedDateTime" },
                new GraphQlFieldMetadata { Name = "insight", IsComplex = true, QueryBuilderType = typeof(MatchLiveInsightTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winRateValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "durationValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "liveWinRateValues", IsComplex = true, QueryBuilderType = typeof(MatchLiveWinRateDetailTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchLiveType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchLiveTypeQueryBuilder WithRadiantScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantScore", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptRadiantScore()
        {
            return ExceptField("radiantScore");
        }

        public MatchLiveTypeQueryBuilder WithDireScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direScore", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptDireScore()
        {
            return ExceptField("direScore");
        }

        public MatchLiveTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public MatchLiveTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public MatchLiveTypeQueryBuilder WithDelay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("delay", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptDelay()
        {
            return ExceptField("delay");
        }

        public MatchLiveTypeQueryBuilder WithSpectators(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("spectators", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptSpectators()
        {
            return ExceptField("spectators");
        }

        public MatchLiveTypeQueryBuilder WithAverageRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageRank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptAverageRank()
        {
            return ExceptField("averageRank");
        }

        public MatchLiveTypeQueryBuilder WithBuildingState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buildingState", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptBuildingState()
        {
            return ExceptField("buildingState");
        }

        public MatchLiveTypeQueryBuilder WithRadiantLead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantLead", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptRadiantLead()
        {
            return ExceptField("radiantLead");
        }

        public MatchLiveTypeQueryBuilder WithLobbyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptLobbyId()
        {
            return ExceptField("lobbyId");
        }

        public MatchLiveTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public MatchLiveTypeQueryBuilder WithServerSteamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("serverSteamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptServerSteamId()
        {
            return ExceptField("serverSteamId");
        }

        public MatchLiveTypeQueryBuilder WithGameTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptGameTime()
        {
            return ExceptField("gameTime");
        }

        public MatchLiveTypeQueryBuilder WithCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("completed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptCompleted()
        {
            return ExceptField("completed");
        }

        public MatchLiveTypeQueryBuilder WithIsUpdating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isUpdating", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptIsUpdating()
        {
            return ExceptField("isUpdating");
        }

        public MatchLiveTypeQueryBuilder WithIsParsing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isParsing", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptIsParsing()
        {
            return ExceptField("isParsing");
        }

        public MatchLiveTypeQueryBuilder WithRadiantTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptRadiantTeamId()
        {
            return ExceptField("radiantTeamId");
        }

        public MatchLiveTypeQueryBuilder WithDireTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptDireTeamId()
        {
            return ExceptField("direTeamId");
        }

        public MatchLiveTypeQueryBuilder WithRadiantTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptRadiantTeam()
        {
            return ExceptField("radiantTeam");
        }

        public MatchLiveTypeQueryBuilder WithDireTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptDireTeam()
        {
            return ExceptField("direTeam");
        }

        public MatchLiveTypeQueryBuilder WithParseBeginGameTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("parseBeginGameTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptParseBeginGameTime()
        {
            return ExceptField("parseBeginGameTime");
        }

        public MatchLiveTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public MatchLiveTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public MatchLiveTypeQueryBuilder WithPlaybackData(MatchLivePlaybackDataTypeQueryBuilder matchLivePlaybackDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playbackData", alias, matchLivePlaybackDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptPlaybackData()
        {
            return ExceptField("playbackData");
        }

        public MatchLiveTypeQueryBuilder WithGameState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameState", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptGameState()
        {
            return ExceptField("gameState");
        }

        public MatchLiveTypeQueryBuilder WithGameMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptGameMinute()
        {
            return ExceptField("gameMinute");
        }

        public MatchLiveTypeQueryBuilder WithPlayers(MatchLivePlayerTypeQueryBuilder matchLivePlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, matchLivePlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public MatchLiveTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }

        public MatchLiveTypeQueryBuilder WithModifiedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modifiedDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptModifiedDateTime()
        {
            return ExceptField("modifiedDateTime");
        }

        public MatchLiveTypeQueryBuilder WithInsight(MatchLiveInsightTypeQueryBuilder matchLiveInsightTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("insight", alias, matchLiveInsightTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptInsight()
        {
            return ExceptField("insight");
        }

        public MatchLiveTypeQueryBuilder WithWinRateValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptWinRateValues()
        {
            return ExceptField("winRateValues");
        }

        public MatchLiveTypeQueryBuilder WithDurationValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptDurationValues()
        {
            return ExceptField("durationValues");
        }

        public MatchLiveTypeQueryBuilder WithLiveWinRateValues(MatchLiveWinRateDetailTypeQueryBuilder matchLiveWinRateDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("liveWinRateValues", alias, matchLiveWinRateDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTypeQueryBuilder ExceptLiveWinRateValues()
        {
            return ExceptField("liveWinRateValues");
        }
    }

    public partial class MatchLivePlaybackDataTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlaybackDataTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "roshanEvents", IsComplex = true, QueryBuilderType = typeof(MatchLiveRoshanDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buildingEvents", IsComplex = true, QueryBuilderType = typeof(MatchLiveBuildingDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pickBans", IsComplex = true, QueryBuilderType = typeof(MatchLivePickBanTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "radiantScore", IsComplex = true, QueryBuilderType = typeof(MatchLiveTeamScoreDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "direScore", IsComplex = true, QueryBuilderType = typeof(MatchLiveTeamScoreDetailTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchLivePlaybackDataType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlaybackDataTypeQueryBuilder WithRoshanEvents(MatchLiveRoshanDetailTypeQueryBuilder matchLiveRoshanDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roshanEvents", alias, matchLiveRoshanDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlaybackDataTypeQueryBuilder ExceptRoshanEvents()
        {
            return ExceptField("roshanEvents");
        }

        public MatchLivePlaybackDataTypeQueryBuilder WithBuildingEvents(MatchLiveBuildingDetailTypeQueryBuilder matchLiveBuildingDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buildingEvents", alias, matchLiveBuildingDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlaybackDataTypeQueryBuilder ExceptBuildingEvents()
        {
            return ExceptField("buildingEvents");
        }

        public MatchLivePlaybackDataTypeQueryBuilder WithPickBans(MatchLivePickBanTypeQueryBuilder matchLivePickBanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pickBans", alias, matchLivePickBanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlaybackDataTypeQueryBuilder ExceptPickBans()
        {
            return ExceptField("pickBans");
        }

        public MatchLivePlaybackDataTypeQueryBuilder WithRadiantScore(MatchLiveTeamScoreDetailTypeQueryBuilder matchLiveTeamScoreDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantScore", alias, matchLiveTeamScoreDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlaybackDataTypeQueryBuilder ExceptRadiantScore()
        {
            return ExceptField("radiantScore");
        }

        public MatchLivePlaybackDataTypeQueryBuilder WithDireScore(MatchLiveTeamScoreDetailTypeQueryBuilder matchLiveTeamScoreDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direScore", alias, matchLiveTeamScoreDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlaybackDataTypeQueryBuilder ExceptDireScore()
        {
            return ExceptField("direScore");
        }
    }

    public partial class MatchLiveRoshanDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveRoshanDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "isAlive" },
                new GraphQlFieldMetadata { Name = "respawnTimer" }
            };

        protected override string TypeName { get { return "MatchLiveRoshanDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveRoshanDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveRoshanDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLiveRoshanDetailTypeQueryBuilder WithIsAlive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAlive", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveRoshanDetailTypeQueryBuilder ExceptIsAlive()
        {
            return ExceptField("isAlive");
        }

        public MatchLiveRoshanDetailTypeQueryBuilder WithRespawnTimer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("respawnTimer", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveRoshanDetailTypeQueryBuilder ExceptRespawnTimer()
        {
            return ExceptField("respawnTimer");
        }
    }

    public partial class MatchLiveBuildingDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveBuildingDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "indexId" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "isAlive" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "npcId" }
            };

        protected override string TypeName { get { return "MatchLiveBuildingDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveBuildingDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithIndexId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("indexId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptIndexId()
        {
            return ExceptField("indexId");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithIsAlive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAlive", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptIsAlive()
        {
            return ExceptField("isAlive");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchLiveBuildingDetailTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveBuildingDetailTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }
    }

    public partial class MatchLivePickBanTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePickBanTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isPick" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "bannedHeroId" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "baseWinRate" },
                new GraphQlFieldMetadata { Name = "adjustedWinRate" },
                new GraphQlFieldMetadata { Name = "letter" },
                new GraphQlFieldMetadata { Name = "positionValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "winRateValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "durationValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "position" }
            };

        protected override string TypeName { get { return "MatchLivePickBanType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePickBanTypeQueryBuilder WithIsPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptIsPick()
        {
            return ExceptField("isPick");
        }

        public MatchLivePickBanTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchLivePickBanTypeQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public MatchLivePickBanTypeQueryBuilder WithBannedHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannedHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptBannedHeroId()
        {
            return ExceptField("bannedHeroId");
        }

        public MatchLivePickBanTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchLivePickBanTypeQueryBuilder WithBaseWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptBaseWinRate()
        {
            return ExceptField("baseWinRate");
        }

        public MatchLivePickBanTypeQueryBuilder WithAdjustedWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("adjustedWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptAdjustedWinRate()
        {
            return ExceptField("adjustedWinRate");
        }

        public MatchLivePickBanTypeQueryBuilder WithLetter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("letter", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptLetter()
        {
            return ExceptField("letter");
        }

        public MatchLivePickBanTypeQueryBuilder WithPositionValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptPositionValues()
        {
            return ExceptField("positionValues");
        }

        public MatchLivePickBanTypeQueryBuilder WithWinRateValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptWinRateValues()
        {
            return ExceptField("winRateValues");
        }

        public MatchLivePickBanTypeQueryBuilder WithDurationValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptDurationValues()
        {
            return ExceptField("durationValues");
        }

        public MatchLivePickBanTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePickBanTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }
    }

    public partial class MatchLiveTeamScoreDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveTeamScoreDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "score" }
            };

        protected override string TypeName { get { return "MatchLiveTeamScoreDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveTeamScoreDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTeamScoreDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLiveTeamScoreDetailTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveTeamScoreDetailTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }
    }

    public partial class MatchLivePlayerTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "playerSlot" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "numKills" },
                new GraphQlFieldMetadata { Name = "numDeaths" },
                new GraphQlFieldMetadata { Name = "numAssists" },
                new GraphQlFieldMetadata { Name = "leaverStatus" },
                new GraphQlFieldMetadata { Name = "numLastHits" },
                new GraphQlFieldMetadata { Name = "numDenies" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "experiencePerMinute" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "goldSpent" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "itemId0" },
                new GraphQlFieldMetadata { Name = "itemId1" },
                new GraphQlFieldMetadata { Name = "itemId2" },
                new GraphQlFieldMetadata { Name = "itemId3" },
                new GraphQlFieldMetadata { Name = "itemId4" },
                new GraphQlFieldMetadata { Name = "itemId5" },
                new GraphQlFieldMetadata { Name = "backpackId0" },
                new GraphQlFieldMetadata { Name = "backpackId1" },
                new GraphQlFieldMetadata { Name = "backpackId2" },
                new GraphQlFieldMetadata { Name = "playbackData", IsComplex = true, QueryBuilderType = typeof(MatchPlayerLivePlaybackDataTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "respawnTimer" },
                new GraphQlFieldMetadata { Name = "ultimateCooldown" },
                new GraphQlFieldMetadata { Name = "ultimateState" },
                new GraphQlFieldMetadata { Name = "impPerMinute", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerImpDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "baseWinRateValue" },
                new GraphQlFieldMetadata { Name = "position" }
            };

        protected override string TypeName { get { return "MatchLivePlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchLivePlayerTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchLivePlayerTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchLivePlayerTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public MatchLivePlayerTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public MatchLivePlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchLivePlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchLivePlayerTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchLivePlayerTypeQueryBuilder WithNumKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptNumKills()
        {
            return ExceptField("numKills");
        }

        public MatchLivePlayerTypeQueryBuilder WithNumDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptNumDeaths()
        {
            return ExceptField("numDeaths");
        }

        public MatchLivePlayerTypeQueryBuilder WithNumAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptNumAssists()
        {
            return ExceptField("numAssists");
        }

        public MatchLivePlayerTypeQueryBuilder WithLeaverStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaverStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptLeaverStatus()
        {
            return ExceptField("leaverStatus");
        }

        public MatchLivePlayerTypeQueryBuilder WithNumLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptNumLastHits()
        {
            return ExceptField("numLastHits");
        }

        public MatchLivePlayerTypeQueryBuilder WithNumDenies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDenies", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptNumDenies()
        {
            return ExceptField("numDenies");
        }

        public MatchLivePlayerTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchLivePlayerTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public MatchLivePlayerTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchLivePlayerTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchLivePlayerTypeQueryBuilder WithGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptGoldSpent()
        {
            return ExceptField("goldSpent");
        }

        public MatchLivePlayerTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public MatchLivePlayerTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public MatchLivePlayerTypeQueryBuilder WithItemId0(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId0", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptItemId0()
        {
            return ExceptField("itemId0");
        }

        public MatchLivePlayerTypeQueryBuilder WithItemId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId1", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptItemId1()
        {
            return ExceptField("itemId1");
        }

        public MatchLivePlayerTypeQueryBuilder WithItemId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId2", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptItemId2()
        {
            return ExceptField("itemId2");
        }

        public MatchLivePlayerTypeQueryBuilder WithItemId3(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId3", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptItemId3()
        {
            return ExceptField("itemId3");
        }

        public MatchLivePlayerTypeQueryBuilder WithItemId4(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId4", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptItemId4()
        {
            return ExceptField("itemId4");
        }

        public MatchLivePlayerTypeQueryBuilder WithItemId5(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId5", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptItemId5()
        {
            return ExceptField("itemId5");
        }

        public MatchLivePlayerTypeQueryBuilder WithBackpackId0(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpackId0", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptBackpackId0()
        {
            return ExceptField("backpackId0");
        }

        public MatchLivePlayerTypeQueryBuilder WithBackpackId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpackId1", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptBackpackId1()
        {
            return ExceptField("backpackId1");
        }

        public MatchLivePlayerTypeQueryBuilder WithBackpackId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpackId2", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptBackpackId2()
        {
            return ExceptField("backpackId2");
        }

        public MatchLivePlayerTypeQueryBuilder WithPlaybackData(MatchPlayerLivePlaybackDataTypeQueryBuilder matchPlayerLivePlaybackDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playbackData", alias, matchPlayerLivePlaybackDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptPlaybackData()
        {
            return ExceptField("playbackData");
        }

        public MatchLivePlayerTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public MatchLivePlayerTypeQueryBuilder WithRespawnTimer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("respawnTimer", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptRespawnTimer()
        {
            return ExceptField("respawnTimer");
        }

        public MatchLivePlayerTypeQueryBuilder WithUltimateCooldown(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ultimateCooldown", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptUltimateCooldown()
        {
            return ExceptField("ultimateCooldown");
        }

        public MatchLivePlayerTypeQueryBuilder WithUltimateState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ultimateState", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptUltimateState()
        {
            return ExceptField("ultimateState");
        }

        public MatchLivePlayerTypeQueryBuilder WithImpPerMinute(MatchLivePlayerImpDetailTypeQueryBuilder matchLivePlayerImpDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("impPerMinute", alias, matchLivePlayerImpDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptImpPerMinute()
        {
            return ExceptField("impPerMinute");
        }

        public MatchLivePlayerTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchLivePlayerTypeQueryBuilder WithBaseWinRateValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseWinRateValue", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptBaseWinRateValue()
        {
            return ExceptField("baseWinRateValue");
        }

        public MatchLivePlayerTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }
    }

    public partial class MatchPlayerLivePlaybackDataTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerLivePlaybackDataTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "positionEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerPositionDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "goldEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerGoldDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "levelEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerLevelDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "killEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerKillDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deathEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerDeathDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "assistEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerAssistDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "csEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerLastHitDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "denyEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerDenyDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "experienceEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerExperienceDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "inventoryEvents", IsComplex = true, QueryBuilderType = typeof(MatchLivePlayerInventoryDetailTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerLivePlaybackDataType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithPositionEvents(MatchLivePlayerPositionDetailTypeQueryBuilder matchLivePlayerPositionDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("positionEvents", alias, matchLivePlayerPositionDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptPositionEvents()
        {
            return ExceptField("positionEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithGoldEvents(MatchLivePlayerGoldDetailTypeQueryBuilder matchLivePlayerGoldDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("goldEvents", alias, matchLivePlayerGoldDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptGoldEvents()
        {
            return ExceptField("goldEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithLevelEvents(MatchLivePlayerLevelDetailTypeQueryBuilder matchLivePlayerLevelDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("levelEvents", alias, matchLivePlayerLevelDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptLevelEvents()
        {
            return ExceptField("levelEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithKillEvents(MatchLivePlayerKillDetailTypeQueryBuilder matchLivePlayerKillDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("killEvents", alias, matchLivePlayerKillDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptKillEvents()
        {
            return ExceptField("killEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithDeathEvents(MatchLivePlayerDeathDetailTypeQueryBuilder matchLivePlayerDeathDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deathEvents", alias, matchLivePlayerDeathDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptDeathEvents()
        {
            return ExceptField("deathEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithAssistEvents(MatchLivePlayerAssistDetailTypeQueryBuilder matchLivePlayerAssistDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("assistEvents", alias, matchLivePlayerAssistDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptAssistEvents()
        {
            return ExceptField("assistEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithCsEvents(MatchLivePlayerLastHitDetailTypeQueryBuilder matchLivePlayerLastHitDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("csEvents", alias, matchLivePlayerLastHitDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptCsEvents()
        {
            return ExceptField("csEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithDenyEvents(MatchLivePlayerDenyDetailTypeQueryBuilder matchLivePlayerDenyDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("denyEvents", alias, matchLivePlayerDenyDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptDenyEvents()
        {
            return ExceptField("denyEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithExperienceEvents(MatchLivePlayerExperienceDetailTypeQueryBuilder matchLivePlayerExperienceDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("experienceEvents", alias, matchLivePlayerExperienceDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptExperienceEvents()
        {
            return ExceptField("experienceEvents");
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder WithInventoryEvents(MatchLivePlayerInventoryDetailTypeQueryBuilder matchLivePlayerInventoryDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("inventoryEvents", alias, matchLivePlayerInventoryDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerLivePlaybackDataTypeQueryBuilder ExceptInventoryEvents()
        {
            return ExceptField("inventoryEvents");
        }
    }

    public partial class MatchLivePlayerPositionDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerPositionDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "x" },
                new GraphQlFieldMetadata { Name = "y" }
            };

        protected override string TypeName { get { return "MatchLivePlayerPositionDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerPositionDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerPositionDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerPositionDetailTypeQueryBuilder WithX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("x", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerPositionDetailTypeQueryBuilder ExceptX()
        {
            return ExceptField("x");
        }

        public MatchLivePlayerPositionDetailTypeQueryBuilder WithY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("y", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerPositionDetailTypeQueryBuilder ExceptY()
        {
            return ExceptField("y");
        }
    }

    public partial class MatchLivePlayerGoldDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerGoldDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "networthDifference" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" }
            };

        protected override string TypeName { get { return "MatchLivePlayerGoldDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerGoldDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder WithNetworthDifference(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networthDifference", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder ExceptNetworthDifference()
        {
            return ExceptField("networthDifference");
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerGoldDetailTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }
    }

    public partial class MatchLivePlayerLevelDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerLevelDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "MatchLivePlayerLevelDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerLevelDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerLevelDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerLevelDetailTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerLevelDetailTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public partial class MatchLivePlayerKillDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerKillDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchLivePlayerKillDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerKillDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerKillDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerKillDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerKillDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchLivePlayerKillDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerKillDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchLivePlayerDeathDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerDeathDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchLivePlayerDeathDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerDeathDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerDeathDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerDeathDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerDeathDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchLivePlayerDeathDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerDeathDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchLivePlayerAssistDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerAssistDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchLivePlayerAssistDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerAssistDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerAssistDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerAssistDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerAssistDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchLivePlayerAssistDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerAssistDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchLivePlayerLastHitDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerLastHitDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchLivePlayerLastHitDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerLastHitDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerLastHitDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerLastHitDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerLastHitDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchLivePlayerLastHitDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerLastHitDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchLivePlayerDenyDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerDenyDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchLivePlayerDenyDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerDenyDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerDenyDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerDenyDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerDenyDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchLivePlayerDenyDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerDenyDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchLivePlayerExperienceDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerExperienceDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "expPerMinute" }
            };

        protected override string TypeName { get { return "MatchLivePlayerExperienceDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerExperienceDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerExperienceDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerExperienceDetailTypeQueryBuilder WithExpPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerExperienceDetailTypeQueryBuilder ExceptExpPerMinute()
        {
            return ExceptField("expPerMinute");
        }
    }

    public partial class MatchLivePlayerInventoryDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerInventoryDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "itemId0" },
                new GraphQlFieldMetadata { Name = "itemId1" },
                new GraphQlFieldMetadata { Name = "itemId2" },
                new GraphQlFieldMetadata { Name = "itemId3" },
                new GraphQlFieldMetadata { Name = "itemId4" },
                new GraphQlFieldMetadata { Name = "itemId5" },
                new GraphQlFieldMetadata { Name = "backpackId0" },
                new GraphQlFieldMetadata { Name = "backpackId1" },
                new GraphQlFieldMetadata { Name = "backpackId2" }
            };

        protected override string TypeName { get { return "MatchLivePlayerInventoryDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithItemId0(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId0", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptItemId0()
        {
            return ExceptField("itemId0");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithItemId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId1", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptItemId1()
        {
            return ExceptField("itemId1");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithItemId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId2", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptItemId2()
        {
            return ExceptField("itemId2");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithItemId3(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId3", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptItemId3()
        {
            return ExceptField("itemId3");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithItemId4(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId4", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptItemId4()
        {
            return ExceptField("itemId4");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithItemId5(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId5", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptItemId5()
        {
            return ExceptField("itemId5");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithBackpackId0(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpackId0", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptBackpackId0()
        {
            return ExceptField("backpackId0");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithBackpackId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpackId1", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptBackpackId1()
        {
            return ExceptField("backpackId1");
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder WithBackpackId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpackId2", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerInventoryDetailTypeQueryBuilder ExceptBackpackId2()
        {
            return ExceptField("backpackId2");
        }
    }

    public partial class MatchLivePlayerImpDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLivePlayerImpDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "MatchLivePlayerImpDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLivePlayerImpDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerImpDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLivePlayerImpDetailTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLivePlayerImpDetailTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }

    public partial class MatchLiveInsightTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveInsightTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "teamOneVsWinCount" },
                new GraphQlFieldMetadata { Name = "teamTwoVsWinCount" },
                new GraphQlFieldMetadata { Name = "teamOneLeagueWinCount" },
                new GraphQlFieldMetadata { Name = "teamOneLeagueMatchCount" },
                new GraphQlFieldMetadata { Name = "teamTwoLeagueWinCount" },
                new GraphQlFieldMetadata { Name = "teamTwoLeagueMatchCount" },
                new GraphQlFieldMetadata { Name = "lastSeries", IsComplex = true, QueryBuilderType = typeof(SeriesTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchLiveInsightType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveInsightTypeQueryBuilder WithTeamOneVsWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneVsWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamOneVsWinCount()
        {
            return ExceptField("teamOneVsWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamTwoVsWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoVsWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamTwoVsWinCount()
        {
            return ExceptField("teamTwoVsWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamOneLeagueWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneLeagueWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamOneLeagueWinCount()
        {
            return ExceptField("teamOneLeagueWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamOneLeagueMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamOneLeagueMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamOneLeagueMatchCount()
        {
            return ExceptField("teamOneLeagueMatchCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamTwoLeagueWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoLeagueWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamTwoLeagueWinCount()
        {
            return ExceptField("teamTwoLeagueWinCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithTeamTwoLeagueMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamTwoLeagueMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptTeamTwoLeagueMatchCount()
        {
            return ExceptField("teamTwoLeagueMatchCount");
        }

        public MatchLiveInsightTypeQueryBuilder WithLastSeries(SeriesTypeQueryBuilder seriesTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lastSeries", alias, seriesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveInsightTypeQueryBuilder ExceptLastSeries()
        {
            return ExceptField("lastSeries");
        }
    }

    public partial class MatchLiveWinRateDetailTypeQueryBuilder : GraphQlQueryBuilder<MatchLiveWinRateDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "winRate" }
            };

        protected override string TypeName { get { return "MatchLiveWinRateDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchLiveWinRateDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveWinRateDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchLiveWinRateDetailTypeQueryBuilder WithWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchLiveWinRateDetailTypeQueryBuilder ExceptWinRate()
        {
            return ExceptField("winRate");
        }
    }

    public partial class LeagueTableTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "tableTeams", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tableHeroes", IsComplex = true, QueryBuilderType = typeof(LeagueTableHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tablePlayers", IsComplex = true, QueryBuilderType = typeof(LeagueTablePlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueTableType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public LeagueTableTypeQueryBuilder WithTableTeams(LeagueTableTeamTypeQueryBuilder leagueTableTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tableTeams", alias, leagueTableTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTypeQueryBuilder ExceptTableTeams()
        {
            return ExceptField("tableTeams");
        }

        public LeagueTableTypeQueryBuilder WithTableHeroes(LeagueTableHeroTypeQueryBuilder leagueTableHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tableHeroes", alias, leagueTableHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTypeQueryBuilder ExceptTableHeroes()
        {
            return ExceptField("tableHeroes");
        }

        public LeagueTableTypeQueryBuilder WithTablePlayers(LeagueTablePlayerTypeQueryBuilder leagueTablePlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tablePlayers", alias, leagueTablePlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTypeQueryBuilder ExceptTablePlayers()
        {
            return ExceptField("tablePlayers");
        }
    }

    public partial class LeagueTableTeamTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(LeagueRegisteredPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "overview", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamOverviewTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamStatsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamHeroesObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lanes", IsComplex = true, QueryBuilderType = typeof(LeagueTableTeamLanesObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueTableTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public LeagueTableTeamTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public LeagueTableTeamTypeQueryBuilder WithMembers(LeagueRegisteredPlayerTypeQueryBuilder leagueRegisteredPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("members", alias, leagueRegisteredPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public LeagueTableTeamTypeQueryBuilder WithOverview(LeagueTableTeamOverviewTypeQueryBuilder leagueTableTeamOverviewTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("overview", alias, leagueTableTeamOverviewTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptOverview()
        {
            return ExceptField("overview");
        }

        public LeagueTableTeamTypeQueryBuilder WithStats(LeagueTableTeamStatsTypeQueryBuilder leagueTableTeamStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, leagueTableTeamStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public LeagueTableTeamTypeQueryBuilder WithHeroes(LeagueTableTeamHeroesObjectTypeQueryBuilder leagueTableTeamHeroesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, leagueTableTeamHeroesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public LeagueTableTeamTypeQueryBuilder WithLanes(LeagueTableTeamLanesObjectTypeQueryBuilder leagueTableTeamLanesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lanes", alias, leagueTableTeamLanesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamTypeQueryBuilder ExceptLanes()
        {
            return ExceptField("lanes");
        }
    }

    public partial class LeagueRegisteredPlayerTypeQueryBuilder : GraphQlQueryBuilder<LeagueRegisteredPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "radiantTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueRegisteredPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueRegisteredPlayerTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueRegisteredPlayerTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public LeagueRegisteredPlayerTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueRegisteredPlayerTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public LeagueRegisteredPlayerTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueRegisteredPlayerTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public LeagueRegisteredPlayerTypeQueryBuilder WithRadiantTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueRegisteredPlayerTypeQueryBuilder ExceptRadiantTeam()
        {
            return ExceptField("radiantTeam");
        }

        public LeagueRegisteredPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueRegisteredPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public LeagueRegisteredPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueRegisteredPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class LeagueTableTeamOverviewTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamOverviewTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "points" },
                new GraphQlFieldMetadata { Name = "earnings" },
                new GraphQlFieldMetadata { Name = "seriesCount" },
                new GraphQlFieldMetadata { Name = "seriesWins" },
                new GraphQlFieldMetadata { Name = "seriesDraws" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" },
                new GraphQlFieldMetadata { Name = "tmp" }
            };

        protected override string TypeName { get { return "LeagueTableTeamOverviewType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamOverviewTypeQueryBuilder WithPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("points", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithEarnings(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("earnings", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptEarnings()
        {
            return ExceptField("earnings");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithSeriesCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptSeriesCount()
        {
            return ExceptField("seriesCount");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithSeriesWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptSeriesWins()
        {
            return ExceptField("seriesWins");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithSeriesDraws(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesDraws", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptSeriesDraws()
        {
            return ExceptField("seriesDraws");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTableTeamOverviewTypeQueryBuilder WithTmp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tmp", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamOverviewTypeQueryBuilder ExceptTmp()
        {
            return ExceptField("tmp");
        }
    }

    public partial class LeagueTableTeamStatsTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamStatsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "gpm" },
                new GraphQlFieldMetadata { Name = "xpm" },
                new GraphQlFieldMetadata { Name = "heal" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "duration" }
            };

        protected override string TypeName { get { return "LeagueTableTeamStatsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamStatsTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithGpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptGpm()
        {
            return ExceptField("gpm");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithXpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptXpm()
        {
            return ExceptField("xpm");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heal", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptHeal()
        {
            return ExceptField("heal");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public LeagueTableTeamStatsTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamStatsTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }
    }

    public partial class LeagueTableTeamHeroesObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamHeroesObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "banCount" }
            };

        protected override string TypeName { get { return "LeagueTableTeamHeroesObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamHeroesObjectTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder WithBanCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamHeroesObjectTypeQueryBuilder ExceptBanCount()
        {
            return ExceptField("banCount");
        }
    }

    public partial class LeagueTableTeamLanesObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableTeamLanesObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" }
            };

        protected override string TypeName { get { return "LeagueTableTeamLanesObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableTeamLanesObjectTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamLanesObjectTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueTableTeamLanesObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamLanesObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableTeamLanesObjectTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableTeamLanesObjectTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }
    }

    public partial class LeagueTableHeroTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "overview", IsComplex = true, QueryBuilderType = typeof(LeagueTableHeroOverviewTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(LeagueTableHeroStatsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(LeagueTableHeroPlayersObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lanes", IsComplex = true, QueryBuilderType = typeof(LeagueTableHeroLanesObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueTableHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LeagueTableHeroTypeQueryBuilder WithOverview(LeagueTableHeroOverviewTypeQueryBuilder leagueTableHeroOverviewTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("overview", alias, leagueTableHeroOverviewTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroTypeQueryBuilder ExceptOverview()
        {
            return ExceptField("overview");
        }

        public LeagueTableHeroTypeQueryBuilder WithStats(LeagueTableHeroStatsTypeQueryBuilder leagueTableHeroStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, leagueTableHeroStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public LeagueTableHeroTypeQueryBuilder WithHeroes(LeagueTableHeroPlayersObjectTypeQueryBuilder leagueTableHeroPlayersObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, leagueTableHeroPlayersObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public LeagueTableHeroTypeQueryBuilder WithLanes(LeagueTableHeroLanesObjectTypeQueryBuilder leagueTableHeroLanesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lanes", alias, leagueTableHeroLanesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroTypeQueryBuilder ExceptLanes()
        {
            return ExceptField("lanes");
        }
    }

    public partial class LeagueTableHeroOverviewTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableHeroOverviewTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" },
                new GraphQlFieldMetadata { Name = "pickPhaseOne" },
                new GraphQlFieldMetadata { Name = "pickPhaseTwo" },
                new GraphQlFieldMetadata { Name = "pickPhaseThree" },
                new GraphQlFieldMetadata { Name = "banCount" },
                new GraphQlFieldMetadata { Name = "banPhaseOne" },
                new GraphQlFieldMetadata { Name = "banPhaseTwo" },
                new GraphQlFieldMetadata { Name = "banPhaseThree" }
            };

        protected override string TypeName { get { return "LeagueTableHeroOverviewType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableHeroOverviewTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithPickPhaseOne(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickPhaseOne", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptPickPhaseOne()
        {
            return ExceptField("pickPhaseOne");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithPickPhaseTwo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickPhaseTwo", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptPickPhaseTwo()
        {
            return ExceptField("pickPhaseTwo");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithPickPhaseThree(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickPhaseThree", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptPickPhaseThree()
        {
            return ExceptField("pickPhaseThree");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithBanCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptBanCount()
        {
            return ExceptField("banCount");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithBanPhaseOne(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banPhaseOne", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptBanPhaseOne()
        {
            return ExceptField("banPhaseOne");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithBanPhaseTwo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banPhaseTwo", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptBanPhaseTwo()
        {
            return ExceptField("banPhaseTwo");
        }

        public LeagueTableHeroOverviewTypeQueryBuilder WithBanPhaseThree(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banPhaseThree", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroOverviewTypeQueryBuilder ExceptBanPhaseThree()
        {
            return ExceptField("banPhaseThree");
        }
    }

    public partial class LeagueTableHeroStatsTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableHeroStatsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "gpm" },
                new GraphQlFieldMetadata { Name = "xpm" },
                new GraphQlFieldMetadata { Name = "heal" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "killContribution" }
            };

        protected override string TypeName { get { return "LeagueTableHeroStatsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableHeroStatsTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithGpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptGpm()
        {
            return ExceptField("gpm");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithXpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptXpm()
        {
            return ExceptField("xpm");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heal", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptHeal()
        {
            return ExceptField("heal");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public LeagueTableHeroStatsTypeQueryBuilder WithKillContribution(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killContribution", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroStatsTypeQueryBuilder ExceptKillContribution()
        {
            return ExceptField("killContribution");
        }
    }

    public partial class LeagueTableHeroPlayersObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableHeroPlayersObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "gpm" },
                new GraphQlFieldMetadata { Name = "xpm" },
                new GraphQlFieldMetadata { Name = "heal" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "killContribution" }
            };

        protected override string TypeName { get { return "LeagueTableHeroPlayersObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithSteamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptSteamId()
        {
            return ExceptField("steamId");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithGpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptGpm()
        {
            return ExceptField("gpm");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithXpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptXpm()
        {
            return ExceptField("xpm");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heal", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptHeal()
        {
            return ExceptField("heal");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder WithKillContribution(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killContribution", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroPlayersObjectTypeQueryBuilder ExceptKillContribution()
        {
            return ExceptField("killContribution");
        }
    }

    public partial class LeagueTableHeroLanesObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueTableHeroLanesObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" }
            };

        protected override string TypeName { get { return "LeagueTableHeroLanesObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTableHeroLanesObjectTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroLanesObjectTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueTableHeroLanesObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroLanesObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTableHeroLanesObjectTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTableHeroLanesObjectTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }
    }

    public partial class LeagueTablePlayerTypeQueryBuilder : GraphQlQueryBuilder<LeagueTablePlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "overview", IsComplex = true, QueryBuilderType = typeof(LeagueTablePlayerOverviewTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(LeagueTablePlayerStatsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(LeagueTablePlayerHeroesObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lanes", IsComplex = true, QueryBuilderType = typeof(LeagueTablePlayerLanesObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueTablePlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTablePlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public LeagueTablePlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LeagueTablePlayerTypeQueryBuilder WithOverview(LeagueTablePlayerOverviewTypeQueryBuilder leagueTablePlayerOverviewTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("overview", alias, leagueTablePlayerOverviewTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerTypeQueryBuilder ExceptOverview()
        {
            return ExceptField("overview");
        }

        public LeagueTablePlayerTypeQueryBuilder WithStats(LeagueTablePlayerStatsTypeQueryBuilder leagueTablePlayerStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, leagueTablePlayerStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public LeagueTablePlayerTypeQueryBuilder WithHeroes(LeagueTablePlayerHeroesObjectTypeQueryBuilder leagueTablePlayerHeroesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, leagueTablePlayerHeroesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public LeagueTablePlayerTypeQueryBuilder WithLanes(LeagueTablePlayerLanesObjectTypeQueryBuilder leagueTablePlayerLanesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lanes", alias, leagueTablePlayerLanesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerTypeQueryBuilder ExceptLanes()
        {
            return ExceptField("lanes");
        }
    }

    public partial class LeagueTablePlayerOverviewTypeQueryBuilder : GraphQlQueryBuilder<LeagueTablePlayerOverviewTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "points" },
                new GraphQlFieldMetadata { Name = "earnings" },
                new GraphQlFieldMetadata { Name = "seriesCount" },
                new GraphQlFieldMetadata { Name = "seriesWins" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" },
                new GraphQlFieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "LeagueTablePlayerOverviewType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTablePlayerOverviewTypeQueryBuilder WithPoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("points", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptPoints()
        {
            return ExceptField("points");
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder WithEarnings(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("earnings", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptEarnings()
        {
            return ExceptField("earnings");
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder WithSeriesCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptSeriesCount()
        {
            return ExceptField("seriesCount");
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder WithSeriesWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptSeriesWins()
        {
            return ExceptField("seriesWins");
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerOverviewTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }

    public partial class LeagueTablePlayerStatsTypeQueryBuilder : GraphQlQueryBuilder<LeagueTablePlayerStatsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "gpm" },
                new GraphQlFieldMetadata { Name = "xpm" },
                new GraphQlFieldMetadata { Name = "heal" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "killContribution" }
            };

        protected override string TypeName { get { return "LeagueTablePlayerStatsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTablePlayerStatsTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithGpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptGpm()
        {
            return ExceptField("gpm");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithXpm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpm", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptXpm()
        {
            return ExceptField("xpm");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heal", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptHeal()
        {
            return ExceptField("heal");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public LeagueTablePlayerStatsTypeQueryBuilder WithKillContribution(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killContribution", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerStatsTypeQueryBuilder ExceptKillContribution()
        {
            return ExceptField("killContribution");
        }
    }

    public partial class LeagueTablePlayerHeroesObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueTablePlayerHeroesObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" },
                new GraphQlFieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "LeagueTablePlayerHeroesObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerHeroesObjectTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }

    public partial class LeagueTablePlayerLanesObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueTablePlayerLanesObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchWins" }
            };

        protected override string TypeName { get { return "LeagueTablePlayerLanesObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueTablePlayerLanesObjectTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerLanesObjectTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LeagueTablePlayerLanesObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerLanesObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueTablePlayerLanesObjectTypeQueryBuilder WithMatchWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWins", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueTablePlayerLanesObjectTypeQueryBuilder ExceptMatchWins()
        {
            return ExceptField("matchWins");
        }
    }

    public partial class LeagueBattlePassTypeQueryBuilder : GraphQlQueryBuilder<LeagueBattlePassTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "average" }
            };

        protected override string TypeName { get { return "LeagueBattlePassType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueBattlePassTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueBattlePassTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public LeagueBattlePassTypeQueryBuilder WithAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("average", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueBattlePassTypeQueryBuilder ExceptAverage()
        {
            return ExceptField("average");
        }
    }

    public partial class LeagueStatTypeQueryBuilder : GraphQlQueryBuilder<LeagueStatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "radiantWinMatchCount" },
                new GraphQlFieldMetadata { Name = "averageMatchDurationSeconds" }
            };

        protected override string TypeName { get { return "LeagueStatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueStatTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStatTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueStatTypeQueryBuilder WithRadiantWinMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantWinMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStatTypeQueryBuilder ExceptRadiantWinMatchCount()
        {
            return ExceptField("radiantWinMatchCount");
        }

        public LeagueStatTypeQueryBuilder WithAverageMatchDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("averageMatchDurationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueStatTypeQueryBuilder ExceptAverageMatchDurationSeconds()
        {
            return ExceptField("averageMatchDurationSeconds");
        }
    }

    public partial class LeaguePrizePoolPercentageTypeQueryBuilder : GraphQlQueryBuilder<LeaguePrizePoolPercentageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "index" },
                new GraphQlFieldMetadata { Name = "percentage" }
            };

        protected override string TypeName { get { return "LeaguePrizePoolPercentageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeaguePrizePoolPercentageTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaguePrizePoolPercentageTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public LeaguePrizePoolPercentageTypeQueryBuilder WithIndex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("index", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaguePrizePoolPercentageTypeQueryBuilder ExceptIndex()
        {
            return ExceptField("index");
        }

        public LeaguePrizePoolPercentageTypeQueryBuilder WithPercentage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("percentage", alias, new GraphQlDirective[] { include, skip });
        }

        public LeaguePrizePoolPercentageTypeQueryBuilder ExceptPercentage()
        {
            return ExceptField("percentage");
        }
    }

    public partial class TeamPrizeTypeQueryBuilder : GraphQlQueryBuilder<TeamPrizeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "standing" },
                new GraphQlFieldMetadata { Name = "prizeAmount" }
            };

        protected override string TypeName { get { return "TeamPrizeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TeamPrizeTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public TeamPrizeTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public TeamPrizeTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public TeamPrizeTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public TeamPrizeTypeQueryBuilder WithStanding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("standing", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptStanding()
        {
            return ExceptField("standing");
        }

        public TeamPrizeTypeQueryBuilder WithPrizeAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("prizeAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public TeamPrizeTypeQueryBuilder ExceptPrizeAmount()
        {
            return ExceptField("prizeAmount");
        }
    }

    public partial class MatchPlayerTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerSlot" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "isVictory" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "leaverStatus" },
                new GraphQlFieldMetadata { Name = "numLastHits" },
                new GraphQlFieldMetadata { Name = "numDenies" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "experiencePerMinute" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "goldSpent" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "heroHealing" },
                new GraphQlFieldMetadata { Name = "partyId" },
                new GraphQlFieldMetadata { Name = "isRandom" },
                new GraphQlFieldMetadata { Name = "lane" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "streakPrediction" },
                new GraphQlFieldMetadata { Name = "intentionalFeeding" },
                new GraphQlFieldMetadata { Name = "role" },
                new GraphQlFieldMetadata { Name = "roleBasic" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "award" },
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" },
                new GraphQlFieldMetadata { Name = "backpack0Id" },
                new GraphQlFieldMetadata { Name = "backpack1Id" },
                new GraphQlFieldMetadata { Name = "backpack2Id" },
                new GraphQlFieldMetadata { Name = "neutral0Id" },
                new GraphQlFieldMetadata { Name = "behavior" },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playbackData", IsComplex = true, QueryBuilderType = typeof(MatchPlayerPlaybackDataTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroAverage", IsComplex = true, QueryBuilderType = typeof(HeroPositionTimeDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "additionalUnit", IsComplex = true, QueryBuilderType = typeof(MatchPlayerAdditionalUnitTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dotaPlus", IsComplex = true, QueryBuilderType = typeof(HeroDotaPlusLeaderboardRankTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilities", IsComplex = true, QueryBuilderType = typeof(PlayerAbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "invisibleSeconds" },
                new GraphQlFieldMetadata { Name = "dotaPlusHeroXp" }
            };

        protected override string TypeName { get { return "MatchPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchPlayerTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public MatchPlayerTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public MatchPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchPlayerTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchPlayerTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public MatchPlayerTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchPlayerTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchPlayerTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public MatchPlayerTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public MatchPlayerTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public MatchPlayerTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public MatchPlayerTypeQueryBuilder WithLeaverStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaverStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptLeaverStatus()
        {
            return ExceptField("leaverStatus");
        }

        public MatchPlayerTypeQueryBuilder WithNumLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNumLastHits()
        {
            return ExceptField("numLastHits");
        }

        public MatchPlayerTypeQueryBuilder WithNumDenies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDenies", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNumDenies()
        {
            return ExceptField("numDenies");
        }

        public MatchPlayerTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchPlayerTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public MatchPlayerTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public MatchPlayerTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchPlayerTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerTypeQueryBuilder WithGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptGoldSpent()
        {
            return ExceptField("goldSpent");
        }

        public MatchPlayerTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public MatchPlayerTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public MatchPlayerTypeQueryBuilder WithHeroHealing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealing", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroHealing()
        {
            return ExceptField("heroHealing");
        }

        public MatchPlayerTypeQueryBuilder WithPartyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("partyId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPartyId()
        {
            return ExceptField("partyId");
        }

        public MatchPlayerTypeQueryBuilder WithIsRandom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRandom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIsRandom()
        {
            return ExceptField("isRandom");
        }

        public MatchPlayerTypeQueryBuilder WithLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lane", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptLane()
        {
            return ExceptField("lane");
        }

        public MatchPlayerTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public MatchPlayerTypeQueryBuilder WithStreakPrediction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streakPrediction", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptStreakPrediction()
        {
            return ExceptField("streakPrediction");
        }

        public MatchPlayerTypeQueryBuilder WithIntentionalFeeding(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("intentionalFeeding", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptIntentionalFeeding()
        {
            return ExceptField("intentionalFeeding");
        }

        public MatchPlayerTypeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public MatchPlayerTypeQueryBuilder WithRoleBasic(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleBasic", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptRoleBasic()
        {
            return ExceptField("roleBasic");
        }

        public MatchPlayerTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public MatchPlayerTypeQueryBuilder WithAward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("award", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptAward()
        {
            return ExceptField("award");
        }

        public MatchPlayerTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchPlayerTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public MatchPlayerTypeQueryBuilder WithBackpack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBackpack0Id()
        {
            return ExceptField("backpack0Id");
        }

        public MatchPlayerTypeQueryBuilder WithBackpack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBackpack1Id()
        {
            return ExceptField("backpack1Id");
        }

        public MatchPlayerTypeQueryBuilder WithBackpack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBackpack2Id()
        {
            return ExceptField("backpack2Id");
        }

        public MatchPlayerTypeQueryBuilder WithNeutral0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutral0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptNeutral0Id()
        {
            return ExceptField("neutral0Id");
        }

        public MatchPlayerTypeQueryBuilder WithBehavior(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behavior", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptBehavior()
        {
            return ExceptField("behavior");
        }

        public MatchPlayerTypeQueryBuilder WithStats(MatchPlayerStatsTypeQueryBuilder matchPlayerStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, matchPlayerStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public MatchPlayerTypeQueryBuilder WithPlaybackData(MatchPlayerPlaybackDataTypeQueryBuilder matchPlayerPlaybackDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playbackData", alias, matchPlayerPlaybackDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptPlaybackData()
        {
            return ExceptField("playbackData");
        }

        public MatchPlayerTypeQueryBuilder WithHeroAverage(HeroPositionTimeDetailTypeQueryBuilder heroPositionTimeDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroAverage", alias, heroPositionTimeDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptHeroAverage()
        {
            return ExceptField("heroAverage");
        }

        public MatchPlayerTypeQueryBuilder WithAdditionalUnit(MatchPlayerAdditionalUnitTypeQueryBuilder matchPlayerAdditionalUnitTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("additionalUnit", alias, matchPlayerAdditionalUnitTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptAdditionalUnit()
        {
            return ExceptField("additionalUnit");
        }

        public MatchPlayerTypeQueryBuilder WithDotaPlus(HeroDotaPlusLeaderboardRankTypeQueryBuilder heroDotaPlusLeaderboardRankTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dotaPlus", alias, heroDotaPlusLeaderboardRankTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptDotaPlus()
        {
            return ExceptField("dotaPlus");
        }

        public MatchPlayerTypeQueryBuilder WithAbilities(PlayerAbilityTypeQueryBuilder playerAbilityTypeQueryBuilder, QueryBuilderParameter<int?> gameVerionId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVerionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVerionId", ArgumentValue = gameVerionId} );

            return WithObjectField("abilities", alias, playerAbilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MatchPlayerTypeQueryBuilder ExceptAbilities()
        {
            return ExceptField("abilities");
        }

        public MatchPlayerTypeQueryBuilder WithInvisibleSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("invisibleSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptInvisibleSeconds()
        {
            return ExceptField("invisibleSeconds");
        }

        public MatchPlayerTypeQueryBuilder WithDotaPlusHeroXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dotaPlusHeroXp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerTypeQueryBuilder ExceptDotaPlusHeroXp()
        {
            return ExceptField("dotaPlusHeroXp");
        }
    }

    public partial class MatchPlayerStatsTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "level", IsComplex = true },
                new GraphQlFieldMetadata { Name = "killEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsKillEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deathEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsDeathEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "assistEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsAssistEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lastHitsPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "goldPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "experiencePerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "healPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "heroDamagePerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "towerDamagePerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "towerDamageReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsTowerDamageReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "courierKills", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsCourierKillEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "wards", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsWardEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemPurchases", IsComplex = true, QueryBuilderType = typeof(MatchPlayerItemPurchaseEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemUsed", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsItemUsedEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "allTalks", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsAllTalkEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chatWheels", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsChatWheelEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "actionsPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "actionReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsActionReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "locationReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsLocationReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "farmDistributionReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "runes", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsRuneEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilityCastReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsAbilityCastReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroDamageReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsHeroDamageReportTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "inventoryReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "networthPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "campStack", IsComplex = true },
                new GraphQlFieldMetadata { Name = "matchPlayerBuffEvent", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsBuffEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deniesPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "impPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "tripsFountainPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "spiritBearInventoryReport", IsComplex = true, QueryBuilderType = typeof(MatchPlayerSpiritBearInventoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroDamageReceivedPerMinute", IsComplex = true },
                new GraphQlFieldMetadata { Name = "wardDestruction", IsComplex = true, QueryBuilderType = typeof(MatchPlayerWardDestuctionObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerStatsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchPlayerStatsTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchPlayerStatsTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchPlayerStatsTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchPlayerStatsTypeQueryBuilder WithKillEvents(MatchPlayerStatsKillEventTypeQueryBuilder matchPlayerStatsKillEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("killEvents", alias, matchPlayerStatsKillEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptKillEvents()
        {
            return ExceptField("killEvents");
        }

        public MatchPlayerStatsTypeQueryBuilder WithDeathEvents(MatchPlayerStatsDeathEventTypeQueryBuilder matchPlayerStatsDeathEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deathEvents", alias, matchPlayerStatsDeathEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptDeathEvents()
        {
            return ExceptField("deathEvents");
        }

        public MatchPlayerStatsTypeQueryBuilder WithAssistEvents(MatchPlayerStatsAssistEventTypeQueryBuilder matchPlayerStatsAssistEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("assistEvents", alias, matchPlayerStatsAssistEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptAssistEvents()
        {
            return ExceptField("assistEvents");
        }

        public MatchPlayerStatsTypeQueryBuilder WithLastHitsPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitsPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptLastHitsPerMinute()
        {
            return ExceptField("lastHitsPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithHealPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptHealPerMinute()
        {
            return ExceptField("healPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithHeroDamagePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamagePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptHeroDamagePerMinute()
        {
            return ExceptField("heroDamagePerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithTowerDamagePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamagePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptTowerDamagePerMinute()
        {
            return ExceptField("towerDamagePerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithTowerDamageReport(MatchPlayerStatsTowerDamageReportTypeQueryBuilder matchPlayerStatsTowerDamageReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerDamageReport", alias, matchPlayerStatsTowerDamageReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptTowerDamageReport()
        {
            return ExceptField("towerDamageReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithCourierKills(MatchPlayerStatsCourierKillEventTypeQueryBuilder matchPlayerStatsCourierKillEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("courierKills", alias, matchPlayerStatsCourierKillEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptCourierKills()
        {
            return ExceptField("courierKills");
        }

        public MatchPlayerStatsTypeQueryBuilder WithWards(MatchPlayerStatsWardEventTypeQueryBuilder matchPlayerStatsWardEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("wards", alias, matchPlayerStatsWardEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptWards()
        {
            return ExceptField("wards");
        }

        public MatchPlayerStatsTypeQueryBuilder WithItemPurchases(MatchPlayerItemPurchaseEventTypeQueryBuilder matchPlayerItemPurchaseEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("itemPurchases", alias, matchPlayerItemPurchaseEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptItemPurchases()
        {
            return ExceptField("itemPurchases");
        }

        public MatchPlayerStatsTypeQueryBuilder WithItemUsed(MatchPlayerStatsItemUsedEventTypeQueryBuilder matchPlayerStatsItemUsedEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("itemUsed", alias, matchPlayerStatsItemUsedEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptItemUsed()
        {
            return ExceptField("itemUsed");
        }

        public MatchPlayerStatsTypeQueryBuilder WithAllTalks(MatchPlayerStatsAllTalkEventTypeQueryBuilder matchPlayerStatsAllTalkEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("allTalks", alias, matchPlayerStatsAllTalkEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptAllTalks()
        {
            return ExceptField("allTalks");
        }

        public MatchPlayerStatsTypeQueryBuilder WithChatWheels(MatchPlayerStatsChatWheelEventTypeQueryBuilder matchPlayerStatsChatWheelEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chatWheels", alias, matchPlayerStatsChatWheelEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptChatWheels()
        {
            return ExceptField("chatWheels");
        }

        public MatchPlayerStatsTypeQueryBuilder WithActionsPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("actionsPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptActionsPerMinute()
        {
            return ExceptField("actionsPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithActionReport(MatchPlayerStatsActionReportTypeQueryBuilder matchPlayerStatsActionReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("actionReport", alias, matchPlayerStatsActionReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptActionReport()
        {
            return ExceptField("actionReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithLocationReport(MatchPlayerStatsLocationReportTypeQueryBuilder matchPlayerStatsLocationReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("locationReport", alias, matchPlayerStatsLocationReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptLocationReport()
        {
            return ExceptField("locationReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithFarmDistributionReport(MatchPlayerStatsFarmDistributionReportTypeQueryBuilder matchPlayerStatsFarmDistributionReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("farmDistributionReport", alias, matchPlayerStatsFarmDistributionReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptFarmDistributionReport()
        {
            return ExceptField("farmDistributionReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithRunes(MatchPlayerStatsRuneEventTypeQueryBuilder matchPlayerStatsRuneEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("runes", alias, matchPlayerStatsRuneEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptRunes()
        {
            return ExceptField("runes");
        }

        public MatchPlayerStatsTypeQueryBuilder WithAbilityCastReport(MatchPlayerStatsAbilityCastReportTypeQueryBuilder matchPlayerStatsAbilityCastReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("abilityCastReport", alias, matchPlayerStatsAbilityCastReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptAbilityCastReport()
        {
            return ExceptField("abilityCastReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithHeroDamageReport(MatchPlayerStatsHeroDamageReportTypeQueryBuilder matchPlayerStatsHeroDamageReportTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroDamageReport", alias, matchPlayerStatsHeroDamageReportTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptHeroDamageReport()
        {
            return ExceptField("heroDamageReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithInventoryReport(MatchPlayerInventoryTypeQueryBuilder matchPlayerInventoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("inventoryReport", alias, matchPlayerInventoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptInventoryReport()
        {
            return ExceptField("inventoryReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithNetworthPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networthPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptNetworthPerMinute()
        {
            return ExceptField("networthPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithCampStack(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("campStack", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptCampStack()
        {
            return ExceptField("campStack");
        }

        public MatchPlayerStatsTypeQueryBuilder WithMatchPlayerBuffEvent(MatchPlayerStatsBuffEventTypeQueryBuilder matchPlayerStatsBuffEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchPlayerBuffEvent", alias, matchPlayerStatsBuffEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptMatchPlayerBuffEvent()
        {
            return ExceptField("matchPlayerBuffEvent");
        }

        public MatchPlayerStatsTypeQueryBuilder WithDeniesPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deniesPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptDeniesPerMinute()
        {
            return ExceptField("deniesPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithImpPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptImpPerMinute()
        {
            return ExceptField("impPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithTripsFountainPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tripsFountainPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptTripsFountainPerMinute()
        {
            return ExceptField("tripsFountainPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithSpiritBearInventoryReport(MatchPlayerSpiritBearInventoryTypeQueryBuilder matchPlayerSpiritBearInventoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("spiritBearInventoryReport", alias, matchPlayerSpiritBearInventoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptSpiritBearInventoryReport()
        {
            return ExceptField("spiritBearInventoryReport");
        }

        public MatchPlayerStatsTypeQueryBuilder WithHeroDamageReceivedPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamageReceivedPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptHeroDamageReceivedPerMinute()
        {
            return ExceptField("heroDamageReceivedPerMinute");
        }

        public MatchPlayerStatsTypeQueryBuilder WithWardDestruction(MatchPlayerWardDestuctionObjectTypeQueryBuilder matchPlayerWardDestuctionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("wardDestruction", alias, matchPlayerWardDestuctionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTypeQueryBuilder ExceptWardDestruction()
        {
            return ExceptField("wardDestruction");
        }
    }

    public partial class MatchPlayerStatsKillEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsKillEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "assist", IsComplex = true },
                new GraphQlFieldMetadata { Name = "isSolo" },
                new GraphQlFieldMetadata { Name = "isGank" },
                new GraphQlFieldMetadata { Name = "isInvisible" },
                new GraphQlFieldMetadata { Name = "isSmoke" },
                new GraphQlFieldMetadata { Name = "isTpRecently" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsKillEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsKillEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithAssist(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assist", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptAssist()
        {
            return ExceptField("assist");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithIsSolo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSolo", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptIsSolo()
        {
            return ExceptField("isSolo");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithIsGank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGank", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptIsGank()
        {
            return ExceptField("isGank");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithIsInvisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isInvisible", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptIsInvisible()
        {
            return ExceptField("isInvisible");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithIsSmoke(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSmoke", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptIsSmoke()
        {
            return ExceptField("isSmoke");
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder WithIsTpRecently(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTpRecently", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsKillEventTypeQueryBuilder ExceptIsTpRecently()
        {
            return ExceptField("isTpRecently");
        }
    }

    public partial class MatchPlayerStatsDeathEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsDeathEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "goldFed" },
                new GraphQlFieldMetadata { Name = "xpFed" },
                new GraphQlFieldMetadata { Name = "timeDead" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "goldLost" },
                new GraphQlFieldMetadata { Name = "assist", IsComplex = true },
                new GraphQlFieldMetadata { Name = "isWardWalkThrough" },
                new GraphQlFieldMetadata { Name = "isAttemptTpOut" },
                new GraphQlFieldMetadata { Name = "isDieBack" },
                new GraphQlFieldMetadata { Name = "isBurst" },
                new GraphQlFieldMetadata { Name = "isEngagedOnDeath" },
                new GraphQlFieldMetadata { Name = "hasHealAvailable" },
                new GraphQlFieldMetadata { Name = "isTracked" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsDeathEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithGoldFed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldFed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptGoldFed()
        {
            return ExceptField("goldFed");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithXpFed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpFed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptXpFed()
        {
            return ExceptField("xpFed");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithTimeDead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeDead", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptTimeDead()
        {
            return ExceptField("timeDead");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithGoldLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldLost", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptGoldLost()
        {
            return ExceptField("goldLost");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithAssist(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assist", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptAssist()
        {
            return ExceptField("assist");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithIsWardWalkThrough(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isWardWalkThrough", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptIsWardWalkThrough()
        {
            return ExceptField("isWardWalkThrough");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithIsAttemptTpOut(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAttemptTpOut", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptIsAttemptTpOut()
        {
            return ExceptField("isAttemptTpOut");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithIsDieBack(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDieBack", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptIsDieBack()
        {
            return ExceptField("isDieBack");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithIsBurst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBurst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptIsBurst()
        {
            return ExceptField("isBurst");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithIsEngagedOnDeath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isEngagedOnDeath", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptIsEngagedOnDeath()
        {
            return ExceptField("isEngagedOnDeath");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithHasHealAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasHealAvailable", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptHasHealAvailable()
        {
            return ExceptField("hasHealAvailable");
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder WithIsTracked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTracked", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsDeathEventTypeQueryBuilder ExceptIsTracked()
        {
            return ExceptField("isTracked");
        }
    }

    public partial class MatchPlayerStatsAssistEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsAssistEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsAssistEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsAssistEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAssistEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchPlayerStatsTowerDamageReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsTowerDamageReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "damage" },
                new GraphQlFieldMetadata { Name = "damageCreeps" },
                new GraphQlFieldMetadata { Name = "damageFromAbility" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsTowerDamageReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder WithDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder ExceptDamage()
        {
            return ExceptField("damage");
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder WithDamageCreeps(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageCreeps", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder ExceptDamageCreeps()
        {
            return ExceptField("damageCreeps");
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder WithDamageFromAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageFromAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsTowerDamageReportTypeQueryBuilder ExceptDamageFromAbility()
        {
            return ExceptField("damageFromAbility");
        }
    }

    public partial class MatchPlayerStatsCourierKillEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsCourierKillEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsCourierKillEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsCourierKillEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsCourierKillEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsCourierKillEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsCourierKillEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsCourierKillEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsCourierKillEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchPlayerStatsWardEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsWardEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsWardEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsWardEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsWardEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchPlayerItemPurchaseEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerItemPurchaseEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "itemId" }
            };

        protected override string TypeName { get { return "MatchPlayerItemPurchaseEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerItemPurchaseEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerItemPurchaseEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerItemPurchaseEventTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerItemPurchaseEventTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }
    }

    public partial class MatchPlayerStatsItemUsedEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsItemUsedEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "count" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsItemUsedEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsItemUsedEventTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsItemUsedEventTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public MatchPlayerStatsItemUsedEventTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsItemUsedEventTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }
    }

    public partial class MatchPlayerStatsAllTalkEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsAllTalkEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "message" },
                new GraphQlFieldMetadata { Name = "pausedTick" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsAllTalkEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsAllTalkEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAllTalkEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsAllTalkEventTypeQueryBuilder WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("message", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAllTalkEventTypeQueryBuilder ExceptMessage()
        {
            return ExceptField("message");
        }

        public MatchPlayerStatsAllTalkEventTypeQueryBuilder WithPausedTick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pausedTick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAllTalkEventTypeQueryBuilder ExceptPausedTick()
        {
            return ExceptField("pausedTick");
        }
    }

    public partial class MatchPlayerStatsChatWheelEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsChatWheelEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "chatWheelId" },
                new GraphQlFieldMetadata { Name = "pauseTick" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsChatWheelEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsChatWheelEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsChatWheelEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsChatWheelEventTypeQueryBuilder WithChatWheelId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chatWheelId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsChatWheelEventTypeQueryBuilder ExceptChatWheelId()
        {
            return ExceptField("chatWheelId");
        }

        public MatchPlayerStatsChatWheelEventTypeQueryBuilder WithPauseTick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pauseTick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsChatWheelEventTypeQueryBuilder ExceptPauseTick()
        {
            return ExceptField("pauseTick");
        }
    }

    public partial class MatchPlayerStatsActionReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsActionReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "moveToPosition" },
                new GraphQlFieldMetadata { Name = "moveToTarget" },
                new GraphQlFieldMetadata { Name = "attackPosition" },
                new GraphQlFieldMetadata { Name = "attackTarget" },
                new GraphQlFieldMetadata { Name = "castPosition" },
                new GraphQlFieldMetadata { Name = "castTarget" },
                new GraphQlFieldMetadata { Name = "castNoTarget" },
                new GraphQlFieldMetadata { Name = "heldPosition" },
                new GraphQlFieldMetadata { Name = "glyphCast" },
                new GraphQlFieldMetadata { Name = "scanUsed" },
                new GraphQlFieldMetadata { Name = "pingUsed" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsActionReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsActionReportTypeQueryBuilder WithMoveToPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moveToPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptMoveToPosition()
        {
            return ExceptField("moveToPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithMoveToTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("moveToTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptMoveToTarget()
        {
            return ExceptField("moveToTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithAttackPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptAttackPosition()
        {
            return ExceptField("attackPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithAttackTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptAttackTarget()
        {
            return ExceptField("attackTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithCastPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptCastPosition()
        {
            return ExceptField("castPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithCastTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptCastTarget()
        {
            return ExceptField("castTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithCastNoTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castNoTarget", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptCastNoTarget()
        {
            return ExceptField("castNoTarget");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithHeldPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heldPosition", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptHeldPosition()
        {
            return ExceptField("heldPosition");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithGlyphCast(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("glyphCast", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptGlyphCast()
        {
            return ExceptField("glyphCast");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithScanUsed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scanUsed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptScanUsed()
        {
            return ExceptField("scanUsed");
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder WithPingUsed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pingUsed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsActionReportTypeQueryBuilder ExceptPingUsed()
        {
            return ExceptField("pingUsed");
        }
    }

    public partial class MatchPlayerStatsLocationReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsLocationReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsLocationReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsLocationReportTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsLocationReportTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsLocationReportTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsLocationReportTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchPlayerStatsFarmDistributionReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsFarmDistributionReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "creepType", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "creepLocation", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "neutralLocation", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ancientLocation", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buildings", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyBackGold" },
                new GraphQlFieldMetadata { Name = "abandonGold" },
                new GraphQlFieldMetadata { Name = "bountyGold", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "other", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerStatsFarmDistributionReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithCreepType(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("creepType", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptCreepType()
        {
            return ExceptField("creepType");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithCreepLocation(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("creepLocation", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptCreepLocation()
        {
            return ExceptField("creepLocation");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithNeutralLocation(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("neutralLocation", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptNeutralLocation()
        {
            return ExceptField("neutralLocation");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithAncientLocation(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ancientLocation", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptAncientLocation()
        {
            return ExceptField("ancientLocation");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithBuildings(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buildings", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptBuildings()
        {
            return ExceptField("buildings");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithBuyBackGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buyBackGold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptBuyBackGold()
        {
            return ExceptField("buyBackGold");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithAbandonGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abandonGold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptAbandonGold()
        {
            return ExceptField("abandonGold");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithBountyGold(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("bountyGold", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptBountyGold()
        {
            return ExceptField("bountyGold");
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder WithOther(MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("other", alias, matchPlayerStatsFarmDistributionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionReportTypeQueryBuilder ExceptOther()
        {
            return ExceptField("other");
        }
    }

    public partial class MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "xp" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsFarmDistributionObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsFarmDistributionObjectTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }
    }

    public partial class MatchPlayerStatsRuneEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsRuneEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "rune" },
                new GraphQlFieldMetadata { Name = "action" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsRuneEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsRuneEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder WithRune(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rune", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder ExceptRune()
        {
            return ExceptField("rune");
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder WithAction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("action", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder ExceptAction()
        {
            return ExceptField("action");
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsRuneEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class MatchPlayerStatsAbilityCastReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsAbilityCastReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "targets", IsComplex = true, QueryBuilderType = typeof(MatchPlayerStatsAbilityCastObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerStatsAbilityCastReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsAbilityCastReportTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastReportTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public MatchPlayerStatsAbilityCastReportTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastReportTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public MatchPlayerStatsAbilityCastReportTypeQueryBuilder WithTargets(MatchPlayerStatsAbilityCastObjectTypeQueryBuilder matchPlayerStatsAbilityCastObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("targets", alias, matchPlayerStatsAbilityCastObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastReportTypeQueryBuilder ExceptTargets()
        {
            return ExceptField("targets");
        }
    }

    public partial class MatchPlayerStatsAbilityCastObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsAbilityCastObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "damage" },
                new GraphQlFieldMetadata { Name = "duration" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsAbilityCastObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder WithDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder ExceptDamage()
        {
            return ExceptField("damage");
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsAbilityCastObjectTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }
    }

    public partial class MatchPlayerStatsHeroDamageReportTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsHeroDamageReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "dealtTotal", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "receivedTotal", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dealtTargets", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "receivedTargets", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dealtSourceAbility", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "receivedSourceAbility", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dealtSourceItem", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "receivedSourceItem", IsComplex = true, QueryBuilderType = typeof(MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerStatsHeroDamageReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithDealtTotal(MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder matchPlayerHeroDamageTotalReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dealtTotal", alias, matchPlayerHeroDamageTotalReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptDealtTotal()
        {
            return ExceptField("dealtTotal");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithReceivedTotal(MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder matchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("receivedTotal", alias, matchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptReceivedTotal()
        {
            return ExceptField("receivedTotal");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithDealtTargets(MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder matchPlayerHeroDamageTargetReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dealtTargets", alias, matchPlayerHeroDamageTargetReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptDealtTargets()
        {
            return ExceptField("dealtTargets");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithReceivedTargets(MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder matchPlayerHeroDamageTargetReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("receivedTargets", alias, matchPlayerHeroDamageTargetReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptReceivedTargets()
        {
            return ExceptField("receivedTargets");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithDealtSourceAbility(MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder matchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dealtSourceAbility", alias, matchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptDealtSourceAbility()
        {
            return ExceptField("dealtSourceAbility");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithReceivedSourceAbility(MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder matchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("receivedSourceAbility", alias, matchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptReceivedSourceAbility()
        {
            return ExceptField("receivedSourceAbility");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithDealtSourceItem(MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder matchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dealtSourceItem", alias, matchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptDealtSourceItem()
        {
            return ExceptField("dealtSourceItem");
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder WithReceivedSourceItem(MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder matchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("receivedSourceItem", alias, matchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsHeroDamageReportTypeQueryBuilder ExceptReceivedSourceItem()
        {
            return ExceptField("receivedSourceItem");
        }
    }

    public partial class MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "physicalDamage" },
                new GraphQlFieldMetadata { Name = "magicalDamage" },
                new GraphQlFieldMetadata { Name = "pureDamage" },
                new GraphQlFieldMetadata { Name = "selfHeal" },
                new GraphQlFieldMetadata { Name = "allyHeal" },
                new GraphQlFieldMetadata { Name = "stunCount" },
                new GraphQlFieldMetadata { Name = "stunDuration" },
                new GraphQlFieldMetadata { Name = "disableCount" },
                new GraphQlFieldMetadata { Name = "disableDuration" },
                new GraphQlFieldMetadata { Name = "slowCount" },
                new GraphQlFieldMetadata { Name = "slowDuration" }
            };

        protected override string TypeName { get { return "MatchPlayerHeroDamageTotalReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithPhysicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptPhysicalDamage()
        {
            return ExceptField("physicalDamage");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithMagicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptMagicalDamage()
        {
            return ExceptField("magicalDamage");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithPureDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptPureDamage()
        {
            return ExceptField("pureDamage");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithSelfHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selfHeal", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptSelfHeal()
        {
            return ExceptField("selfHeal");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithAllyHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("allyHeal", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptAllyHeal()
        {
            return ExceptField("allyHeal");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithStunCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptStunCount()
        {
            return ExceptField("stunCount");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithStunDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptStunDuration()
        {
            return ExceptField("stunDuration");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithDisableCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptDisableCount()
        {
            return ExceptField("disableCount");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithDisableDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptDisableDuration()
        {
            return ExceptField("disableDuration");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithSlowCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptSlowCount()
        {
            return ExceptField("slowCount");
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder WithSlowDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalReportObjectTypeQueryBuilder ExceptSlowDuration()
        {
            return ExceptField("slowDuration");
        }
    }

    public partial class MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "physicalDamage" },
                new GraphQlFieldMetadata { Name = "magicalDamage" },
                new GraphQlFieldMetadata { Name = "pureDamage" },
                new GraphQlFieldMetadata { Name = "heal" },
                new GraphQlFieldMetadata { Name = "stunCount" },
                new GraphQlFieldMetadata { Name = "stunDuration" },
                new GraphQlFieldMetadata { Name = "disableCount" },
                new GraphQlFieldMetadata { Name = "disableDuration" },
                new GraphQlFieldMetadata { Name = "slowCount" },
                new GraphQlFieldMetadata { Name = "slowDuration" }
            };

        protected override string TypeName { get { return "MatchPlayerHeroDamageTotalRecievedReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithPhysicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptPhysicalDamage()
        {
            return ExceptField("physicalDamage");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithMagicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptMagicalDamage()
        {
            return ExceptField("magicalDamage");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithPureDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptPureDamage()
        {
            return ExceptField("pureDamage");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithHeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heal", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptHeal()
        {
            return ExceptField("heal");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithStunCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptStunCount()
        {
            return ExceptField("stunCount");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithStunDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptStunDuration()
        {
            return ExceptField("stunDuration");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithDisableCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptDisableCount()
        {
            return ExceptField("disableCount");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithDisableDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptDisableDuration()
        {
            return ExceptField("disableDuration");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithSlowCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptSlowCount()
        {
            return ExceptField("slowCount");
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder WithSlowDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTotalRecievedReportObjectTypeQueryBuilder ExceptSlowDuration()
        {
            return ExceptField("slowDuration");
        }
    }

    public partial class MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "amount" }
            };

        protected override string TypeName { get { return "MatchPlayerHeroDamageTargetReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageTargetReportObjectTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }
    }

    public partial class MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "amount" }
            };

        protected override string TypeName { get { return "MatchPlayerHeroDamageSourceAbilityReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageSourceAbilityReportObjectTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }
    }

    public partial class MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "amount" }
            };

        protected override string TypeName { get { return "MatchPlayerHeroDamageSourceItemReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerHeroDamageSourceItemReportObjectTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }
    }

    public partial class MatchPlayerInventoryTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerInventoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "item0", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item1", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item2", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item3", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item4", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item5", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack0", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack1", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack2", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "neutral0", IsComplex = true, QueryBuilderType = typeof(MatchPlayerInventoryObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerInventoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerInventoryTypeQueryBuilder WithItem0(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item0", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptItem0()
        {
            return ExceptField("item0");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithItem1(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item1", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptItem1()
        {
            return ExceptField("item1");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithItem2(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item2", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptItem2()
        {
            return ExceptField("item2");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithItem3(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item3", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptItem3()
        {
            return ExceptField("item3");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithItem4(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item4", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptItem4()
        {
            return ExceptField("item4");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithItem5(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item5", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptItem5()
        {
            return ExceptField("item5");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithBackPack0(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack0", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptBackPack0()
        {
            return ExceptField("backPack0");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithBackPack1(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack1", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptBackPack1()
        {
            return ExceptField("backPack1");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithBackPack2(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack2", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptBackPack2()
        {
            return ExceptField("backPack2");
        }

        public MatchPlayerInventoryTypeQueryBuilder WithNeutral0(MatchPlayerInventoryObjectTypeQueryBuilder matchPlayerInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("neutral0", alias, matchPlayerInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryTypeQueryBuilder ExceptNeutral0()
        {
            return ExceptField("neutral0");
        }
    }

    public partial class MatchPlayerInventoryObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerInventoryObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "charges" },
                new GraphQlFieldMetadata { Name = "secondaryCharges" }
            };

        protected override string TypeName { get { return "MatchPlayerInventoryObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerInventoryObjectTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryObjectTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public MatchPlayerInventoryObjectTypeQueryBuilder WithCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("charges", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryObjectTypeQueryBuilder ExceptCharges()
        {
            return ExceptField("charges");
        }

        public MatchPlayerInventoryObjectTypeQueryBuilder WithSecondaryCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryCharges", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerInventoryObjectTypeQueryBuilder ExceptSecondaryCharges()
        {
            return ExceptField("secondaryCharges");
        }
    }

    public partial class MatchPlayerStatsBuffEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerStatsBuffEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "stackCount" }
            };

        protected override string TypeName { get { return "MatchPlayerStatsBuffEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerStatsBuffEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder WithStackCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stackCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerStatsBuffEventTypeQueryBuilder ExceptStackCount()
        {
            return ExceptField("stackCount");
        }
    }

    public partial class MatchPlayerSpiritBearInventoryTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerSpiritBearInventoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" },
                new GraphQlFieldMetadata { Name = "backPack0Id" },
                new GraphQlFieldMetadata { Name = "backPack1Id" },
                new GraphQlFieldMetadata { Name = "backPack2Id" },
                new GraphQlFieldMetadata { Name = "neutral0Id" }
            };

        protected override string TypeName { get { return "MatchPlayerSpiritBearInventoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithBackPack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backPack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptBackPack0Id()
        {
            return ExceptField("backPack0Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithBackPack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backPack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptBackPack1Id()
        {
            return ExceptField("backPack1Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithBackPack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backPack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptBackPack2Id()
        {
            return ExceptField("backPack2Id");
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder WithNeutral0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutral0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpiritBearInventoryTypeQueryBuilder ExceptNeutral0Id()
        {
            return ExceptField("neutral0Id");
        }
    }

    public partial class MatchPlayerWardDestuctionObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerWardDestuctionObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "experience" },
                new GraphQlFieldMetadata { Name = "isWard" }
            };

        protected override string TypeName { get { return "MatchPlayerWardDestuctionObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder WithExperience(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experience", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder ExceptExperience()
        {
            return ExceptField("experience");
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder WithIsWard(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isWard", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerWardDestuctionObjectTypeQueryBuilder ExceptIsWard()
        {
            return ExceptField("isWard");
        }
    }

    public partial class MatchPlayerPlaybackDataTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerPlaybackDataTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityLearnEvents", IsComplex = true, QueryBuilderType = typeof(AbilityLearnEventsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilityUsedEvents", IsComplex = true, QueryBuilderType = typeof(AbilityUsedEventsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilityActiveLists", IsComplex = true, QueryBuilderType = typeof(AbilityActiveListTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemUsedEvents", IsComplex = true, QueryBuilderType = typeof(ItemUsedEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerUpdatePositionEvents", IsComplex = true, QueryBuilderType = typeof(PlayerUpdatePositionDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerUpdateGoldEvents", IsComplex = true, QueryBuilderType = typeof(PlayerUpdateGoldDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerUpdateAttributeEvents", IsComplex = true, QueryBuilderType = typeof(PlayerUpdateAttributeDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerUpdateLevelEvents", IsComplex = true, QueryBuilderType = typeof(PlayerUpdateLevelDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerUpdateHealthEvents", IsComplex = true, QueryBuilderType = typeof(PlayerUpdateHealthDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerUpdateBattleEvents", IsComplex = true, QueryBuilderType = typeof(PlayerUpdateBattleDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "killEvents", IsComplex = true, QueryBuilderType = typeof(KillDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deathEvents", IsComplex = true, QueryBuilderType = typeof(DeathDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "assistEvents", IsComplex = true, QueryBuilderType = typeof(AssistDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "csEvents", IsComplex = true, QueryBuilderType = typeof(LastHitDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "goldEvents", IsComplex = true, QueryBuilderType = typeof(GoldDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "experienceEvents", IsComplex = true, QueryBuilderType = typeof(ExperienceDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "healEvents", IsComplex = true, QueryBuilderType = typeof(HealDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroDamageEvents", IsComplex = true, QueryBuilderType = typeof(HeroDamageDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "towerDamageEvents", IsComplex = true, QueryBuilderType = typeof(TowerDamageDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "inventoryEvents", IsComplex = true, QueryBuilderType = typeof(InventoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "purchaseEvents", IsComplex = true, QueryBuilderType = typeof(ItemPurchaseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyBackEvents", IsComplex = true, QueryBuilderType = typeof(BuyBackDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "streakEvents", IsComplex = true, QueryBuilderType = typeof(StreakEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "runeEvents", IsComplex = true, QueryBuilderType = typeof(PlayerRuneDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spiritBearInventoryEvents", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlayerPlaybackDataType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerPlaybackDataTypeQueryBuilder WithAbilityLearnEvents(AbilityLearnEventsTypeQueryBuilder abilityLearnEventsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("abilityLearnEvents", alias, abilityLearnEventsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptAbilityLearnEvents()
        {
            return ExceptField("abilityLearnEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithAbilityUsedEvents(AbilityUsedEventsTypeQueryBuilder abilityUsedEventsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("abilityUsedEvents", alias, abilityUsedEventsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptAbilityUsedEvents()
        {
            return ExceptField("abilityUsedEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithAbilityActiveLists(AbilityActiveListTypeQueryBuilder abilityActiveListTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("abilityActiveLists", alias, abilityActiveListTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptAbilityActiveLists()
        {
            return ExceptField("abilityActiveLists");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithItemUsedEvents(ItemUsedEventTypeQueryBuilder itemUsedEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("itemUsedEvents", alias, itemUsedEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptItemUsedEvents()
        {
            return ExceptField("itemUsedEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPlayerUpdatePositionEvents(PlayerUpdatePositionDetailTypeQueryBuilder playerUpdatePositionDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerUpdatePositionEvents", alias, playerUpdatePositionDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPlayerUpdatePositionEvents()
        {
            return ExceptField("playerUpdatePositionEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPlayerUpdateGoldEvents(PlayerUpdateGoldDetailTypeQueryBuilder playerUpdateGoldDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerUpdateGoldEvents", alias, playerUpdateGoldDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPlayerUpdateGoldEvents()
        {
            return ExceptField("playerUpdateGoldEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPlayerUpdateAttributeEvents(PlayerUpdateAttributeDetailTypeQueryBuilder playerUpdateAttributeDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerUpdateAttributeEvents", alias, playerUpdateAttributeDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPlayerUpdateAttributeEvents()
        {
            return ExceptField("playerUpdateAttributeEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPlayerUpdateLevelEvents(PlayerUpdateLevelDetailTypeQueryBuilder playerUpdateLevelDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerUpdateLevelEvents", alias, playerUpdateLevelDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPlayerUpdateLevelEvents()
        {
            return ExceptField("playerUpdateLevelEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPlayerUpdateHealthEvents(PlayerUpdateHealthDetailTypeQueryBuilder playerUpdateHealthDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerUpdateHealthEvents", alias, playerUpdateHealthDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPlayerUpdateHealthEvents()
        {
            return ExceptField("playerUpdateHealthEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPlayerUpdateBattleEvents(PlayerUpdateBattleDetailTypeQueryBuilder playerUpdateBattleDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerUpdateBattleEvents", alias, playerUpdateBattleDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPlayerUpdateBattleEvents()
        {
            return ExceptField("playerUpdateBattleEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithKillEvents(KillDetailTypeQueryBuilder killDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("killEvents", alias, killDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptKillEvents()
        {
            return ExceptField("killEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithDeathEvents(DeathDetailTypeQueryBuilder deathDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deathEvents", alias, deathDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptDeathEvents()
        {
            return ExceptField("deathEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithAssistEvents(AssistDetailTypeQueryBuilder assistDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("assistEvents", alias, assistDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptAssistEvents()
        {
            return ExceptField("assistEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithCsEvents(LastHitDetailTypeQueryBuilder lastHitDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("csEvents", alias, lastHitDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptCsEvents()
        {
            return ExceptField("csEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithGoldEvents(GoldDetailTypeQueryBuilder goldDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("goldEvents", alias, goldDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptGoldEvents()
        {
            return ExceptField("goldEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithExperienceEvents(ExperienceDetailTypeQueryBuilder experienceDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("experienceEvents", alias, experienceDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptExperienceEvents()
        {
            return ExceptField("experienceEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithHealEvents(HealDetailTypeQueryBuilder healDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("healEvents", alias, healDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptHealEvents()
        {
            return ExceptField("healEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithHeroDamageEvents(HeroDamageDetailTypeQueryBuilder heroDamageDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroDamageEvents", alias, heroDamageDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptHeroDamageEvents()
        {
            return ExceptField("heroDamageEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithTowerDamageEvents(TowerDamageDetailTypeQueryBuilder towerDamageDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerDamageEvents", alias, towerDamageDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptTowerDamageEvents()
        {
            return ExceptField("towerDamageEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithInventoryEvents(InventoryTypeQueryBuilder inventoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("inventoryEvents", alias, inventoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptInventoryEvents()
        {
            return ExceptField("inventoryEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithPurchaseEvents(ItemPurchaseTypeQueryBuilder itemPurchaseTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("purchaseEvents", alias, itemPurchaseTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptPurchaseEvents()
        {
            return ExceptField("purchaseEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithBuyBackEvents(BuyBackDetailTypeQueryBuilder buyBackDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buyBackEvents", alias, buyBackDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptBuyBackEvents()
        {
            return ExceptField("buyBackEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithStreakEvents(StreakEventTypeQueryBuilder streakEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("streakEvents", alias, streakEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptStreakEvents()
        {
            return ExceptField("streakEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithRuneEvents(PlayerRuneDetailTypeQueryBuilder playerRuneDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("runeEvents", alias, playerRuneDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptRuneEvents()
        {
            return ExceptField("runeEvents");
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder WithSpiritBearInventoryEvents(SpiritBearInventoryTypeQueryBuilder spiritBearInventoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("spiritBearInventoryEvents", alias, spiritBearInventoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerPlaybackDataTypeQueryBuilder ExceptSpiritBearInventoryEvents()
        {
            return ExceptField("spiritBearInventoryEvents");
        }
    }

    public partial class AbilityLearnEventsTypeQueryBuilder : GraphQlQueryBuilder<AbilityLearnEventsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "levelObtained" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "isUltimate" },
                new GraphQlFieldMetadata { Name = "isTalent" },
                new GraphQlFieldMetadata { Name = "isMaxLevel" }
            };

        protected override string TypeName { get { return "AbilityLearnEventsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityLearnEventsTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public AbilityLearnEventsTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public AbilityLearnEventsTypeQueryBuilder WithLevelObtained(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("levelObtained", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptLevelObtained()
        {
            return ExceptField("levelObtained");
        }

        public AbilityLearnEventsTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public AbilityLearnEventsTypeQueryBuilder WithIsUltimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isUltimate", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptIsUltimate()
        {
            return ExceptField("isUltimate");
        }

        public AbilityLearnEventsTypeQueryBuilder WithIsTalent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTalent", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptIsTalent()
        {
            return ExceptField("isTalent");
        }

        public AbilityLearnEventsTypeQueryBuilder WithIsMaxLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMaxLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityLearnEventsTypeQueryBuilder ExceptIsMaxLevel()
        {
            return ExceptField("isMaxLevel");
        }
    }

    public partial class AbilityUsedEventsTypeQueryBuilder : GraphQlQueryBuilder<AbilityUsedEventsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "target" }
            };

        protected override string TypeName { get { return "AbilityUsedEventsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityUsedEventsTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityUsedEventsTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public AbilityUsedEventsTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityUsedEventsTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public AbilityUsedEventsTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityUsedEventsTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public AbilityUsedEventsTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityUsedEventsTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public partial class AbilityActiveListTypeQueryBuilder : GraphQlQueryBuilder<AbilityActiveListTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "ability0" },
                new GraphQlFieldMetadata { Name = "ability1" },
                new GraphQlFieldMetadata { Name = "ability2" },
                new GraphQlFieldMetadata { Name = "ability3" },
                new GraphQlFieldMetadata { Name = "ability4" },
                new GraphQlFieldMetadata { Name = "ability5" },
                new GraphQlFieldMetadata { Name = "ability6" },
                new GraphQlFieldMetadata { Name = "ability7" }
            };

        protected override string TypeName { get { return "AbilityActiveListType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityActiveListTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility0(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability0", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility0()
        {
            return ExceptField("ability0");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability1", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility1()
        {
            return ExceptField("ability1");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability2", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility2()
        {
            return ExceptField("ability2");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility3(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability3", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility3()
        {
            return ExceptField("ability3");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility4(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability4", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility4()
        {
            return ExceptField("ability4");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility5(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability5", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility5()
        {
            return ExceptField("ability5");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility6(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability6", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility6()
        {
            return ExceptField("ability6");
        }

        public AbilityActiveListTypeQueryBuilder WithAbility7(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ability7", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityActiveListTypeQueryBuilder ExceptAbility7()
        {
            return ExceptField("ability7");
        }
    }

    public partial class ItemUsedEventTypeQueryBuilder : GraphQlQueryBuilder<ItemUsedEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "target" }
            };

        protected override string TypeName { get { return "ItemUsedEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemUsedEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemUsedEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public ItemUsedEventTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemUsedEventTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public ItemUsedEventTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemUsedEventTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public ItemUsedEventTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemUsedEventTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }
    }

    public partial class PlayerUpdatePositionDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerUpdatePositionDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "x" },
                new GraphQlFieldMetadata { Name = "y" }
            };

        protected override string TypeName { get { return "PlayerUpdatePositionDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerUpdatePositionDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdatePositionDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerUpdatePositionDetailTypeQueryBuilder WithX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("x", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdatePositionDetailTypeQueryBuilder ExceptX()
        {
            return ExceptField("x");
        }

        public PlayerUpdatePositionDetailTypeQueryBuilder WithY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("y", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdatePositionDetailTypeQueryBuilder ExceptY()
        {
            return ExceptField("y");
        }
    }

    public partial class PlayerUpdateGoldDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerUpdateGoldDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "unreliableGold" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "networthDifference" }
            };

        protected override string TypeName { get { return "PlayerUpdateGoldDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerUpdateGoldDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder WithUnreliableGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unreliableGold", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder ExceptUnreliableGold()
        {
            return ExceptField("unreliableGold");
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder WithNetworthDifference(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networthDifference", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateGoldDetailTypeQueryBuilder ExceptNetworthDifference()
        {
            return ExceptField("networthDifference");
        }
    }

    public partial class PlayerUpdateAttributeDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerUpdateAttributeDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "agi" },
                new GraphQlFieldMetadata { Name = "int" },
                new GraphQlFieldMetadata { Name = "str" }
            };

        protected override string TypeName { get { return "PlayerUpdateAttributeDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerUpdateAttributeDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder WithAgi(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("agi", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder ExceptAgi()
        {
            return ExceptField("agi");
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder WithInt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("int", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder ExceptInt()
        {
            return ExceptField("int");
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder WithStr(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("str", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateAttributeDetailTypeQueryBuilder ExceptStr()
        {
            return ExceptField("str");
        }
    }

    public partial class PlayerUpdateLevelDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerUpdateLevelDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "PlayerUpdateLevelDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerUpdateLevelDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateLevelDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerUpdateLevelDetailTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateLevelDetailTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public partial class PlayerUpdateHealthDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerUpdateHealthDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "hp" },
                new GraphQlFieldMetadata { Name = "maxHp" },
                new GraphQlFieldMetadata { Name = "mp" },
                new GraphQlFieldMetadata { Name = "maxMp" }
            };

        protected override string TypeName { get { return "PlayerUpdateHealthDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerUpdateHealthDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder WithHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder ExceptHp()
        {
            return ExceptField("hp");
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder WithMaxHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxHp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder ExceptMaxHp()
        {
            return ExceptField("maxHp");
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder WithMp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder ExceptMp()
        {
            return ExceptField("mp");
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder WithMaxMp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxMp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateHealthDetailTypeQueryBuilder ExceptMaxMp()
        {
            return ExceptField("maxMp");
        }
    }

    public partial class PlayerUpdateBattleDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerUpdateBattleDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "damageMinMax" },
                new GraphQlFieldMetadata { Name = "damageBonus" },
                new GraphQlFieldMetadata { Name = "hpRegen" },
                new GraphQlFieldMetadata { Name = "mpRegen" }
            };

        protected override string TypeName { get { return "PlayerUpdateBattleDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerUpdateBattleDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder WithDamageMinMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageMinMax", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder ExceptDamageMinMax()
        {
            return ExceptField("damageMinMax");
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder WithDamageBonus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageBonus", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder ExceptDamageBonus()
        {
            return ExceptField("damageBonus");
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder WithHpRegen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hpRegen", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder ExceptHpRegen()
        {
            return ExceptField("hpRegen");
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder WithMpRegen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mpRegen", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerUpdateBattleDetailTypeQueryBuilder ExceptMpRegen()
        {
            return ExceptField("mpRegen");
        }
    }

    public partial class KillDetailTypeQueryBuilder : GraphQlQueryBuilder<KillDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "isFromIllusion" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "assist", IsComplex = true },
                new GraphQlFieldMetadata { Name = "isSolo" },
                new GraphQlFieldMetadata { Name = "isGank" },
                new GraphQlFieldMetadata { Name = "isInvisible" },
                new GraphQlFieldMetadata { Name = "isSmoke" },
                new GraphQlFieldMetadata { Name = "isTpRecently" },
                new GraphQlFieldMetadata { Name = "isRuneEffected" }
            };

        protected override string TypeName { get { return "KillDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public KillDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public KillDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public KillDetailTypeQueryBuilder WithIsFromIllusion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFromIllusion", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsFromIllusion()
        {
            return ExceptField("isFromIllusion");
        }

        public KillDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public KillDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public KillDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public KillDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public KillDetailTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public KillDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public KillDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public KillDetailTypeQueryBuilder WithAssist(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assist", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptAssist()
        {
            return ExceptField("assist");
        }

        public KillDetailTypeQueryBuilder WithIsSolo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSolo", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsSolo()
        {
            return ExceptField("isSolo");
        }

        public KillDetailTypeQueryBuilder WithIsGank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isGank", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsGank()
        {
            return ExceptField("isGank");
        }

        public KillDetailTypeQueryBuilder WithIsInvisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isInvisible", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsInvisible()
        {
            return ExceptField("isInvisible");
        }

        public KillDetailTypeQueryBuilder WithIsSmoke(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSmoke", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsSmoke()
        {
            return ExceptField("isSmoke");
        }

        public KillDetailTypeQueryBuilder WithIsTpRecently(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTpRecently", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsTpRecently()
        {
            return ExceptField("isTpRecently");
        }

        public KillDetailTypeQueryBuilder WithIsRuneEffected(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRuneEffected", alias, new GraphQlDirective[] { include, skip });
        }

        public KillDetailTypeQueryBuilder ExceptIsRuneEffected()
        {
            return ExceptField("isRuneEffected");
        }
    }

    public partial class DeathDetailTypeQueryBuilder : GraphQlQueryBuilder<DeathDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "isFromIllusion" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "goldFed" },
                new GraphQlFieldMetadata { Name = "xpFed" },
                new GraphQlFieldMetadata { Name = "timeDead" },
                new GraphQlFieldMetadata { Name = "reliableGold" },
                new GraphQlFieldMetadata { Name = "unreliableGold" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "goldLost" },
                new GraphQlFieldMetadata { Name = "assist", IsComplex = true },
                new GraphQlFieldMetadata { Name = "isWardWalkThrough" },
                new GraphQlFieldMetadata { Name = "isAttemptTpOut" },
                new GraphQlFieldMetadata { Name = "isDieBack" },
                new GraphQlFieldMetadata { Name = "isBurst" },
                new GraphQlFieldMetadata { Name = "isEngagedOnDeath" },
                new GraphQlFieldMetadata { Name = "hasHealAvailable" },
                new GraphQlFieldMetadata { Name = "isTracked" },
                new GraphQlFieldMetadata { Name = "isFeed" }
            };

        protected override string TypeName { get { return "DeathDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeathDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public DeathDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public DeathDetailTypeQueryBuilder WithIsFromIllusion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFromIllusion", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsFromIllusion()
        {
            return ExceptField("isFromIllusion");
        }

        public DeathDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public DeathDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public DeathDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public DeathDetailTypeQueryBuilder WithGoldFed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldFed", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptGoldFed()
        {
            return ExceptField("goldFed");
        }

        public DeathDetailTypeQueryBuilder WithXpFed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpFed", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptXpFed()
        {
            return ExceptField("xpFed");
        }

        public DeathDetailTypeQueryBuilder WithTimeDead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeDead", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptTimeDead()
        {
            return ExceptField("timeDead");
        }

        public DeathDetailTypeQueryBuilder WithReliableGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reliableGold", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptReliableGold()
        {
            return ExceptField("reliableGold");
        }

        public DeathDetailTypeQueryBuilder WithUnreliableGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unreliableGold", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptUnreliableGold()
        {
            return ExceptField("unreliableGold");
        }

        public DeathDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public DeathDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public DeathDetailTypeQueryBuilder WithGoldLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldLost", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptGoldLost()
        {
            return ExceptField("goldLost");
        }

        public DeathDetailTypeQueryBuilder WithAssist(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assist", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptAssist()
        {
            return ExceptField("assist");
        }

        public DeathDetailTypeQueryBuilder WithIsWardWalkThrough(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isWardWalkThrough", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsWardWalkThrough()
        {
            return ExceptField("isWardWalkThrough");
        }

        public DeathDetailTypeQueryBuilder WithIsAttemptTpOut(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAttemptTpOut", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsAttemptTpOut()
        {
            return ExceptField("isAttemptTpOut");
        }

        public DeathDetailTypeQueryBuilder WithIsDieBack(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDieBack", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsDieBack()
        {
            return ExceptField("isDieBack");
        }

        public DeathDetailTypeQueryBuilder WithIsBurst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBurst", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsBurst()
        {
            return ExceptField("isBurst");
        }

        public DeathDetailTypeQueryBuilder WithIsEngagedOnDeath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isEngagedOnDeath", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsEngagedOnDeath()
        {
            return ExceptField("isEngagedOnDeath");
        }

        public DeathDetailTypeQueryBuilder WithHasHealAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasHealAvailable", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptHasHealAvailable()
        {
            return ExceptField("hasHealAvailable");
        }

        public DeathDetailTypeQueryBuilder WithIsTracked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTracked", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsTracked()
        {
            return ExceptField("isTracked");
        }

        public DeathDetailTypeQueryBuilder WithIsFeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFeed", alias, new GraphQlDirective[] { include, skip });
        }

        public DeathDetailTypeQueryBuilder ExceptIsFeed()
        {
            return ExceptField("isFeed");
        }
    }

    public partial class AssistDetailTypeQueryBuilder : GraphQlQueryBuilder<AssistDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "subTime" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "AssistDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AssistDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public AssistDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public AssistDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public AssistDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public AssistDetailTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public AssistDetailTypeQueryBuilder WithSubTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptSubTime()
        {
            return ExceptField("subTime");
        }

        public AssistDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public AssistDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public AssistDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class LastHitDetailTypeQueryBuilder : GraphQlQueryBuilder<LastHitDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "isFromIllusion" },
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "isCreep" },
                new GraphQlFieldMetadata { Name = "isNeutral" },
                new GraphQlFieldMetadata { Name = "isAncient" },
                new GraphQlFieldMetadata { Name = "mapLocation" }
            };

        protected override string TypeName { get { return "LastHitDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LastHitDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public LastHitDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public LastHitDetailTypeQueryBuilder WithIsFromIllusion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFromIllusion", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptIsFromIllusion()
        {
            return ExceptField("isFromIllusion");
        }

        public LastHitDetailTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public LastHitDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public LastHitDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public LastHitDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public LastHitDetailTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public LastHitDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public LastHitDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public LastHitDetailTypeQueryBuilder WithIsCreep(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCreep", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptIsCreep()
        {
            return ExceptField("isCreep");
        }

        public LastHitDetailTypeQueryBuilder WithIsNeutral(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isNeutral", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptIsNeutral()
        {
            return ExceptField("isNeutral");
        }

        public LastHitDetailTypeQueryBuilder WithIsAncient(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAncient", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptIsAncient()
        {
            return ExceptField("isAncient");
        }

        public LastHitDetailTypeQueryBuilder WithMapLocation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mapLocation", alias, new GraphQlDirective[] { include, skip });
        }

        public LastHitDetailTypeQueryBuilder ExceptMapLocation()
        {
            return ExceptField("mapLocation");
        }
    }

    public partial class GoldDetailTypeQueryBuilder : GraphQlQueryBuilder<GoldDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "amount" },
                new GraphQlFieldMetadata { Name = "reason" },
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "isValidForStats" }
            };

        protected override string TypeName { get { return "GoldDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GoldDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public GoldDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public GoldDetailTypeQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public GoldDetailTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public GoldDetailTypeQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public GoldDetailTypeQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public GoldDetailTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public GoldDetailTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public GoldDetailTypeQueryBuilder WithIsValidForStats(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValidForStats", alias, new GraphQlDirective[] { include, skip });
        }

        public GoldDetailTypeQueryBuilder ExceptIsValidForStats()
        {
            return ExceptField("isValidForStats");
        }
    }

    public partial class ExperienceDetailTypeQueryBuilder : GraphQlQueryBuilder<ExperienceDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "amount" },
                new GraphQlFieldMetadata { Name = "reason" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "ExperienceDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ExperienceDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public ExperienceDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public ExperienceDetailTypeQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("amount", alias, new GraphQlDirective[] { include, skip });
        }

        public ExperienceDetailTypeQueryBuilder ExceptAmount()
        {
            return ExceptField("amount");
        }

        public ExperienceDetailTypeQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reason", alias, new GraphQlDirective[] { include, skip });
        }

        public ExperienceDetailTypeQueryBuilder ExceptReason()
        {
            return ExceptField("reason");
        }

        public ExperienceDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public ExperienceDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public ExperienceDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public ExperienceDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class HealDetailTypeQueryBuilder : GraphQlQueryBuilder<HealDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" }
            };

        protected override string TypeName { get { return "HealDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HealDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HealDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HealDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public HealDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public HealDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public HealDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public HealDetailTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public HealDetailTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public HealDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public HealDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public HealDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public HealDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }
    }

    public partial class HeroDamageDetailTypeQueryBuilder : GraphQlQueryBuilder<HeroDamageDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "target" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "damageType" },
                new GraphQlFieldMetadata { Name = "fromNpc" },
                new GraphQlFieldMetadata { Name = "toNpc" },
                new GraphQlFieldMetadata { Name = "fromIllusion" },
                new GraphQlFieldMetadata { Name = "toIllusion" },
                new GraphQlFieldMetadata { Name = "isPhysicalAttack" },
                new GraphQlFieldMetadata { Name = "isSourceMainHero" },
                new GraphQlFieldMetadata { Name = "isTargetMainHero" }
            };

        protected override string TypeName { get { return "HeroDamageDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroDamageDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroDamageDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public HeroDamageDetailTypeQueryBuilder WithTarget(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("target", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptTarget()
        {
            return ExceptField("target");
        }

        public HeroDamageDetailTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public HeroDamageDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public HeroDamageDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public HeroDamageDetailTypeQueryBuilder WithDamageType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageType", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptDamageType()
        {
            return ExceptField("damageType");
        }

        public HeroDamageDetailTypeQueryBuilder WithFromNpc(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fromNpc", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptFromNpc()
        {
            return ExceptField("fromNpc");
        }

        public HeroDamageDetailTypeQueryBuilder WithToNpc(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("toNpc", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptToNpc()
        {
            return ExceptField("toNpc");
        }

        public HeroDamageDetailTypeQueryBuilder WithFromIllusion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fromIllusion", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptFromIllusion()
        {
            return ExceptField("fromIllusion");
        }

        public HeroDamageDetailTypeQueryBuilder WithToIllusion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("toIllusion", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptToIllusion()
        {
            return ExceptField("toIllusion");
        }

        public HeroDamageDetailTypeQueryBuilder WithIsPhysicalAttack(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPhysicalAttack", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptIsPhysicalAttack()
        {
            return ExceptField("isPhysicalAttack");
        }

        public HeroDamageDetailTypeQueryBuilder WithIsSourceMainHero(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSourceMainHero", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptIsSourceMainHero()
        {
            return ExceptField("isSourceMainHero");
        }

        public HeroDamageDetailTypeQueryBuilder WithIsTargetMainHero(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTargetMainHero", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDamageDetailTypeQueryBuilder ExceptIsTargetMainHero()
        {
            return ExceptField("isTargetMainHero");
        }
    }

    public partial class TowerDamageDetailTypeQueryBuilder : GraphQlQueryBuilder<TowerDamageDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "attacker" },
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "damage" },
                new GraphQlFieldMetadata { Name = "byAbility" },
                new GraphQlFieldMetadata { Name = "byItem" },
                new GraphQlFieldMetadata { Name = "fromNpc" }
            };

        protected override string TypeName { get { return "TowerDamageDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TowerDamageDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public TowerDamageDetailTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }

        public TowerDamageDetailTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public TowerDamageDetailTypeQueryBuilder WithDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damage", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptDamage()
        {
            return ExceptField("damage");
        }

        public TowerDamageDetailTypeQueryBuilder WithByAbility(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byAbility", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptByAbility()
        {
            return ExceptField("byAbility");
        }

        public TowerDamageDetailTypeQueryBuilder WithByItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("byItem", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptByItem()
        {
            return ExceptField("byItem");
        }

        public TowerDamageDetailTypeQueryBuilder WithFromNpc(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fromNpc", alias, new GraphQlDirective[] { include, skip });
        }

        public TowerDamageDetailTypeQueryBuilder ExceptFromNpc()
        {
            return ExceptField("fromNpc");
        }
    }

    public partial class InventoryTypeQueryBuilder : GraphQlQueryBuilder<InventoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "item0", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item1", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item2", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item3", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item4", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item5", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack0", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack1", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack2", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teleport0", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "neutral0", IsComplex = true, QueryBuilderType = typeof(InventoryObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "InventoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InventoryTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public InventoryTypeQueryBuilder WithItem0(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item0", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptItem0()
        {
            return ExceptField("item0");
        }

        public InventoryTypeQueryBuilder WithItem1(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item1", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptItem1()
        {
            return ExceptField("item1");
        }

        public InventoryTypeQueryBuilder WithItem2(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item2", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptItem2()
        {
            return ExceptField("item2");
        }

        public InventoryTypeQueryBuilder WithItem3(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item3", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptItem3()
        {
            return ExceptField("item3");
        }

        public InventoryTypeQueryBuilder WithItem4(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item4", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptItem4()
        {
            return ExceptField("item4");
        }

        public InventoryTypeQueryBuilder WithItem5(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item5", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptItem5()
        {
            return ExceptField("item5");
        }

        public InventoryTypeQueryBuilder WithBackPack0(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack0", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptBackPack0()
        {
            return ExceptField("backPack0");
        }

        public InventoryTypeQueryBuilder WithBackPack1(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack1", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptBackPack1()
        {
            return ExceptField("backPack1");
        }

        public InventoryTypeQueryBuilder WithBackPack2(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack2", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptBackPack2()
        {
            return ExceptField("backPack2");
        }

        public InventoryTypeQueryBuilder WithTeleport0(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teleport0", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptTeleport0()
        {
            return ExceptField("teleport0");
        }

        public InventoryTypeQueryBuilder WithNeutral0(InventoryObjectTypeQueryBuilder inventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("neutral0", alias, inventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InventoryTypeQueryBuilder ExceptNeutral0()
        {
            return ExceptField("neutral0");
        }
    }

    public partial class InventoryObjectTypeQueryBuilder : GraphQlQueryBuilder<InventoryObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "charges" },
                new GraphQlFieldMetadata { Name = "secondaryCharges" }
            };

        protected override string TypeName { get { return "InventoryObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InventoryObjectTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public InventoryObjectTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public InventoryObjectTypeQueryBuilder WithCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("charges", alias, new GraphQlDirective[] { include, skip });
        }

        public InventoryObjectTypeQueryBuilder ExceptCharges()
        {
            return ExceptField("charges");
        }

        public InventoryObjectTypeQueryBuilder WithSecondaryCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondaryCharges", alias, new GraphQlDirective[] { include, skip });
        }

        public InventoryObjectTypeQueryBuilder ExceptSecondaryCharges()
        {
            return ExceptField("secondaryCharges");
        }
    }

    public partial class ItemPurchaseTypeQueryBuilder : GraphQlQueryBuilder<ItemPurchaseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "itemId" }
            };

        protected override string TypeName { get { return "ItemPurchaseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemPurchaseTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemPurchaseTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public ItemPurchaseTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemPurchaseTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }
    }

    public partial class BuyBackDetailTypeQueryBuilder : GraphQlQueryBuilder<BuyBackDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "deathTimeRemaining" },
                new GraphQlFieldMetadata { Name = "cost" }
            };

        protected override string TypeName { get { return "BuyBackDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BuyBackDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyBackDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public BuyBackDetailTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyBackDetailTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public BuyBackDetailTypeQueryBuilder WithDeathTimeRemaining(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathTimeRemaining", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyBackDetailTypeQueryBuilder ExceptDeathTimeRemaining()
        {
            return ExceptField("deathTimeRemaining");
        }

        public BuyBackDetailTypeQueryBuilder WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyBackDetailTypeQueryBuilder ExceptCost()
        {
            return ExceptField("cost");
        }
    }

    public partial class StreakEventTypeQueryBuilder : GraphQlQueryBuilder<StreakEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "StreakEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StreakEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public StreakEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public StreakEventTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public StreakEventTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public StreakEventTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public StreakEventTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public StreakEventTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public StreakEventTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public partial class PlayerRuneDetailTypeQueryBuilder : GraphQlQueryBuilder<PlayerRuneDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "rune" },
                new GraphQlFieldMetadata { Name = "action" },
                new GraphQlFieldMetadata { Name = "gold" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" }
            };

        protected override string TypeName { get { return "PlayerRuneDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerRuneDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerRuneDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerRuneDetailTypeQueryBuilder WithRune(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rune", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerRuneDetailTypeQueryBuilder ExceptRune()
        {
            return ExceptField("rune");
        }

        public PlayerRuneDetailTypeQueryBuilder WithAction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("action", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerRuneDetailTypeQueryBuilder ExceptAction()
        {
            return ExceptField("action");
        }

        public PlayerRuneDetailTypeQueryBuilder WithGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gold", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerRuneDetailTypeQueryBuilder ExceptGold()
        {
            return ExceptField("gold");
        }

        public PlayerRuneDetailTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerRuneDetailTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public PlayerRuneDetailTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerRuneDetailTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }
    }

    public partial class SpiritBearInventoryTypeQueryBuilder : GraphQlQueryBuilder<SpiritBearInventoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "item0", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item1", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item2", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item3", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item4", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item5", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack0", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack1", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "backPack2", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teleport0", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "neutral0", IsComplex = true, QueryBuilderType = typeof(SpiritBearInventoryObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SpiritBearInventoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SpiritBearInventoryTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public SpiritBearInventoryTypeQueryBuilder WithItem0(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item0", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptItem0()
        {
            return ExceptField("item0");
        }

        public SpiritBearInventoryTypeQueryBuilder WithItem1(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item1", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptItem1()
        {
            return ExceptField("item1");
        }

        public SpiritBearInventoryTypeQueryBuilder WithItem2(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item2", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptItem2()
        {
            return ExceptField("item2");
        }

        public SpiritBearInventoryTypeQueryBuilder WithItem3(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item3", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptItem3()
        {
            return ExceptField("item3");
        }

        public SpiritBearInventoryTypeQueryBuilder WithItem4(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item4", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptItem4()
        {
            return ExceptField("item4");
        }

        public SpiritBearInventoryTypeQueryBuilder WithItem5(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item5", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptItem5()
        {
            return ExceptField("item5");
        }

        public SpiritBearInventoryTypeQueryBuilder WithBackPack0(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack0", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptBackPack0()
        {
            return ExceptField("backPack0");
        }

        public SpiritBearInventoryTypeQueryBuilder WithBackPack1(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack1", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptBackPack1()
        {
            return ExceptField("backPack1");
        }

        public SpiritBearInventoryTypeQueryBuilder WithBackPack2(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("backPack2", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptBackPack2()
        {
            return ExceptField("backPack2");
        }

        public SpiritBearInventoryTypeQueryBuilder WithTeleport0(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teleport0", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptTeleport0()
        {
            return ExceptField("teleport0");
        }

        public SpiritBearInventoryTypeQueryBuilder WithNeutral0(SpiritBearInventoryObjectTypeQueryBuilder spiritBearInventoryObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("neutral0", alias, spiritBearInventoryObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryTypeQueryBuilder ExceptNeutral0()
        {
            return ExceptField("neutral0");
        }
    }

    public partial class SpiritBearInventoryObjectTypeQueryBuilder : GraphQlQueryBuilder<SpiritBearInventoryObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "itemId" }
            };

        protected override string TypeName { get { return "SpiritBearInventoryObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SpiritBearInventoryObjectTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public SpiritBearInventoryObjectTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }
    }

    public partial class HeroPositionTimeDetailTypeQueryBuilder : GraphQlQueryBuilder<HeroPositionTimeDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "remainingMatchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "mvp" },
                new GraphQlFieldMetadata { Name = "topCore" },
                new GraphQlFieldMetadata { Name = "topSupport" },
                new GraphQlFieldMetadata { Name = "courierKills" },
                new GraphQlFieldMetadata { Name = "apm" },
                new GraphQlFieldMetadata { Name = "casts" },
                new GraphQlFieldMetadata { Name = "abilityCasts" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "dn" },
                new GraphQlFieldMetadata { Name = "neutrals" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "physicalDamage" },
                new GraphQlFieldMetadata { Name = "magicalDamage" },
                new GraphQlFieldMetadata { Name = "physicalDamageReceived" },
                new GraphQlFieldMetadata { Name = "magicalDamageReceived" },
                new GraphQlFieldMetadata { Name = "tripleKill" },
                new GraphQlFieldMetadata { Name = "ultraKill" },
                new GraphQlFieldMetadata { Name = "rampage" },
                new GraphQlFieldMetadata { Name = "godLike" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "disableCount" },
                new GraphQlFieldMetadata { Name = "disableDuration" },
                new GraphQlFieldMetadata { Name = "stunCount" },
                new GraphQlFieldMetadata { Name = "stunDuration" },
                new GraphQlFieldMetadata { Name = "slowCount" },
                new GraphQlFieldMetadata { Name = "slowDuration" },
                new GraphQlFieldMetadata { Name = "healingSelf" },
                new GraphQlFieldMetadata { Name = "healingAllies" },
                new GraphQlFieldMetadata { Name = "invisibleCount" },
                new GraphQlFieldMetadata { Name = "runePower" },
                new GraphQlFieldMetadata { Name = "runeBounty" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "campsStacked" },
                new GraphQlFieldMetadata { Name = "supportGold" },
                new GraphQlFieldMetadata { Name = "purgeModifiers" },
                new GraphQlFieldMetadata { Name = "ancients" },
                new GraphQlFieldMetadata { Name = "teamKills" },
                new GraphQlFieldMetadata { Name = "goldLost" },
                new GraphQlFieldMetadata { Name = "goldFed" },
                new GraphQlFieldMetadata { Name = "buybackCount" },
                new GraphQlFieldMetadata { Name = "weakenCount" },
                new GraphQlFieldMetadata { Name = "weakenDuration" },
                new GraphQlFieldMetadata { Name = "physicalItemDamage" },
                new GraphQlFieldMetadata { Name = "magicalItemDamage" },
                new GraphQlFieldMetadata { Name = "healingItemSelf" },
                new GraphQlFieldMetadata { Name = "healingItemAllies" },
                new GraphQlFieldMetadata { Name = "xpFed" },
                new GraphQlFieldMetadata { Name = "pureDamageReceived" },
                new GraphQlFieldMetadata { Name = "attackDamage" },
                new GraphQlFieldMetadata { Name = "attackCount" },
                new GraphQlFieldMetadata { Name = "castDamage" },
                new GraphQlFieldMetadata { Name = "damageReceived" },
                new GraphQlFieldMetadata { Name = "damage" },
                new GraphQlFieldMetadata { Name = "pureDamage" },
                new GraphQlFieldMetadata { Name = "kDAAverage" },
                new GraphQlFieldMetadata { Name = "killContributionAverage" },
                new GraphQlFieldMetadata { Name = "stompWon" },
                new GraphQlFieldMetadata { Name = "stompLost" },
                new GraphQlFieldMetadata { Name = "comeBackWon" },
                new GraphQlFieldMetadata { Name = "comeBackLost" }
            };

        protected override string TypeName { get { return "HeroPositionTimeDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroPositionTimeDetailTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithRemainingMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("remainingMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptRemainingMatchCount()
        {
            return ExceptField("remainingMatchCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithMvp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mvp", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptMvp()
        {
            return ExceptField("mvp");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithTopCore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topCore", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptTopCore()
        {
            return ExceptField("topCore");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithTopSupport(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topSupport", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptTopSupport()
        {
            return ExceptField("topSupport");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithCourierKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("courierKills", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptCourierKills()
        {
            return ExceptField("courierKills");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithApm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("apm", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptApm()
        {
            return ExceptField("apm");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithCasts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("casts", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptCasts()
        {
            return ExceptField("casts");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithAbilityCasts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityCasts", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptAbilityCasts()
        {
            return ExceptField("abilityCasts");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithDn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dn", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptDn()
        {
            return ExceptField("dn");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithNeutrals(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutrals", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptNeutrals()
        {
            return ExceptField("neutrals");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPhysicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPhysicalDamage()
        {
            return ExceptField("physicalDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithMagicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptMagicalDamage()
        {
            return ExceptField("magicalDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPhysicalDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPhysicalDamageReceived()
        {
            return ExceptField("physicalDamageReceived");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithMagicalDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptMagicalDamageReceived()
        {
            return ExceptField("magicalDamageReceived");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithTripleKill(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tripleKill", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptTripleKill()
        {
            return ExceptField("tripleKill");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithUltraKill(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ultraKill", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptUltraKill()
        {
            return ExceptField("ultraKill");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithRampage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rampage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptRampage()
        {
            return ExceptField("rampage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithGodLike(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("godLike", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptGodLike()
        {
            return ExceptField("godLike");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithDisableCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptDisableCount()
        {
            return ExceptField("disableCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithDisableDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptDisableDuration()
        {
            return ExceptField("disableDuration");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithStunCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptStunCount()
        {
            return ExceptField("stunCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithStunDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptStunDuration()
        {
            return ExceptField("stunDuration");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithSlowCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptSlowCount()
        {
            return ExceptField("slowCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithSlowDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptSlowDuration()
        {
            return ExceptField("slowDuration");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithHealingSelf(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingSelf", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptHealingSelf()
        {
            return ExceptField("healingSelf");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithHealingAllies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingAllies", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptHealingAllies()
        {
            return ExceptField("healingAllies");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithInvisibleCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("invisibleCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptInvisibleCount()
        {
            return ExceptField("invisibleCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithRunePower(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runePower", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptRunePower()
        {
            return ExceptField("runePower");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithRuneBounty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runeBounty", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptRuneBounty()
        {
            return ExceptField("runeBounty");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithCampsStacked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("campsStacked", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptCampsStacked()
        {
            return ExceptField("campsStacked");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithSupportGold(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportGold", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptSupportGold()
        {
            return ExceptField("supportGold");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPurgeModifiers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("purgeModifiers", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPurgeModifiers()
        {
            return ExceptField("purgeModifiers");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithAncients(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ancients", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptAncients()
        {
            return ExceptField("ancients");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithTeamKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamKills", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptTeamKills()
        {
            return ExceptField("teamKills");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithGoldLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldLost", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptGoldLost()
        {
            return ExceptField("goldLost");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithGoldFed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldFed", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptGoldFed()
        {
            return ExceptField("goldFed");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithBuybackCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buybackCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptBuybackCount()
        {
            return ExceptField("buybackCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithWeakenCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weakenCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptWeakenCount()
        {
            return ExceptField("weakenCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithWeakenDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weakenDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptWeakenDuration()
        {
            return ExceptField("weakenDuration");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPhysicalItemDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalItemDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPhysicalItemDamage()
        {
            return ExceptField("physicalItemDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithMagicalItemDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalItemDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptMagicalItemDamage()
        {
            return ExceptField("magicalItemDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithHealingItemSelf(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingItemSelf", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptHealingItemSelf()
        {
            return ExceptField("healingItemSelf");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithHealingItemAllies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingItemAllies", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptHealingItemAllies()
        {
            return ExceptField("healingItemAllies");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithXpFed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpFed", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptXpFed()
        {
            return ExceptField("xpFed");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPureDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPureDamageReceived()
        {
            return ExceptField("pureDamageReceived");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithAttackDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptAttackDamage()
        {
            return ExceptField("attackDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithAttackCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptAttackCount()
        {
            return ExceptField("attackCount");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithCastDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptCastDamage()
        {
            return ExceptField("castDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptDamageReceived()
        {
            return ExceptField("damageReceived");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptDamage()
        {
            return ExceptField("damage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithPureDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptPureDamage()
        {
            return ExceptField("pureDamage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithKdaAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kDAAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptKdaAverage()
        {
            return ExceptField("kDAAverage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithKillContributionAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killContributionAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptKillContributionAverage()
        {
            return ExceptField("killContributionAverage");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithStompWon(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stompWon", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptStompWon()
        {
            return ExceptField("stompWon");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithStompLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stompLost", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptStompLost()
        {
            return ExceptField("stompLost");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithComeBackWon(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("comeBackWon", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptComeBackWon()
        {
            return ExceptField("comeBackWon");
        }

        public HeroPositionTimeDetailTypeQueryBuilder WithComeBackLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("comeBackLost", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroPositionTimeDetailTypeQueryBuilder ExceptComeBackLost()
        {
            return ExceptField("comeBackLost");
        }
    }

    public partial class MatchPlayerAdditionalUnitTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerAdditionalUnitTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" },
                new GraphQlFieldMetadata { Name = "backpack0Id" },
                new GraphQlFieldMetadata { Name = "backpack1Id" },
                new GraphQlFieldMetadata { Name = "backpack2Id" },
                new GraphQlFieldMetadata { Name = "neutral0Id" }
            };

        protected override string TypeName { get { return "MatchPlayerAdditionalUnitType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithBackpack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptBackpack0Id()
        {
            return ExceptField("backpack0Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithBackpack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptBackpack1Id()
        {
            return ExceptField("backpack1Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithBackpack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptBackpack2Id()
        {
            return ExceptField("backpack2Id");
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder WithNeutral0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutral0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerAdditionalUnitTypeQueryBuilder ExceptNeutral0Id()
        {
            return ExceptField("neutral0Id");
        }
    }

    public partial class PlayerAbilityTypeQueryBuilder : GraphQlQueryBuilder<PlayerAbilityTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "abilityType", IsComplex = true, QueryBuilderType = typeof(AbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isTalent" }
            };

        protected override string TypeName { get { return "PlayerAbilityType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerAbilityTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public PlayerAbilityTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerAbilityTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public PlayerAbilityTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public PlayerAbilityTypeQueryBuilder WithAbilityType(AbilityTypeQueryBuilder abilityTypeQueryBuilder, QueryBuilderParameter<int?> gameVerionId = null, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVerionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVerionId", ArgumentValue = gameVerionId} );

            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("abilityType", alias, abilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerAbilityTypeQueryBuilder ExceptAbilityType()
        {
            return ExceptField("abilityType");
        }

        public PlayerAbilityTypeQueryBuilder WithIsTalent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTalent", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptIsTalent()
        {
            return ExceptField("isTalent");
        }
    }

    public partial class MatchStatsPickBanTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsPickBanTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isPick" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "bannedHeroId" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "playerIndex" },
                new GraphQlFieldMetadata { Name = "wasBannedSuccessfully" },
                new GraphQlFieldMetadata { Name = "isCaptain" },
                new GraphQlFieldMetadata { Name = "baseWinRate" },
                new GraphQlFieldMetadata { Name = "adjustedWinRate" },
                new GraphQlFieldMetadata { Name = "letter" }
            };

        protected override string TypeName { get { return "MatchStatsPickBanType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsPickBanTypeQueryBuilder WithIsPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptIsPick()
        {
            return ExceptField("isPick");
        }

        public MatchStatsPickBanTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchStatsPickBanTypeQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public MatchStatsPickBanTypeQueryBuilder WithBannedHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannedHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptBannedHeroId()
        {
            return ExceptField("bannedHeroId");
        }

        public MatchStatsPickBanTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchStatsPickBanTypeQueryBuilder WithPlayerIndex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerIndex", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptPlayerIndex()
        {
            return ExceptField("playerIndex");
        }

        public MatchStatsPickBanTypeQueryBuilder WithWasBannedSuccessfully(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wasBannedSuccessfully", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptWasBannedSuccessfully()
        {
            return ExceptField("wasBannedSuccessfully");
        }

        public MatchStatsPickBanTypeQueryBuilder WithIsCaptain(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCaptain", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptIsCaptain()
        {
            return ExceptField("isCaptain");
        }

        public MatchStatsPickBanTypeQueryBuilder WithBaseWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("baseWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptBaseWinRate()
        {
            return ExceptField("baseWinRate");
        }

        public MatchStatsPickBanTypeQueryBuilder WithAdjustedWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("adjustedWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptAdjustedWinRate()
        {
            return ExceptField("adjustedWinRate");
        }

        public MatchStatsPickBanTypeQueryBuilder WithLetter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("letter", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsPickBanTypeQueryBuilder ExceptLetter()
        {
            return ExceptField("letter");
        }
    }

    public partial class MatchStatsTowerReportTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsTowerReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "towers", IsComplex = true, QueryBuilderType = typeof(MatchStatsTowerReportObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "outposts", IsComplex = true, QueryBuilderType = typeof(MatchStatsOutpostReportObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchStatsTowerReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsTowerReportTypeQueryBuilder WithTowers(MatchStatsTowerReportObjectTypeQueryBuilder matchStatsTowerReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towers", alias, matchStatsTowerReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerReportTypeQueryBuilder ExceptTowers()
        {
            return ExceptField("towers");
        }

        public MatchStatsTowerReportTypeQueryBuilder WithOutposts(MatchStatsOutpostReportObjectTypeQueryBuilder matchStatsOutpostReportObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("outposts", alias, matchStatsOutpostReportObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerReportTypeQueryBuilder ExceptOutposts()
        {
            return ExceptField("outposts");
        }
    }

    public partial class MatchStatsTowerReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsTowerReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "hp" }
            };

        protected override string TypeName { get { return "MatchStatsTowerReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsTowerReportObjectTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerReportObjectTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public MatchStatsTowerReportObjectTypeQueryBuilder WithHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerReportObjectTypeQueryBuilder ExceptHp()
        {
            return ExceptField("hp");
        }
    }

    public partial class MatchStatsOutpostReportObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsOutpostReportObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "isControlledByRadiant" },
                new GraphQlFieldMetadata { Name = "isRadiantSide" }
            };

        protected override string TypeName { get { return "MatchStatsOutpostReportObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsOutpostReportObjectTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsOutpostReportObjectTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public MatchStatsOutpostReportObjectTypeQueryBuilder WithIsControlledByRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isControlledByRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsOutpostReportObjectTypeQueryBuilder ExceptIsControlledByRadiant()
        {
            return ExceptField("isControlledByRadiant");
        }

        public MatchStatsOutpostReportObjectTypeQueryBuilder WithIsRadiantSide(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiantSide", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsOutpostReportObjectTypeQueryBuilder ExceptIsRadiantSide()
        {
            return ExceptField("isRadiantSide");
        }
    }

    public partial class MatchStatsLaneReportTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsLaneReportTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "radiant", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportFactionObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dire", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportFactionObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchStatsLaneReportType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsLaneReportTypeQueryBuilder WithRadiant(MatchStatsLaneReportFactionObjectTypeQueryBuilder matchStatsLaneReportFactionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiant", alias, matchStatsLaneReportFactionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportTypeQueryBuilder ExceptRadiant()
        {
            return ExceptField("radiant");
        }

        public MatchStatsLaneReportTypeQueryBuilder WithDire(MatchStatsLaneReportFactionObjectTypeQueryBuilder matchStatsLaneReportFactionObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dire", alias, matchStatsLaneReportFactionObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportTypeQueryBuilder ExceptDire()
        {
            return ExceptField("dire");
        }
    }

    public partial class MatchStatsLaneReportFactionObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsLaneReportFactionObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "midLane", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportFactionLaneObjectQueryBuilder) },
                new GraphQlFieldMetadata { Name = "offLane", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportFactionLaneObjectQueryBuilder) },
                new GraphQlFieldMetadata { Name = "safeLane", IsComplex = true, QueryBuilderType = typeof(MatchStatsLaneReportFactionLaneObjectQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchStatsLaneReportFactionObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsLaneReportFactionObjectTypeQueryBuilder WithMidLane(MatchStatsLaneReportFactionLaneObjectQueryBuilder matchStatsLaneReportFactionLaneObjectQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("midLane", alias, matchStatsLaneReportFactionLaneObjectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionObjectTypeQueryBuilder ExceptMidLane()
        {
            return ExceptField("midLane");
        }

        public MatchStatsLaneReportFactionObjectTypeQueryBuilder WithOffLane(MatchStatsLaneReportFactionLaneObjectQueryBuilder matchStatsLaneReportFactionLaneObjectQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("offLane", alias, matchStatsLaneReportFactionLaneObjectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionObjectTypeQueryBuilder ExceptOffLane()
        {
            return ExceptField("offLane");
        }

        public MatchStatsLaneReportFactionObjectTypeQueryBuilder WithSafeLane(MatchStatsLaneReportFactionLaneObjectQueryBuilder matchStatsLaneReportFactionLaneObjectQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("safeLane", alias, matchStatsLaneReportFactionLaneObjectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionObjectTypeQueryBuilder ExceptSafeLane()
        {
            return ExceptField("safeLane");
        }
    }

    public partial class MatchStatsLaneReportFactionLaneObjectQueryBuilder : GraphQlQueryBuilder<MatchStatsLaneReportFactionLaneObjectQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "meleeCount" },
                new GraphQlFieldMetadata { Name = "rangeCount" },
                new GraphQlFieldMetadata { Name = "siegeCount" },
                new GraphQlFieldMetadata { Name = "denyCount" },
                new GraphQlFieldMetadata { Name = "neutralCount" }
            };

        protected override string TypeName { get { return "MatchStatsLaneReportFactionLaneObject"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder WithMeleeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("meleeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder ExceptMeleeCount()
        {
            return ExceptField("meleeCount");
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder WithRangeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rangeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder ExceptRangeCount()
        {
            return ExceptField("rangeCount");
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder WithSiegeCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("siegeCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder ExceptSiegeCount()
        {
            return ExceptField("siegeCount");
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder WithDenyCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("denyCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder ExceptDenyCount()
        {
            return ExceptField("denyCount");
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder WithNeutralCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutralCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsLaneReportFactionLaneObjectQueryBuilder ExceptNeutralCount()
        {
            return ExceptField("neutralCount");
        }
    }

    public partial class MatchStatsChatEventTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsChatEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "fromHeroId" },
                new GraphQlFieldMetadata { Name = "toHeroId" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "pausedTick" },
                new GraphQlFieldMetadata { Name = "isRadiant" }
            };

        protected override string TypeName { get { return "MatchStatsChatEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsChatEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchStatsChatEventTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MatchStatsChatEventTypeQueryBuilder WithFromHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fromHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptFromHeroId()
        {
            return ExceptField("fromHeroId");
        }

        public MatchStatsChatEventTypeQueryBuilder WithToHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("toHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptToHeroId()
        {
            return ExceptField("toHeroId");
        }

        public MatchStatsChatEventTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public MatchStatsChatEventTypeQueryBuilder WithPausedTick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pausedTick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptPausedTick()
        {
            return ExceptField("pausedTick");
        }

        public MatchStatsChatEventTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsChatEventTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }
    }

    public partial class MatchStatsTowerDeathTypeQueryBuilder : GraphQlQueryBuilder<MatchStatsTowerDeathTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "attacker" }
            };

        protected override string TypeName { get { return "MatchStatsTowerDeathType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchStatsTowerDeathTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchStatsTowerDeathTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public MatchStatsTowerDeathTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchStatsTowerDeathTypeQueryBuilder WithAttacker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attacker", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchStatsTowerDeathTypeQueryBuilder ExceptAttacker()
        {
            return ExceptField("attacker");
        }
    }

    public partial class MatchPlaybackDataTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "courierEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataCourierEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "runeEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataRuneEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "wardEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataWardEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buildingEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataBuildingEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "towerDeathEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataTowerDeathEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roshanEvents", IsComplex = true, QueryBuilderType = typeof(MatchPlaybackDataRoshanEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "radiantCaptainHeroId" },
                new GraphQlFieldMetadata { Name = "direCaptainHeroId" }
            };

        protected override string TypeName { get { return "MatchPlaybackDataType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataTypeQueryBuilder WithCourierEvents(MatchPlaybackDataCourierEventTypeQueryBuilder matchPlaybackDataCourierEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("courierEvents", alias, matchPlaybackDataCourierEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptCourierEvents()
        {
            return ExceptField("courierEvents");
        }

        public MatchPlaybackDataTypeQueryBuilder WithRuneEvents(MatchPlaybackDataRuneEventTypeQueryBuilder matchPlaybackDataRuneEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("runeEvents", alias, matchPlaybackDataRuneEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptRuneEvents()
        {
            return ExceptField("runeEvents");
        }

        public MatchPlaybackDataTypeQueryBuilder WithWardEvents(MatchPlaybackDataWardEventTypeQueryBuilder matchPlaybackDataWardEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("wardEvents", alias, matchPlaybackDataWardEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptWardEvents()
        {
            return ExceptField("wardEvents");
        }

        public MatchPlaybackDataTypeQueryBuilder WithBuildingEvents(MatchPlaybackDataBuildingEventTypeQueryBuilder matchPlaybackDataBuildingEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buildingEvents", alias, matchPlaybackDataBuildingEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptBuildingEvents()
        {
            return ExceptField("buildingEvents");
        }

        public MatchPlaybackDataTypeQueryBuilder WithTowerDeathEvents(MatchPlaybackDataTowerDeathEventTypeQueryBuilder matchPlaybackDataTowerDeathEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("towerDeathEvents", alias, matchPlaybackDataTowerDeathEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptTowerDeathEvents()
        {
            return ExceptField("towerDeathEvents");
        }

        public MatchPlaybackDataTypeQueryBuilder WithRoshanEvents(MatchPlaybackDataRoshanEventTypeQueryBuilder matchPlaybackDataRoshanEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roshanEvents", alias, matchPlaybackDataRoshanEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptRoshanEvents()
        {
            return ExceptField("roshanEvents");
        }

        public MatchPlaybackDataTypeQueryBuilder WithRadiantCaptainHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantCaptainHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptRadiantCaptainHeroId()
        {
            return ExceptField("radiantCaptainHeroId");
        }

        public MatchPlaybackDataTypeQueryBuilder WithDireCaptainHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direCaptainHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTypeQueryBuilder ExceptDireCaptainHeroId()
        {
            return ExceptField("direCaptainHeroId");
        }
    }

    public partial class MatchPlaybackDataCourierEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataCourierEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "ownerHero" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "events", IsComplex = true, QueryBuilderType = typeof(MatchplaybackDataCourierEventObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchPlaybackDataCourierEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataCourierEventTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder WithOwnerHero(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ownerHero", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder ExceptOwnerHero()
        {
            return ExceptField("ownerHero");
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder WithEvents(MatchplaybackDataCourierEventObjectTypeQueryBuilder matchplaybackDataCourierEventObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("events", alias, matchplaybackDataCourierEventObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataCourierEventTypeQueryBuilder ExceptEvents()
        {
            return ExceptField("events");
        }
    }

    public partial class MatchplaybackDataCourierEventObjectTypeQueryBuilder : GraphQlQueryBuilder<MatchplaybackDataCourierEventObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "hp" },
                new GraphQlFieldMetadata { Name = "isFlying" },
                new GraphQlFieldMetadata { Name = "respawnTime" },
                new GraphQlFieldMetadata { Name = "didCastBoost" },
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" }
            };

        protected override string TypeName { get { return "MatchplaybackDataCourierEventObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptHp()
        {
            return ExceptField("hp");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithIsFlying(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFlying", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptIsFlying()
        {
            return ExceptField("isFlying");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithRespawnTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("respawnTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptRespawnTime()
        {
            return ExceptField("respawnTime");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithDidCastBoost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didCastBoost", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptDidCastBoost()
        {
            return ExceptField("didCastBoost");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchplaybackDataCourierEventObjectTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }
    }

    public partial class MatchPlaybackDataRuneEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataRuneEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "indexId" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "location" },
                new GraphQlFieldMetadata { Name = "rune" },
                new GraphQlFieldMetadata { Name = "action" }
            };

        protected override string TypeName { get { return "MatchPlaybackDataRuneEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithIndexId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("indexId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptIndexId()
        {
            return ExceptField("indexId");
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithLocation(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("location", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptLocation()
        {
            return ExceptField("location");
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithRune(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rune", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptRune()
        {
            return ExceptField("rune");
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder WithAction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("action", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRuneEventTypeQueryBuilder ExceptAction()
        {
            return ExceptField("action");
        }
    }

    public partial class MatchPlaybackDataWardEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataWardEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "indexId" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "fromPlayer" },
                new GraphQlFieldMetadata { Name = "wardType" },
                new GraphQlFieldMetadata { Name = "action" },
                new GraphQlFieldMetadata { Name = "playerDestroyed" }
            };

        protected override string TypeName { get { return "MatchPlaybackDataWardEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataWardEventTypeQueryBuilder WithIndexId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("indexId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptIndexId()
        {
            return ExceptField("indexId");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithFromPlayer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fromPlayer", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptFromPlayer()
        {
            return ExceptField("fromPlayer");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithWardType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wardType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptWardType()
        {
            return ExceptField("wardType");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithAction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("action", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptAction()
        {
            return ExceptField("action");
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder WithPlayerDestroyed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerDestroyed", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataWardEventTypeQueryBuilder ExceptPlayerDestroyed()
        {
            return ExceptField("playerDestroyed");
        }
    }

    public partial class MatchPlaybackDataBuildingEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataBuildingEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "indexId" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "hp" },
                new GraphQlFieldMetadata { Name = "maxHp" },
                new GraphQlFieldMetadata { Name = "positionX" },
                new GraphQlFieldMetadata { Name = "positionY" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "npcId" },
                new GraphQlFieldMetadata { Name = "didShrineActivate" }
            };

        protected override string TypeName { get { return "MatchPlaybackDataBuildingEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithIndexId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("indexId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptIndexId()
        {
            return ExceptField("indexId");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptHp()
        {
            return ExceptField("hp");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithMaxHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxHp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptMaxHp()
        {
            return ExceptField("maxHp");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithPositionX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionX", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptPositionX()
        {
            return ExceptField("positionX");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithPositionY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionY", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptPositionY()
        {
            return ExceptField("positionY");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithNpcId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("npcId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptNpcId()
        {
            return ExceptField("npcId");
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder WithDidShrineActivate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didShrineActivate", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataBuildingEventTypeQueryBuilder ExceptDidShrineActivate()
        {
            return ExceptField("didShrineActivate");
        }
    }

    public partial class MatchPlaybackDataTowerDeathEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataTowerDeathEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "radiant" },
                new GraphQlFieldMetadata { Name = "dire" }
            };

        protected override string TypeName { get { return "MatchPlaybackDataTowerDeathEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataTowerDeathEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTowerDeathEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlaybackDataTowerDeathEventTypeQueryBuilder WithRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTowerDeathEventTypeQueryBuilder ExceptRadiant()
        {
            return ExceptField("radiant");
        }

        public MatchPlaybackDataTowerDeathEventTypeQueryBuilder WithDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataTowerDeathEventTypeQueryBuilder ExceptDire()
        {
            return ExceptField("dire");
        }
    }

    public partial class MatchPlaybackDataRoshanEventTypeQueryBuilder : GraphQlQueryBuilder<MatchPlaybackDataRoshanEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "hp" },
                new GraphQlFieldMetadata { Name = "maxHp" },
                new GraphQlFieldMetadata { Name = "createTime" },
                new GraphQlFieldMetadata { Name = "x" },
                new GraphQlFieldMetadata { Name = "y" },
                new GraphQlFieldMetadata { Name = "totalDamageTaken" },
                new GraphQlFieldMetadata { Name = "item0" },
                new GraphQlFieldMetadata { Name = "item1" },
                new GraphQlFieldMetadata { Name = "item2" },
                new GraphQlFieldMetadata { Name = "item3" },
                new GraphQlFieldMetadata { Name = "item4" },
                new GraphQlFieldMetadata { Name = "item5" }
            };

        protected override string TypeName { get { return "MatchPlaybackDataRoshanEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptHp()
        {
            return ExceptField("hp");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithMaxHp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxHp", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptMaxHp()
        {
            return ExceptField("maxHp");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithCreateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptCreateTime()
        {
            return ExceptField("createTime");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithX(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("x", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptX()
        {
            return ExceptField("x");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithY(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("y", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptY()
        {
            return ExceptField("y");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithTotalDamageTaken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalDamageTaken", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptTotalDamageTaken()
        {
            return ExceptField("totalDamageTaken");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithItem0(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptItem0()
        {
            return ExceptField("item0");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithItem1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptItem1()
        {
            return ExceptField("item1");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithItem2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptItem2()
        {
            return ExceptField("item2");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithItem3(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptItem3()
        {
            return ExceptField("item3");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithItem4(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptItem4()
        {
            return ExceptField("item4");
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder WithItem5(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlaybackDataRoshanEventTypeQueryBuilder ExceptItem5()
        {
            return ExceptField("item5");
        }
    }

    public partial class MatchPlayerSpectatorTypeQueryBuilder : GraphQlQueryBuilder<MatchPlayerSpectatorTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamId" },
                new GraphQlFieldMetadata { Name = "isRadiantCoach" },
                new GraphQlFieldMetadata { Name = "isVictory" }
            };

        protected override string TypeName { get { return "MatchPlayerSpectatorType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchPlayerSpectatorTypeQueryBuilder WithSteamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpectatorTypeQueryBuilder ExceptSteamId()
        {
            return ExceptField("steamId");
        }

        public MatchPlayerSpectatorTypeQueryBuilder WithIsRadiantCoach(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiantCoach", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpectatorTypeQueryBuilder ExceptIsRadiantCoach()
        {
            return ExceptField("isRadiantCoach");
        }

        public MatchPlayerSpectatorTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchPlayerSpectatorTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }
    }

    public partial class YogurtQueryQueryBuilder : GraphQlQueryBuilder<YogurtQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "team", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultTeam", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamMembers", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "overview", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadOverviewTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroSummary", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadHeroSummaryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "YogurtQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public YogurtQueryQueryBuilder WithTeam(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithObjectField("team", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public YogurtQueryQueryBuilder WithTeams(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teams", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public YogurtQueryQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public YogurtQueryQueryBuilder WithDefaultTeam(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("defaultTeam", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public YogurtQueryQueryBuilder ExceptDefaultTeam()
        {
            return ExceptField("defaultTeam");
        }

        public YogurtQueryQueryBuilder WithTeamMembers(MatchReplayUploadTeamMemberTypeQueryBuilder matchReplayUploadTeamMemberTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithObjectField("teamMembers", alias, matchReplayUploadTeamMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptTeamMembers()
        {
            return ExceptField("teamMembers");
        }

        public YogurtQueryQueryBuilder WithOverview(MatchReplayUploadOverviewTypeQueryBuilder matchReplayUploadOverviewTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<FilterMatchReplayUploadRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("overview", alias, matchReplayUploadOverviewTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptOverview()
        {
            return ExceptField("overview");
        }

        public YogurtQueryQueryBuilder WithHeroSummary(MatchReplayUploadHeroSummaryTypeQueryBuilder matchReplayUploadHeroSummaryTypeQueryBuilder, QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<FilterMatchReplayUploadRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("heroSummary", alias, matchReplayUploadHeroSummaryTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtQueryQueryBuilder ExceptHeroSummary()
        {
            return ExceptField("heroSummary");
        }
    }

    public partial class MatchReplayUploadTeamTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "creatorCaptainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "members", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamMemberTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isDefault" }
            };

        protected override string TypeName { get { return "MatchReplayUploadTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadTeamTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithCreatorCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("creatorCaptainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptCreatorCaptainJackIdentityId()
        {
            return ExceptField("creatorCaptainJackIdentityId");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithMembers(MatchReplayUploadTeamMemberTypeQueryBuilder matchReplayUploadTeamMemberTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("members", alias, matchReplayUploadTeamMemberTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptMembers()
        {
            return ExceptField("members");
        }

        public MatchReplayUploadTeamTypeQueryBuilder WithIsDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDefault", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamTypeQueryBuilder ExceptIsDefault()
        {
            return ExceptField("isDefault");
        }
    }

    public partial class MatchReplayUploadTeamMemberTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadTeamMemberTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "captainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "matchUploadTeamId" },
                new GraphQlFieldMetadata { Name = "isAdmin" },
                new GraphQlFieldMetadata { Name = "isDefaultTeam" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadTeamMemberType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithMatchUploadTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchUploadTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptMatchUploadTeamId()
        {
            return ExceptField("matchUploadTeamId");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithIsAdmin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAdmin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptIsAdmin()
        {
            return ExceptField("isAdmin");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithIsDefaultTeam(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDefaultTeam", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptIsDefaultTeam()
        {
            return ExceptField("isDefaultTeam");
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadTeamMemberTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class MatchReplayUploadOverviewTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadOverviewTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadOverviewType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadOverviewTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadOverviewTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public MatchReplayUploadOverviewTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadOverviewTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public MatchReplayUploadOverviewTypeQueryBuilder WithMatches(MatchReplayUploadMatchTypeQueryBuilder matchReplayUploadMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchReplayUploadMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadOverviewTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }
    }

    public partial class MatchReplayUploadMatchTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadMatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchUploadTeamId" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "fileName" },
                new GraphQlFieldMetadata { Name = "uploaderCaptainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "isValidated" },
                new GraphQlFieldMetadata { Name = "isComplete" },
                new GraphQlFieldMetadata { Name = "isActive" },
                new GraphQlFieldMetadata { Name = "didRadiantWin" },
                new GraphQlFieldMetadata { Name = "durationSeconds" },
                new GraphQlFieldMetadata { Name = "durationMinutes" },
                new GraphQlFieldMetadata { Name = "startDateTime" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "lobbyType" },
                new GraphQlFieldMetadata { Name = "numHumanPlayers" },
                new GraphQlFieldMetadata { Name = "numHumanSpectators" },
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "seriesId" },
                new GraphQlFieldMetadata { Name = "gameMode" },
                new GraphQlFieldMetadata { Name = "radiantTeamId" },
                new GraphQlFieldMetadata { Name = "radiantKills" },
                new GraphQlFieldMetadata { Name = "direTeamId" },
                new GraphQlFieldMetadata { Name = "direKills" },
                new GraphQlFieldMetadata { Name = "isRadiantFirstPick" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "notes" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "spectators", IsComplex = true },
                new GraphQlFieldMetadata { Name = "pickBans", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadPickBanTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "radiantTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "direTeam", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadMatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadMatchTypeQueryBuilder WithMatchUploadTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchUploadTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptMatchUploadTeamId()
        {
            return ExceptField("matchUploadTeamId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithFileName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fileName", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptFileName()
        {
            return ExceptField("fileName");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithUploaderCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uploaderCaptainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptUploaderCaptainJackIdentityId()
        {
            return ExceptField("uploaderCaptainJackIdentityId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsValidated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValidated", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsValidated()
        {
            return ExceptField("isValidated");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsComplete()
        {
            return ExceptField("isComplete");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsActive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isActive", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsActive()
        {
            return ExceptField("isActive");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDidRadiantWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRadiantWin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDidRadiantWin()
        {
            return ExceptField("didRadiantWin");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDurationMinutes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinutes", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDurationMinutes()
        {
            return ExceptField("durationMinutes");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithNumHumanSpectators(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanSpectators", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptNumHumanSpectators()
        {
            return ExceptField("numHumanSpectators");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithSeriesId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seriesId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptSeriesId()
        {
            return ExceptField("seriesId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithRadiantTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptRadiantTeamId()
        {
            return ExceptField("radiantTeamId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithRadiantKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptRadiantKills()
        {
            return ExceptField("radiantKills");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDireTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDireTeamId()
        {
            return ExceptField("direTeamId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDireKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDireKills()
        {
            return ExceptField("direKills");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithIsRadiantFirstPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiantFirstPick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptIsRadiantFirstPick()
        {
            return ExceptField("isRadiantFirstPick");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithPlayers(MatchReplayUploadPlayerTypeQueryBuilder matchReplayUploadPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, matchReplayUploadPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithSpectators(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("spectators", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptSpectators()
        {
            return ExceptField("spectators");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithPickBans(MatchReplayUploadPickBanTypeQueryBuilder matchReplayUploadPickBanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pickBans", alias, matchReplayUploadPickBanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptPickBans()
        {
            return ExceptField("pickBans");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithRadiantTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("radiantTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptRadiantTeam()
        {
            return ExceptField("radiantTeam");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithDireTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTeam", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptDireTeam()
        {
            return ExceptField("direTeam");
        }

        public MatchReplayUploadMatchTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadMatchTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }
    }

    public partial class MatchReplayUploadPlayerTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "playerSlot" },
                new GraphQlFieldMetadata { Name = "matchUploadTeamId" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "isDire" },
                new GraphQlFieldMetadata { Name = "teamSlot" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "lastHits" },
                new GraphQlFieldMetadata { Name = "denies" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "experiencePerMinute" },
                new GraphQlFieldMetadata { Name = "totalGoldSpent" },
                new GraphQlFieldMetadata { Name = "goldSpentOnBuybacks" },
                new GraphQlFieldMetadata { Name = "goldSpentOnConsumables" },
                new GraphQlFieldMetadata { Name = "goldSpentOnItems" },
                new GraphQlFieldMetadata { Name = "goldSpentOnSupport" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "towerKills" },
                new GraphQlFieldMetadata { Name = "heroHealing" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" },
                new GraphQlFieldMetadata { Name = "backpack0Id" },
                new GraphQlFieldMetadata { Name = "backpack1Id" },
                new GraphQlFieldMetadata { Name = "backpack2Id" },
                new GraphQlFieldMetadata { Name = "lane" },
                new GraphQlFieldMetadata { Name = "role" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "pickOrder" },
                new GraphQlFieldMetadata { Name = "teamPickOrder" },
                new GraphQlFieldMetadata { Name = "isVictory" },
                new GraphQlFieldMetadata { Name = "killsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "assistsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "deathsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "streakList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "levelList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "totalEarnedGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "reliableGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "unreliableGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "totalEarnedXpList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "sharedGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "heroKillGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "creepKillGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "incomeGoldList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "networthList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "denyCountList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lastHitCountList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lastHitStreakList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "lastHitMultiKillList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "nearbyCreepDeathCountList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "claimedDenyCountList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "claimedMissCountList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "missCountList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "stunsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "heroHealingList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "towerKillsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "roshanKillsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "observerWardsPlacedList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "sentryWardsPlacedList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "creepStackList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "campStackList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "runePicksupList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "goldSpentOnSupportList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "heroDamageList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "wardsPurchasedList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "wardsDestroyedList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "commandsIssuedList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "goldSpentOnConsumablesList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "goldSpentOnItemsList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "goldSpentOnBuybacksList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "goldLostToDeathList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "maxHealthList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "maxManaList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "bkbChargesUsedList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "damageMinList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "damageMaxList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "damageBonusList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "strengthTotalList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "agilityTotalList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "intellectTotalList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "towerDamageList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadPlayerStatsItemsTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadPlayerTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithMatchUploadTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchUploadTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMatchUploadTeamId()
        {
            return ExceptField("matchUploadTeamId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIsDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIsDire()
        {
            return ExceptField("isDire");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTeamSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTeamSlot()
        {
            return ExceptField("teamSlot");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLastHits()
        {
            return ExceptField("lastHits");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDenies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("denies", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDenies()
        {
            return ExceptField("denies");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTotalGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalGoldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTotalGoldSpent()
        {
            return ExceptField("totalGoldSpent");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnBuybacks(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnBuybacks", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnBuybacks()
        {
            return ExceptField("goldSpentOnBuybacks");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnConsumables(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnConsumables", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnConsumables()
        {
            return ExceptField("goldSpentOnConsumables");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnItems(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnItems", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnItems()
        {
            return ExceptField("goldSpentOnItems");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnSupport(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnSupport", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnSupport()
        {
            return ExceptField("goldSpentOnSupport");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTowerKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTowerKills()
        {
            return ExceptField("towerKills");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroHealing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealing", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroHealing()
        {
            return ExceptField("heroHealing");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBackpack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBackpack0Id()
        {
            return ExceptField("backpack0Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBackpack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBackpack1Id()
        {
            return ExceptField("backpack1Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBackpack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBackpack2Id()
        {
            return ExceptField("backpack2Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lane", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLane()
        {
            return ExceptField("lane");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithPickOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptPickOrder()
        {
            return ExceptField("pickOrder");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTeamPickOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamPickOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTeamPickOrder()
        {
            return ExceptField("teamPickOrder");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithKillsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptKillsList()
        {
            return ExceptField("killsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithAssistsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptAssistsList()
        {
            return ExceptField("assistsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDeathsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDeathsList()
        {
            return ExceptField("deathsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithStreakList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("streakList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptStreakList()
        {
            return ExceptField("streakList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLevelList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("levelList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLevelList()
        {
            return ExceptField("levelList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTotalEarnedGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalEarnedGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTotalEarnedGoldList()
        {
            return ExceptField("totalEarnedGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithReliableGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reliableGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptReliableGoldList()
        {
            return ExceptField("reliableGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithUnreliableGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unreliableGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptUnreliableGoldList()
        {
            return ExceptField("unreliableGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTotalEarnedXpList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalEarnedXpList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTotalEarnedXpList()
        {
            return ExceptField("totalEarnedXpList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithSharedGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sharedGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptSharedGoldList()
        {
            return ExceptField("sharedGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroKillGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroKillGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroKillGoldList()
        {
            return ExceptField("heroKillGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithCreepKillGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("creepKillGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptCreepKillGoldList()
        {
            return ExceptField("creepKillGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIncomeGoldList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("incomeGoldList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIncomeGoldList()
        {
            return ExceptField("incomeGoldList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithNetworthList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networthList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptNetworthList()
        {
            return ExceptField("networthList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDenyCountList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("denyCountList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDenyCountList()
        {
            return ExceptField("denyCountList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLastHitCountList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitCountList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLastHitCountList()
        {
            return ExceptField("lastHitCountList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLastHitStreakList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitStreakList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLastHitStreakList()
        {
            return ExceptField("lastHitStreakList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLastHitMultiKillList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitMultiKillList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLastHitMultiKillList()
        {
            return ExceptField("lastHitMultiKillList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithNearbyCreepDeathCountList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nearbyCreepDeathCountList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptNearbyCreepDeathCountList()
        {
            return ExceptField("nearbyCreepDeathCountList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithClaimedDenyCountList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("claimedDenyCountList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptClaimedDenyCountList()
        {
            return ExceptField("claimedDenyCountList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithClaimedMissCountList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("claimedMissCountList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptClaimedMissCountList()
        {
            return ExceptField("claimedMissCountList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithMissCountList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("missCountList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMissCountList()
        {
            return ExceptField("missCountList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithStunsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptStunsList()
        {
            return ExceptField("stunsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroHealingList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealingList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroHealingList()
        {
            return ExceptField("heroHealingList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTowerKillsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerKillsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTowerKillsList()
        {
            return ExceptField("towerKillsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithRoshanKillsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roshanKillsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptRoshanKillsList()
        {
            return ExceptField("roshanKillsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithObserverWardsPlacedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("observerWardsPlacedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptObserverWardsPlacedList()
        {
            return ExceptField("observerWardsPlacedList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithSentryWardsPlacedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sentryWardsPlacedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptSentryWardsPlacedList()
        {
            return ExceptField("sentryWardsPlacedList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithCreepStackList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("creepStackList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptCreepStackList()
        {
            return ExceptField("creepStackList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithCampStackList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("campStackList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptCampStackList()
        {
            return ExceptField("campStackList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithRunePicksupList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runePicksupList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptRunePicksupList()
        {
            return ExceptField("runePicksupList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnSupportList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnSupportList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnSupportList()
        {
            return ExceptField("goldSpentOnSupportList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroDamageList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamageList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroDamageList()
        {
            return ExceptField("heroDamageList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithWardsPurchasedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wardsPurchasedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptWardsPurchasedList()
        {
            return ExceptField("wardsPurchasedList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithWardsDestroyedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wardsDestroyedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptWardsDestroyedList()
        {
            return ExceptField("wardsDestroyedList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithCommandsIssuedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("commandsIssuedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptCommandsIssuedList()
        {
            return ExceptField("commandsIssuedList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnConsumablesList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnConsumablesList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnConsumablesList()
        {
            return ExceptField("goldSpentOnConsumablesList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnItemsList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnItemsList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnItemsList()
        {
            return ExceptField("goldSpentOnItemsList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnBuybacksList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnBuybacksList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnBuybacksList()
        {
            return ExceptField("goldSpentOnBuybacksList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldLostToDeathList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldLostToDeathList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldLostToDeathList()
        {
            return ExceptField("goldLostToDeathList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithMaxHealthList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxHealthList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMaxHealthList()
        {
            return ExceptField("maxHealthList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithMaxManaList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxManaList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMaxManaList()
        {
            return ExceptField("maxManaList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBkbChargesUsedList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bkbChargesUsedList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBkbChargesUsedList()
        {
            return ExceptField("bkbChargesUsedList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDamageMinList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageMinList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDamageMinList()
        {
            return ExceptField("damageMinList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDamageMaxList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageMaxList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDamageMaxList()
        {
            return ExceptField("damageMaxList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDamageBonusList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageBonusList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDamageBonusList()
        {
            return ExceptField("damageBonusList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithStrengthTotalList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("strengthTotalList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptStrengthTotalList()
        {
            return ExceptField("strengthTotalList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithAgilityTotalList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("agilityTotalList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptAgilityTotalList()
        {
            return ExceptField("agilityTotalList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIntellectTotalList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("intellectTotalList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIntellectTotalList()
        {
            return ExceptField("intellectTotalList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTowerDamageList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamageList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTowerDamageList()
        {
            return ExceptField("towerDamageList");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItems(MatchReplayUploadPlayerStatsItemsTypeQueryBuilder matchReplayUploadPlayerStatsItemsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("items", alias, matchReplayUploadPlayerStatsItemsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }
    }

    public partial class MatchReplayUploadPlayerStatsItemsTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadPlayerStatsItemsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "item0IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "item1IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "item2IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "item3IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "item4IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "item5IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "backpack0IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "backpack1IdList", IsComplex = true },
                new GraphQlFieldMetadata { Name = "backpack2IdList", IsComplex = true }
            };

        protected override string TypeName { get { return "MatchReplayUploadPlayerStatsItemsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithItem0IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptItem0IdList()
        {
            return ExceptField("item0IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithItem1IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptItem1IdList()
        {
            return ExceptField("item1IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithItem2IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptItem2IdList()
        {
            return ExceptField("item2IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithItem3IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptItem3IdList()
        {
            return ExceptField("item3IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithItem4IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptItem4IdList()
        {
            return ExceptField("item4IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithItem5IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptItem5IdList()
        {
            return ExceptField("item5IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithBackpack0IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptBackpack0IdList()
        {
            return ExceptField("backpack0IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithBackpack1IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptBackpack1IdList()
        {
            return ExceptField("backpack1IdList");
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder WithBackpack2IdList(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2IdList", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerStatsItemsTypeQueryBuilder ExceptBackpack2IdList()
        {
            return ExceptField("backpack2IdList");
        }
    }

    public partial class MatchReplayUploadPickBanTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadPickBanTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "playerSlot" },
                new GraphQlFieldMetadata { Name = "isPick" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "bannedHeroId" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "isRadiant" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "wasBannedSuccessfully" }
            };

        protected override string TypeName { get { return "MatchReplayUploadPickBanType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadPickBanTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithIsPick(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPick", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptIsPick()
        {
            return ExceptField("isPick");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithBannedHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannedHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptBannedHeroId()
        {
            return ExceptField("bannedHeroId");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public MatchReplayUploadPickBanTypeQueryBuilder WithWasBannedSuccessfully(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wasBannedSuccessfully", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPickBanTypeQueryBuilder ExceptWasBannedSuccessfully()
        {
            return ExceptField("wasBannedSuccessfully");
        }
    }

    public partial class MatchReplayUploadHeroSummaryTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadHeroSummaryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCountWith" },
                new GraphQlFieldMetadata { Name = "winCountAgainst" },
                new GraphQlFieldMetadata { Name = "matchCountWith" },
                new GraphQlFieldMetadata { Name = "matchCountAgainst" },
                new GraphQlFieldMetadata { Name = "banCountWith" },
                new GraphQlFieldMetadata { Name = "banCountAgainst" },
                new GraphQlFieldMetadata { Name = "duos", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadHeroDuoSummaryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadHeroSummaryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithWinCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptWinCountWith()
        {
            return ExceptField("winCountWith");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithWinCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptWinCountAgainst()
        {
            return ExceptField("winCountAgainst");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithMatchCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptMatchCountWith()
        {
            return ExceptField("matchCountWith");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithMatchCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptMatchCountAgainst()
        {
            return ExceptField("matchCountAgainst");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithBanCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptBanCountWith()
        {
            return ExceptField("banCountWith");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithBanCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptBanCountAgainst()
        {
            return ExceptField("banCountAgainst");
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder WithDuos(MatchReplayUploadHeroDuoSummaryTypeQueryBuilder matchReplayUploadHeroDuoSummaryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("duos", alias, matchReplayUploadHeroDuoSummaryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroSummaryTypeQueryBuilder ExceptDuos()
        {
            return ExceptField("duos");
        }
    }

    public partial class MatchReplayUploadHeroDuoSummaryTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadHeroDuoSummaryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCountWith" },
                new GraphQlFieldMetadata { Name = "winCountAgainst" },
                new GraphQlFieldMetadata { Name = "matchCountWith" },
                new GraphQlFieldMetadata { Name = "matchCountAgainst" }
            };

        protected override string TypeName { get { return "MatchReplayUploadHeroDuoSummaryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithWinCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptWinCountWith()
        {
            return ExceptField("winCountWith");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithWinCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptWinCountAgainst()
        {
            return ExceptField("winCountAgainst");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithMatchCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptMatchCountWith()
        {
            return ExceptField("matchCountWith");
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder WithMatchCountAgainst(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountAgainst", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadHeroDuoSummaryTypeQueryBuilder ExceptMatchCountAgainst()
        {
            return ExceptField("matchCountAgainst");
        }
    }

    public partial class PlusQueryQueryBuilder : GraphQlQueryBuilder<PlusQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "draft", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlusDraftTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerMatchHistory", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlusHoverTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerHeroHighlight", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerDraftHeroHighlightTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamHeroStatus", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlusHeroTeamStatusDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "draftMissingLetter", RequiresParameters = true }
            };

        protected override string TypeName { get { return "PlusQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusQueryQueryBuilder WithDraft(PlusDraftTypeQueryBuilder plusDraftTypeQueryBuilder, QueryBuilderParameter<PlusDraftRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("draft", alias, plusDraftTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlusQueryQueryBuilder ExceptDraft()
        {
            return ExceptField("draft");
        }

        public PlusQueryQueryBuilder WithPlayerMatchHistory(PlusHoverTypeQueryBuilder plusHoverTypeQueryBuilder, QueryBuilderParameter<PlusPlayerHoverRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("playerMatchHistory", alias, plusHoverTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlusQueryQueryBuilder ExceptPlayerMatchHistory()
        {
            return ExceptField("playerMatchHistory");
        }

        public PlusQueryQueryBuilder WithPlayerHeroHighlight(PlayerDraftHeroHighlightTypeQueryBuilder playerDraftHeroHighlightTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId, QueryBuilderParameter<short?> heroId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            return WithObjectField("playerHeroHighlight", alias, playerDraftHeroHighlightTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlusQueryQueryBuilder ExceptPlayerHeroHighlight()
        {
            return ExceptField("playerHeroHighlight");
        }

        public PlusQueryQueryBuilder WithTeamHeroStatus(PlusHeroTeamStatusDetailTypeQueryBuilder plusHeroTeamStatusDetailTypeQueryBuilder, QueryBuilderParameter<RankBracketBasicEnum?> rankBracket, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rankBracket", ArgumentValue = rankBracket} );
            return WithObjectField("teamHeroStatus", alias, plusHeroTeamStatusDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlusQueryQueryBuilder ExceptTeamHeroStatus()
        {
            return ExceptField("teamHeroStatus");
        }

        public PlusQueryQueryBuilder WithDraftMissingLetter(QueryBuilderParameter<PlusDraftMissingLetterRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("draftMissingLetter", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public PlusQueryQueryBuilder ExceptDraftMissingLetter()
        {
            return ExceptField("draftMissingLetter");
        }
    }

    public partial class PlusDraftTypeQueryBuilder : GraphQlQueryBuilder<PlusDraftTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "midOutcome" },
                new GraphQlFieldMetadata { Name = "safeOutcome" },
                new GraphQlFieldMetadata { Name = "offOutcome" },
                new GraphQlFieldMetadata { Name = "winValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "durationValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlusDraftPlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlusDraftType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusDraftTypeQueryBuilder WithMidOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("midOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftTypeQueryBuilder ExceptMidOutcome()
        {
            return ExceptField("midOutcome");
        }

        public PlusDraftTypeQueryBuilder WithSafeOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("safeOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftTypeQueryBuilder ExceptSafeOutcome()
        {
            return ExceptField("safeOutcome");
        }

        public PlusDraftTypeQueryBuilder WithOffOutcome(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("offOutcome", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftTypeQueryBuilder ExceptOffOutcome()
        {
            return ExceptField("offOutcome");
        }

        public PlusDraftTypeQueryBuilder WithWinValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winValues", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftTypeQueryBuilder ExceptWinValues()
        {
            return ExceptField("winValues");
        }

        public PlusDraftTypeQueryBuilder WithDurationValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationValues", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftTypeQueryBuilder ExceptDurationValues()
        {
            return ExceptField("durationValues");
        }

        public PlusDraftTypeQueryBuilder WithPlayers(PlusDraftPlayerTypeQueryBuilder plusDraftPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, plusDraftPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }
    }

    public partial class PlusDraftPlayerTypeQueryBuilder : GraphQlQueryBuilder<PlusDraftPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "slot" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "positionValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(PlusDraftPlayerHeroObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlusDraftPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusDraftPlayerTypeQueryBuilder WithSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slot", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerTypeQueryBuilder ExceptSlot()
        {
            return ExceptField("slot");
        }

        public PlusDraftPlayerTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public PlusDraftPlayerTypeQueryBuilder WithPositionValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionValues", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerTypeQueryBuilder ExceptPositionValues()
        {
            return ExceptField("positionValues");
        }

        public PlusDraftPlayerTypeQueryBuilder WithHeroes(PlusDraftPlayerHeroObjectTypeQueryBuilder plusDraftPlayerHeroObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, plusDraftPlayerHeroObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }
    }

    public partial class PlusDraftPlayerHeroObjectTypeQueryBuilder : GraphQlQueryBuilder<PlusDraftPlayerHeroObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "pickValue" },
                new GraphQlFieldMetadata { Name = "winValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "score" },
                new GraphQlFieldMetadata { Name = "letter" }
            };

        protected override string TypeName { get { return "PlusDraftPlayerHeroObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusDraftPlayerHeroObjectTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder WithPickValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickValue", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder ExceptPickValue()
        {
            return ExceptField("pickValue");
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder WithWinValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winValues", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder ExceptWinValues()
        {
            return ExceptField("winValues");
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder WithLetter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("letter", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusDraftPlayerHeroObjectTypeQueryBuilder ExceptLetter()
        {
            return ExceptField("letter");
        }
    }

    public partial class PlusHoverTypeQueryBuilder : GraphQlQueryBuilder<PlusHoverTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "bans", IsComplex = true, QueryBuilderType = typeof(PlusHoverBanTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlusHoverType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusHoverTypeQueryBuilder WithPlayers(PlusPlayerHoverTypeQueryBuilder plusPlayerHoverTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, plusPlayerHoverTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusHoverTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public PlusHoverTypeQueryBuilder WithBans(PlusHoverBanTypeQueryBuilder plusHoverBanTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("bans", alias, plusHoverBanTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusHoverTypeQueryBuilder ExceptBans()
        {
            return ExceptField("bans");
        }
    }

    public partial class PlusPlayerHoverTypeQueryBuilder : GraphQlQueryBuilder<PlusPlayerHoverTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "coreCount" },
                new GraphQlFieldMetadata { Name = "supportCount" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "activity" },
                new GraphQlFieldMetadata { Name = "languageCode", IsComplex = true },
                new GraphQlFieldMetadata { Name = "friends", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "enemies", IsComplex = true, QueryBuilderType = typeof(PlusPlayerHoverPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "heroesExperience", IsComplex = true },
                new GraphQlFieldMetadata { Name = "behaviorScore" }
            };

        protected override string TypeName { get { return "PlusPlayerHoverType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusPlayerHoverTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithCoreCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coreCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptCoreCount()
        {
            return ExceptField("coreCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithSupportCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptSupportCount()
        {
            return ExceptField("supportCount");
        }

        public PlusPlayerHoverTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlusPlayerHoverTypeQueryBuilder WithHeroes(PlusPlayerHoverHeroTypeQueryBuilder plusPlayerHoverHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroes", alias, plusPlayerHoverHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public PlusPlayerHoverTypeQueryBuilder WithActivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activity", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public PlusPlayerHoverTypeQueryBuilder WithLanguageCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageCode", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptLanguageCode()
        {
            return ExceptField("languageCode");
        }

        public PlusPlayerHoverTypeQueryBuilder WithFriends(PlusPlayerHoverPlayerTypeQueryBuilder plusPlayerHoverPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("friends", alias, plusPlayerHoverPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptFriends()
        {
            return ExceptField("friends");
        }

        public PlusPlayerHoverTypeQueryBuilder WithEnemies(PlusPlayerHoverPlayerTypeQueryBuilder plusPlayerHoverPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("enemies", alias, plusPlayerHoverPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptEnemies()
        {
            return ExceptField("enemies");
        }

        public PlusPlayerHoverTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public PlusPlayerHoverTypeQueryBuilder WithHeroesExperience(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroesExperience", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptHeroesExperience()
        {
            return ExceptField("heroesExperience");
        }

        public PlusPlayerHoverTypeQueryBuilder WithBehaviorScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorScore", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverTypeQueryBuilder ExceptBehaviorScore()
        {
            return ExceptField("behaviorScore");
        }
    }

    public partial class PlusPlayerHoverHeroTypeQueryBuilder : GraphQlQueryBuilder<PlusPlayerHoverHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lossCount" }
            };

        protected override string TypeName { get { return "PlusPlayerHoverHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusPlayerHoverHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlusPlayerHoverHeroTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverHeroTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlusPlayerHoverHeroTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverHeroTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }
    }

    public partial class PlusPlayerHoverPlayerTypeQueryBuilder : GraphQlQueryBuilder<PlusPlayerHoverPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" }
            };

        protected override string TypeName { get { return "PlusPlayerHoverPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusPlayerHoverPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusPlayerHoverPlayerTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }
    }

    public partial class PlusHoverBanTypeQueryBuilder : GraphQlQueryBuilder<PlusHoverBanTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "score" },
                new GraphQlFieldMetadata { Name = "flags" }
            };

        protected override string TypeName { get { return "PlusHoverBanType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusHoverBanTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHoverBanTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlusHoverBanTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHoverBanTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public PlusHoverBanTypeQueryBuilder WithFlags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flags", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHoverBanTypeQueryBuilder ExceptFlags()
        {
            return ExceptField("flags");
        }
    }

    public partial class PlayerDraftHeroHighlightTypeQueryBuilder : GraphQlQueryBuilder<PlayerDraftHeroHighlightTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "lastPlayed" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "impAllTime" },
                new GraphQlFieldMetadata { Name = "mvpCountLastMonth" },
                new GraphQlFieldMetadata { Name = "topCoreCountLastMonth" },
                new GraphQlFieldMetadata { Name = "topSupportCountLastMonth" },
                new GraphQlFieldMetadata { Name = "winCountLastMonth" },
                new GraphQlFieldMetadata { Name = "matchCountLastMonth" },
                new GraphQlFieldMetadata { Name = "impLastMonth" },
                new GraphQlFieldMetadata { Name = "winCountLastSixMonths" },
                new GraphQlFieldMetadata { Name = "matchCountLastSixMonths" },
                new GraphQlFieldMetadata { Name = "impLastSixMonths" }
            };

        protected override string TypeName { get { return "PlayerDraftHeroHighlightType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerDraftHeroHighlightTypeQueryBuilder WithLastPlayed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastPlayed", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptLastPlayed()
        {
            return ExceptField("lastPlayed");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithImpAllTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impAllTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptImpAllTime()
        {
            return ExceptField("impAllTime");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithMvpCountLastMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mvpCountLastMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptMvpCountLastMonth()
        {
            return ExceptField("mvpCountLastMonth");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithTopCoreCountLastMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topCoreCountLastMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptTopCoreCountLastMonth()
        {
            return ExceptField("topCoreCountLastMonth");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithTopSupportCountLastMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topSupportCountLastMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptTopSupportCountLastMonth()
        {
            return ExceptField("topSupportCountLastMonth");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithWinCountLastMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountLastMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptWinCountLastMonth()
        {
            return ExceptField("winCountLastMonth");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithMatchCountLastMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountLastMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptMatchCountLastMonth()
        {
            return ExceptField("matchCountLastMonth");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithImpLastMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impLastMonth", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptImpLastMonth()
        {
            return ExceptField("impLastMonth");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithWinCountLastSixMonths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountLastSixMonths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptWinCountLastSixMonths()
        {
            return ExceptField("winCountLastSixMonths");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithMatchCountLastSixMonths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountLastSixMonths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptMatchCountLastSixMonths()
        {
            return ExceptField("matchCountLastSixMonths");
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder WithImpLastSixMonths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impLastSixMonths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerDraftHeroHighlightTypeQueryBuilder ExceptImpLastSixMonths()
        {
            return ExceptField("impLastSixMonths");
        }
    }

    public partial class PlusHeroTeamStatusDetailTypeQueryBuilder : GraphQlQueryBuilder<PlusHeroTeamStatusDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "basicBracket" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "averages", IsComplex = true, QueryBuilderType = typeof(PlusHeroTeamStatusAveragesTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlusHeroTeamStatusDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusHeroTeamStatusDetailTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder WithBasicBracket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicBracket", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder ExceptBasicBracket()
        {
            return ExceptField("basicBracket");
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder WithAverages(PlusHeroTeamStatusAveragesTypeQueryBuilder plusHeroTeamStatusAveragesTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("averages", alias, plusHeroTeamStatusAveragesTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusDetailTypeQueryBuilder ExceptAverages()
        {
            return ExceptField("averages");
        }
    }

    public partial class PlusHeroTeamStatusAveragesTypeQueryBuilder : GraphQlQueryBuilder<PlusHeroTeamStatusAveragesTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "physicalDamage" },
                new GraphQlFieldMetadata { Name = "magicalDamage" },
                new GraphQlFieldMetadata { Name = "physicalDamageReceived" },
                new GraphQlFieldMetadata { Name = "magicalDamageReceived" },
                new GraphQlFieldMetadata { Name = "disableCount" },
                new GraphQlFieldMetadata { Name = "disableDuration" },
                new GraphQlFieldMetadata { Name = "stunCount" },
                new GraphQlFieldMetadata { Name = "stunDuration" },
                new GraphQlFieldMetadata { Name = "slowCount" },
                new GraphQlFieldMetadata { Name = "slowDuration" },
                new GraphQlFieldMetadata { Name = "healingAllies" },
                new GraphQlFieldMetadata { Name = "purgeModifiers" },
                new GraphQlFieldMetadata { Name = "weakenCount" },
                new GraphQlFieldMetadata { Name = "weakenDuration" },
                new GraphQlFieldMetadata { Name = "pureDamageReceived" },
                new GraphQlFieldMetadata { Name = "pureDamage" }
            };

        protected override string TypeName { get { return "PlusHeroTeamStatusAveragesType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithPhysicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptPhysicalDamage()
        {
            return ExceptField("physicalDamage");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithMagicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptMagicalDamage()
        {
            return ExceptField("magicalDamage");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithPhysicalDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptPhysicalDamageReceived()
        {
            return ExceptField("physicalDamageReceived");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithMagicalDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptMagicalDamageReceived()
        {
            return ExceptField("magicalDamageReceived");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithDisableCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptDisableCount()
        {
            return ExceptField("disableCount");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithDisableDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("disableDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptDisableDuration()
        {
            return ExceptField("disableDuration");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithStunCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptStunCount()
        {
            return ExceptField("stunCount");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithStunDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stunDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptStunDuration()
        {
            return ExceptField("stunDuration");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithSlowCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptSlowCount()
        {
            return ExceptField("slowCount");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithSlowDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("slowDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptSlowDuration()
        {
            return ExceptField("slowDuration");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithHealingAllies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingAllies", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptHealingAllies()
        {
            return ExceptField("healingAllies");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithPurgeModifiers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("purgeModifiers", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptPurgeModifiers()
        {
            return ExceptField("purgeModifiers");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithWeakenCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weakenCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptWeakenCount()
        {
            return ExceptField("weakenCount");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithWeakenDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weakenDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptWeakenDuration()
        {
            return ExceptField("weakenDuration");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithPureDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptPureDamageReceived()
        {
            return ExceptField("pureDamageReceived");
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder WithPureDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlusHeroTeamStatusAveragesTypeQueryBuilder ExceptPureDamage()
        {
            return ExceptField("pureDamage");
        }
    }

    public partial class StratzQueryQueryBuilder : GraphQlQueryBuilder<StratzQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "admin", IsComplex = true, QueryBuilderType = typeof(AdminQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UserQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "page", IsComplex = true, QueryBuilderType = typeof(PageQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "blogs", IsComplex = true, QueryBuilderType = typeof(BlogTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "news", IsComplex = true, QueryBuilderType = typeof(NewsItemTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ticker", IsComplex = true },
                new GraphQlFieldMetadata { Name = "status", IsComplex = true, QueryBuilderType = typeof(ServerStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "languages", IsComplex = true, QueryBuilderType = typeof(LanguageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchRetry", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "search", IsComplex = true, QueryBuilderType = typeof(SearchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "StratzQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StratzQueryQueryBuilder WithAdmin(AdminQueryQueryBuilder adminQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("admin", alias, adminQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptAdmin()
        {
            return ExceptField("admin");
        }

        public StratzQueryQueryBuilder WithUser(UserQueryQueryBuilder userQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, userQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public StratzQueryQueryBuilder WithPage(PageQueryQueryBuilder pageQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("page", alias, pageQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptPage()
        {
            return ExceptField("page");
        }

        public StratzQueryQueryBuilder WithBlogs(BlogTypeQueryBuilder blogTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("blogs", alias, blogTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public StratzQueryQueryBuilder ExceptBlogs()
        {
            return ExceptField("blogs");
        }

        public StratzQueryQueryBuilder WithNews(NewsItemTypeQueryBuilder newsItemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("news", alias, newsItemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptNews()
        {
            return ExceptField("news");
        }

        public StratzQueryQueryBuilder WithTicker(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ticker", alias, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptTicker()
        {
            return ExceptField("ticker");
        }

        public StratzQueryQueryBuilder WithStatus(ServerStatusTypeQueryBuilder serverStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("status", alias, serverStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public StratzQueryQueryBuilder WithLanguages(LanguageTypeQueryBuilder languageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("languages", alias, languageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StratzQueryQueryBuilder ExceptLanguages()
        {
            return ExceptField("languages");
        }

        public StratzQueryQueryBuilder WithMatchRetry(QueryBuilderParameter<long?> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithScalarField("matchRetry", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public StratzQueryQueryBuilder ExceptMatchRetry()
        {
            return ExceptField("matchRetry");
        }

        public StratzQueryQueryBuilder WithSearch(SearchTypeQueryBuilder searchTypeQueryBuilder, QueryBuilderParameter<FilterSearchRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("search", alias, searchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public StratzQueryQueryBuilder ExceptSearch()
        {
            return ExceptField("search");
        }
    }

    public partial class AdminQueryQueryBuilder : GraphQlQueryBuilder<AdminQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "apiMemoryReport", IsComplex = true }
            };

        protected override string TypeName { get { return "AdminQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AdminQueryQueryBuilder WithApiMemoryReport(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("apiMemoryReport", alias, new GraphQlDirective[] { include, skip });
        }

        public AdminQueryQueryBuilder ExceptApiMemoryReport()
        {
            return ExceptField("apiMemoryReport");
        }
    }

    public partial class UserQueryQueryBuilder : GraphQlQueryBuilder<UserQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "profile", IsComplex = true, QueryBuilderType = typeof(UserTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "homepage", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UserHomepageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "followers", IsComplex = true, QueryBuilderType = typeof(FollowerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "following", IsComplex = true, QueryBuilderType = typeof(FollowerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedResponseTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UserQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserQueryQueryBuilder WithProfile(UserTypeQueryBuilder userTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("profile", alias, userTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryQueryBuilder ExceptProfile()
        {
            return ExceptField("profile");
        }

        public UserQueryQueryBuilder WithHomepage(UserHomepageTypeQueryBuilder userHomepageTypeQueryBuilder, QueryBuilderParameter<int> take, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );
            return WithObjectField("homepage", alias, userHomepageTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserQueryQueryBuilder ExceptHomepage()
        {
            return ExceptField("homepage");
        }

        public UserQueryQueryBuilder WithFollowers(FollowerTypeQueryBuilder followerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("followers", alias, followerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryQueryBuilder ExceptFollowers()
        {
            return ExceptField("followers");
        }

        public UserQueryQueryBuilder WithFollowing(FollowerTypeQueryBuilder followerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("following", alias, followerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserQueryQueryBuilder ExceptFollowing()
        {
            return ExceptField("following");
        }

        public UserQueryQueryBuilder WithFeed(FeedResponseTypeQueryBuilder feedResponseTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("feed", alias, feedResponseTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserQueryQueryBuilder ExceptFeed()
        {
            return ExceptField("feed");
        }
    }

    public partial class UserTypeQueryBuilder : GraphQlQueryBuilder<UserTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "profile", IsComplex = true, QueryBuilderType = typeof(CaptainJackIdentityPrivateProfileTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "recentMatch", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "followingCount" },
                new GraphQlFieldMetadata { Name = "followerCount" },
                new GraphQlFieldMetadata { Name = "followingLeagueCount" },
                new GraphQlFieldMetadata { Name = "followingTeamCount" },
                new GraphQlFieldMetadata { Name = "stratzApiApplications", IsComplex = true, QueryBuilderType = typeof(CaptainJackIdentityApiApplicationTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UserType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserTypeQueryBuilder WithProfile(CaptainJackIdentityPrivateProfileTypeQueryBuilder captainJackIdentityPrivateProfileTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("profile", alias, captainJackIdentityPrivateProfileTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptProfile()
        {
            return ExceptField("profile");
        }

        public UserTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public UserTypeQueryBuilder WithRecentMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("recentMatch", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptRecentMatch()
        {
            return ExceptField("recentMatch");
        }

        public UserTypeQueryBuilder WithFollowingCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("followingCount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptFollowingCount()
        {
            return ExceptField("followingCount");
        }

        public UserTypeQueryBuilder WithFollowerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("followerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptFollowerCount()
        {
            return ExceptField("followerCount");
        }

        public UserTypeQueryBuilder WithFollowingLeagueCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("followingLeagueCount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptFollowingLeagueCount()
        {
            return ExceptField("followingLeagueCount");
        }

        public UserTypeQueryBuilder WithFollowingTeamCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("followingTeamCount", alias, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptFollowingTeamCount()
        {
            return ExceptField("followingTeamCount");
        }

        public UserTypeQueryBuilder WithStratzApiApplications(CaptainJackIdentityApiApplicationTypeQueryBuilder captainJackIdentityApiApplicationTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stratzApiApplications", alias, captainJackIdentityApiApplicationTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UserTypeQueryBuilder ExceptStratzApiApplications()
        {
            return ExceptField("stratzApiApplications");
        }
    }

    public partial class CaptainJackIdentityPrivateProfileTypeQueryBuilder : GraphQlQueryBuilder<CaptainJackIdentityPrivateProfileTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "captainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "twitter" },
                new GraphQlFieldMetadata { Name = "facebook" },
                new GraphQlFieldMetadata { Name = "twitch" },
                new GraphQlFieldMetadata { Name = "youTube" },
                new GraphQlFieldMetadata { Name = "premiumEndDate" },
                new GraphQlFieldMetadata { Name = "isAdmin" },
                new GraphQlFieldMetadata { Name = "feedLevel" },
                new GraphQlFieldMetadata { Name = "emailLevel" },
                new GraphQlFieldMetadata { Name = "dailyEmail" },
                new GraphQlFieldMetadata { Name = "weeklyEmail" },
                new GraphQlFieldMetadata { Name = "monthlyEmail" },
                new GraphQlFieldMetadata { Name = "proCircuitFeedLevel" },
                new GraphQlFieldMetadata { Name = "proCircuitEmailLevel" },
                new GraphQlFieldMetadata { Name = "themeType" },
                new GraphQlFieldMetadata { Name = "languageId" },
                new GraphQlFieldMetadata { Name = "emailValidationCode" },
                new GraphQlFieldMetadata { Name = "isEmailValidated" },
                new GraphQlFieldMetadata { Name = "emailHour" },
                new GraphQlFieldMetadata { Name = "lastReadFeedTime" },
                new GraphQlFieldMetadata { Name = "lastDailyEmail" },
                new GraphQlFieldMetadata { Name = "lastWeeklyEmail" },
                new GraphQlFieldMetadata { Name = "lastMonthlyEmail" },
                new GraphQlFieldMetadata { Name = "lastLeagueDailyEmail" },
                new GraphQlFieldMetadata { Name = "lastTeamDailyEmail" },
                new GraphQlFieldMetadata { Name = "lastProCircuitDailyEmail" },
                new GraphQlFieldMetadata { Name = "unsubscribeCode" },
                new GraphQlFieldMetadata { Name = "lastSeen" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rosh", IsComplex = true, QueryBuilderType = typeof(RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "CaptainJackIdentityPrivateProfileType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithTwitter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitter", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptTwitter()
        {
            return ExceptField("twitter");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithFacebook(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("facebook", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptFacebook()
        {
            return ExceptField("facebook");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithTwitch(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("twitch", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptTwitch()
        {
            return ExceptField("twitch");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithYouTube(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("youTube", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptYouTube()
        {
            return ExceptField("youTube");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithPremiumEndDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("premiumEndDate", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptPremiumEndDate()
        {
            return ExceptField("premiumEndDate");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithIsAdmin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAdmin", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptIsAdmin()
        {
            return ExceptField("isAdmin");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithFeedLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptFeedLevel()
        {
            return ExceptField("feedLevel");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithEmailLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptEmailLevel()
        {
            return ExceptField("emailLevel");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptDailyEmail()
        {
            return ExceptField("dailyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithWeeklyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weeklyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptWeeklyEmail()
        {
            return ExceptField("weeklyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithMonthlyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("monthlyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptMonthlyEmail()
        {
            return ExceptField("monthlyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithProCircuitFeedLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("proCircuitFeedLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptProCircuitFeedLevel()
        {
            return ExceptField("proCircuitFeedLevel");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithProCircuitEmailLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("proCircuitEmailLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptProCircuitEmailLevel()
        {
            return ExceptField("proCircuitEmailLevel");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithThemeType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("themeType", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptThemeType()
        {
            return ExceptField("themeType");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLanguageId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLanguageId()
        {
            return ExceptField("languageId");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithEmailValidationCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailValidationCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptEmailValidationCode()
        {
            return ExceptField("emailValidationCode");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithIsEmailValidated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isEmailValidated", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptIsEmailValidated()
        {
            return ExceptField("isEmailValidated");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithEmailHour(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailHour", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptEmailHour()
        {
            return ExceptField("emailHour");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastReadFeedTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastReadFeedTime", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastReadFeedTime()
        {
            return ExceptField("lastReadFeedTime");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastDailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastDailyEmail()
        {
            return ExceptField("lastDailyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastWeeklyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastWeeklyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastWeeklyEmail()
        {
            return ExceptField("lastWeeklyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastMonthlyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMonthlyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastMonthlyEmail()
        {
            return ExceptField("lastMonthlyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastLeagueDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastLeagueDailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastLeagueDailyEmail()
        {
            return ExceptField("lastLeagueDailyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastTeamDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastTeamDailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastTeamDailyEmail()
        {
            return ExceptField("lastTeamDailyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastProCircuitDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastProCircuitDailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastProCircuitDailyEmail()
        {
            return ExceptField("lastProCircuitDailyEmail");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithUnsubscribeCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unsubscribeCode", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptUnsubscribeCode()
        {
            return ExceptField("unsubscribeCode");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithLastSeen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeen", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptLastSeen()
        {
            return ExceptField("lastSeen");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder WithRosh(RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder roshCaptainJackIdentityStatDifficultyTypeQueryBuilder, QueryBuilderParameter<RoshMatchesRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("rosh", alias, roshCaptainJackIdentityStatDifficultyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public CaptainJackIdentityPrivateProfileTypeQueryBuilder ExceptRosh()
        {
            return ExceptField("rosh");
        }
    }

    public partial class RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder : GraphQlQueryBuilder<RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "maxScore" }
            };

        protected override string TypeName { get { return "ROSHCaptainJackIdentityStatDifficultyType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder WithMaxScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxScore", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshCaptainJackIdentityStatDifficultyTypeQueryBuilder ExceptMaxScore()
        {
            return ExceptField("maxScore");
        }
    }

    public partial class CaptainJackIdentityApiApplicationTypeQueryBuilder : GraphQlQueryBuilder<CaptainJackIdentityApiApplicationTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "captainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "tokenType" },
                new GraphQlFieldMetadata { Name = "emailAddress" },
                new GraphQlFieldMetadata { Name = "discordAddress" },
                new GraphQlFieldMetadata { Name = "websiteAddress" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "isApproved" },
                new GraphQlFieldMetadata { Name = "apiKey" },
                new GraphQlFieldMetadata { Name = "secretKey" },
                new GraphQlFieldMetadata { Name = "issuer" },
                new GraphQlFieldMetadata { Name = "matomoReferenceToken" }
            };

        protected override string TypeName { get { return "CaptainJackIdentityApiApplicationType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithTokenType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tokenType", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptTokenType()
        {
            return ExceptField("tokenType");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithEmailAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptEmailAddress()
        {
            return ExceptField("emailAddress");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithDiscordAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("discordAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptDiscordAddress()
        {
            return ExceptField("discordAddress");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithWebsiteAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("websiteAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptWebsiteAddress()
        {
            return ExceptField("websiteAddress");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithIsApproved(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isApproved", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptIsApproved()
        {
            return ExceptField("isApproved");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithApiKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("apiKey", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptApiKey()
        {
            return ExceptField("apiKey");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithSecretKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secretKey", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptSecretKey()
        {
            return ExceptField("secretKey");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithIssuer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("issuer", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptIssuer()
        {
            return ExceptField("issuer");
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder WithMatomoReferenceToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matomoReferenceToken", alias, new GraphQlDirective[] { include, skip });
        }

        public CaptainJackIdentityApiApplicationTypeQueryBuilder ExceptMatomoReferenceToken()
        {
            return ExceptField("matomoReferenceToken");
        }
    }

    public partial class UserHomepageTypeQueryBuilder : GraphQlQueryBuilder<UserHomepageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "blogs", IsComplex = true, QueryBuilderType = typeof(BlogTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "upcomingLeagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "inProgressLeagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leagueMetas", IsComplex = true, QueryBuilderType = typeof(LeagueMetaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "topProPlayers", IsComplex = true, QueryBuilderType = typeof(ProPlayerFollowTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "topPlayersByHeroType", IsComplex = true, QueryBuilderType = typeof(TopPlayersByHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "topSynergiesByHero", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchAwards", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "recentRampages", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "recentWinStreaks", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "recentHighImps", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "recentMatches", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "activeLeagueGames", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "topLiveGames", IsComplex = true, QueryBuilderType = typeof(HomepageHeroSynergyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalComponents" }
            };

        protected override string TypeName { get { return "UserHomepageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UserHomepageTypeQueryBuilder WithBlogs(BlogTypeQueryBuilder blogTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedBlogIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedBlogIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedBlogIds", ArgumentValue = excludedBlogIds} );

            return WithObjectField("blogs", alias, blogTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptBlogs()
        {
            return ExceptField("blogs");
        }

        public UserHomepageTypeQueryBuilder WithUpcomingLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueTierIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedLeagueIds", ArgumentValue = excludedLeagueIds} );

            if (includedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueIds", ArgumentValue = includedLeagueIds} );

            if (includedLeagueTierIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueTierIds", ArgumentValue = includedLeagueTierIds} );

            return WithObjectField("upcomingLeagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptUpcomingLeagues()
        {
            return ExceptField("upcomingLeagues");
        }

        public UserHomepageTypeQueryBuilder WithInProgressLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueTierIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedLeagueIds", ArgumentValue = excludedLeagueIds} );

            if (includedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueIds", ArgumentValue = includedLeagueIds} );

            if (includedLeagueTierIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueTierIds", ArgumentValue = includedLeagueTierIds} );

            return WithObjectField("inProgressLeagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptInProgressLeagues()
        {
            return ExceptField("inProgressLeagues");
        }

        public UserHomepageTypeQueryBuilder WithLeagueMetas(LeagueMetaTypeQueryBuilder leagueMetaTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<int?>> excludedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueIds = null, QueryBuilderParameter<IEnumerable<int?>> includedLeagueTierIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (excludedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "excludedLeagueIds", ArgumentValue = excludedLeagueIds} );

            if (includedLeagueIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueIds", ArgumentValue = includedLeagueIds} );

            if (includedLeagueTierIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "includedLeagueTierIds", ArgumentValue = includedLeagueTierIds} );

            return WithObjectField("leagueMetas", alias, leagueMetaTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptLeagueMetas()
        {
            return ExceptField("leagueMetas");
        }

        public UserHomepageTypeQueryBuilder WithTopProPlayers(ProPlayerFollowTypeQueryBuilder proPlayerFollowTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("topProPlayers", alias, proPlayerFollowTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopProPlayers()
        {
            return ExceptField("topProPlayers");
        }

        public UserHomepageTypeQueryBuilder WithTopPlayersByHeroType(TopPlayersByHeroTypeQueryBuilder topPlayersByHeroTypeQueryBuilder, QueryBuilderParameter<int?> heroComponentsTake = null, QueryBuilderParameter<int?> playersTake = null, QueryBuilderParameter<int?> heroIds = null, QueryBuilderParameter<int?> rankBracketIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroComponentsTake != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroComponentsTake", ArgumentValue = heroComponentsTake} );

            if (playersTake != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "playersTake", ArgumentValue = playersTake} );

            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (rankBracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "rankBracketIds", ArgumentValue = rankBracketIds} );

            return WithObjectField("topPlayersByHeroType", alias, topPlayersByHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopPlayersByHeroType()
        {
            return ExceptField("topPlayersByHeroType");
        }

        public UserHomepageTypeQueryBuilder WithTopSynergiesByHero(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> synergyComponentsTake = null, QueryBuilderParameter<int?> heroIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (synergyComponentsTake != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "synergyComponentsTake", ArgumentValue = synergyComponentsTake} );

            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            return WithObjectField("topSynergiesByHero", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopSynergiesByHero()
        {
            return ExceptField("topSynergiesByHero");
        }

        public UserHomepageTypeQueryBuilder WithMatchAwards(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<byte?>> matchPlayerAwardTypeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (matchPlayerAwardTypeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchPlayerAwardTypeIds", ArgumentValue = matchPlayerAwardTypeIds} );

            return WithObjectField("matchAwards", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptMatchAwards()
        {
            return ExceptField("matchAwards");
        }

        public UserHomepageTypeQueryBuilder WithRecentRampages(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentRampages", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentRampages()
        {
            return ExceptField("recentRampages");
        }

        public UserHomepageTypeQueryBuilder WithRecentWinStreaks(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentWinStreaks", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentWinStreaks()
        {
            return ExceptField("recentWinStreaks");
        }

        public UserHomepageTypeQueryBuilder WithRecentHighImps(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentHighImps", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentHighImps()
        {
            return ExceptField("recentHighImps");
        }

        public UserHomepageTypeQueryBuilder WithRecentMatches(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("recentMatches", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptRecentMatches()
        {
            return ExceptField("recentMatches");
        }

        public UserHomepageTypeQueryBuilder WithActiveLeagueGames(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("activeLeagueGames", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptActiveLeagueGames()
        {
            return ExceptField("activeLeagueGames");
        }

        public UserHomepageTypeQueryBuilder WithTopLiveGames(HomepageHeroSynergyTypeQueryBuilder homepageHeroSynergyTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("topLiveGames", alias, homepageHeroSynergyTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public UserHomepageTypeQueryBuilder ExceptTopLiveGames()
        {
            return ExceptField("topLiveGames");
        }

        public UserHomepageTypeQueryBuilder WithTotalComponents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalComponents", alias, new GraphQlDirective[] { include, skip });
        }

        public UserHomepageTypeQueryBuilder ExceptTotalComponents()
        {
            return ExceptField("totalComponents");
        }
    }

    public partial class BlogTypeQueryBuilder : GraphQlQueryBuilder<BlogTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "captainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "bannerImageUrl" },
                new GraphQlFieldMetadata { Name = "data" },
                new GraphQlFieldMetadata { Name = "liveDateTime" },
                new GraphQlFieldMetadata { Name = "link" }
            };

        protected override string TypeName { get { return "BlogType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BlogTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BlogTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public BlogTypeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public BlogTypeQueryBuilder WithBannerImageUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bannerImageUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptBannerImageUrl()
        {
            return ExceptField("bannerImageUrl");
        }

        public BlogTypeQueryBuilder WithData(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("data", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptData()
        {
            return ExceptField("data");
        }

        public BlogTypeQueryBuilder WithLiveDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("liveDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptLiveDateTime()
        {
            return ExceptField("liveDateTime");
        }

        public BlogTypeQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("link", alias, new GraphQlDirective[] { include, skip });
        }

        public BlogTypeQueryBuilder ExceptLink()
        {
            return ExceptField("link");
        }
    }

    public partial class LeagueMetaTypeQueryBuilder : GraphQlQueryBuilder<LeagueMetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "leagueId" },
                new GraphQlFieldMetadata { Name = "bestRecord", IsComplex = true, QueryBuilderType = typeof(LeagueMetaDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mostPicked", IsComplex = true, QueryBuilderType = typeof(LeagueMetaDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mostBanned", IsComplex = true, QueryBuilderType = typeof(LeagueMetaDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "missingMatchCount" },
                new GraphQlFieldMetadata { Name = "totalMatchCount" },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeagueMetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueMetaTypeQueryBuilder WithLeagueId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leagueId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptLeagueId()
        {
            return ExceptField("leagueId");
        }

        public LeagueMetaTypeQueryBuilder WithBestRecord(LeagueMetaDetailTypeQueryBuilder leagueMetaDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("bestRecord", alias, leagueMetaDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptBestRecord()
        {
            return ExceptField("bestRecord");
        }

        public LeagueMetaTypeQueryBuilder WithMostPicked(LeagueMetaDetailTypeQueryBuilder leagueMetaDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mostPicked", alias, leagueMetaDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptMostPicked()
        {
            return ExceptField("mostPicked");
        }

        public LeagueMetaTypeQueryBuilder WithMostBanned(LeagueMetaDetailTypeQueryBuilder leagueMetaDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mostBanned", alias, leagueMetaDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptMostBanned()
        {
            return ExceptField("mostBanned");
        }

        public LeagueMetaTypeQueryBuilder WithMissingMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("missingMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptMissingMatchCount()
        {
            return ExceptField("missingMatchCount");
        }

        public LeagueMetaTypeQueryBuilder WithTotalMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptTotalMatchCount()
        {
            return ExceptField("totalMatchCount");
        }

        public LeagueMetaTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }
    }

    public partial class LeagueMetaDetailTypeQueryBuilder : GraphQlQueryBuilder<LeagueMetaDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lossCount" },
                new GraphQlFieldMetadata { Name = "winRate" },
                new GraphQlFieldMetadata { Name = "pickRate" },
                new GraphQlFieldMetadata { Name = "pickCount" },
                new GraphQlFieldMetadata { Name = "banRate" },
                new GraphQlFieldMetadata { Name = "banCount" }
            };

        protected override string TypeName { get { return "LeagueMetaDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueMetaDetailTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LeagueMetaDetailTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public LeagueMetaDetailTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }

        public LeagueMetaDetailTypeQueryBuilder WithWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptWinRate()
        {
            return ExceptField("winRate");
        }

        public LeagueMetaDetailTypeQueryBuilder WithPickRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptPickRate()
        {
            return ExceptField("pickRate");
        }

        public LeagueMetaDetailTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }

        public LeagueMetaDetailTypeQueryBuilder WithBanRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banRate", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptBanRate()
        {
            return ExceptField("banRate");
        }

        public LeagueMetaDetailTypeQueryBuilder WithBanCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("banCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueMetaDetailTypeQueryBuilder ExceptBanCount()
        {
            return ExceptField("banCount");
        }
    }

    public partial class ProPlayerFollowTypeQueryBuilder : GraphQlQueryBuilder<ProPlayerFollowTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "activity" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ProPlayerFollowType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProPlayerFollowTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProPlayerFollowTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public ProPlayerFollowTypeQueryBuilder WithActivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activity", alias, new GraphQlDirective[] { include, skip });
        }

        public ProPlayerFollowTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public ProPlayerFollowTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProPlayerFollowTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class TopPlayersByHeroTypeQueryBuilder : GraphQlQueryBuilder<TopPlayersByHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlayerLeaderBoardByHeroTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TopPlayersByHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TopPlayersByHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public TopPlayersByHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public TopPlayersByHeroTypeQueryBuilder WithPlayers(PlayerLeaderBoardByHeroTypeQueryBuilder playerLeaderBoardByHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, playerLeaderBoardByHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TopPlayersByHeroTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }
    }

    public partial class PlayerLeaderBoardByHeroTypeQueryBuilder : GraphQlQueryBuilder<PlayerLeaderBoardByHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "seasonBracket" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "impAverage" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "wins" },
                new GraphQlFieldMetadata { Name = "losses" },
                new GraphQlFieldMetadata { Name = "winStreak" },
                new GraphQlFieldMetadata { Name = "regionId" },
                new GraphQlFieldMetadata { Name = "changeInRanking" },
                new GraphQlFieldMetadata { Name = "createdDateTime" }
            };

        protected override string TypeName { get { return "PlayerLeaderBoardByHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithSeasonBracket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seasonBracket", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptSeasonBracket()
        {
            return ExceptField("seasonBracket");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithImpAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptImpAverage()
        {
            return ExceptField("impAverage");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wins", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptWins()
        {
            return ExceptField("wins");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithLosses(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("losses", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptLosses()
        {
            return ExceptField("losses");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithWinStreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winStreak", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptWinStreak()
        {
            return ExceptField("winStreak");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithChangeInRanking(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("changeInRanking", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptChangeInRanking()
        {
            return ExceptField("changeInRanking");
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerLeaderBoardByHeroTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }
    }

    public partial class HomepageHeroSynergyTypeQueryBuilder : GraphQlQueryBuilder<HomepageHeroSynergyTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "mainHeroId" },
                new GraphQlFieldMetadata { Name = "mainHeroBaseWinRate" },
                new GraphQlFieldMetadata { Name = "heroDryads", IsComplex = true, QueryBuilderType = typeof(HomepageHeroDryadTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HomepageHeroSynergyType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HomepageHeroSynergyTypeQueryBuilder WithMainHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mainHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroSynergyTypeQueryBuilder ExceptMainHeroId()
        {
            return ExceptField("mainHeroId");
        }

        public HomepageHeroSynergyTypeQueryBuilder WithMainHeroBaseWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mainHeroBaseWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroSynergyTypeQueryBuilder ExceptMainHeroBaseWinRate()
        {
            return ExceptField("mainHeroBaseWinRate");
        }

        public HomepageHeroSynergyTypeQueryBuilder WithHeroDryads(HomepageHeroDryadTypeQueryBuilder homepageHeroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroDryads", alias, homepageHeroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroSynergyTypeQueryBuilder ExceptHeroDryads()
        {
            return ExceptField("heroDryads");
        }
    }

    public partial class HomepageHeroDryadTypeQueryBuilder : GraphQlQueryBuilder<HomepageHeroDryadTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "mainHeroId" },
                new GraphQlFieldMetadata { Name = "comparisonHeroId" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "synergy" },
                new GraphQlFieldMetadata { Name = "winsAverage" },
                new GraphQlFieldMetadata { Name = "comparisonHeroBaseWinRate" }
            };

        protected override string TypeName { get { return "HomepageHeroDryadType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HomepageHeroDryadTypeQueryBuilder WithMainHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mainHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptMainHeroId()
        {
            return ExceptField("mainHeroId");
        }

        public HomepageHeroDryadTypeQueryBuilder WithComparisonHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("comparisonHeroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptComparisonHeroId()
        {
            return ExceptField("comparisonHeroId");
        }

        public HomepageHeroDryadTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HomepageHeroDryadTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HomepageHeroDryadTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HomepageHeroDryadTypeQueryBuilder WithSynergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("synergy", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptSynergy()
        {
            return ExceptField("synergy");
        }

        public HomepageHeroDryadTypeQueryBuilder WithWinsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptWinsAverage()
        {
            return ExceptField("winsAverage");
        }

        public HomepageHeroDryadTypeQueryBuilder WithComparisonHeroBaseWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("comparisonHeroBaseWinRate", alias, new GraphQlDirective[] { include, skip });
        }

        public HomepageHeroDryadTypeQueryBuilder ExceptComparisonHeroBaseWinRate()
        {
            return ExceptField("comparisonHeroBaseWinRate");
        }
    }

    public partial class FollowerTypeQueryBuilder : GraphQlQueryBuilder<FollowerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "captainJackIdentityId" },
                new GraphQlFieldMetadata { Name = "captainJackIdentityProfile", IsComplex = true, QueryBuilderType = typeof(CaptainJackIdentityPublicProfileTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feedLevel" },
                new GraphQlFieldMetadata { Name = "emailLevel" },
                new GraphQlFieldMetadata { Name = "dailyEmail" },
                new GraphQlFieldMetadata { Name = "weeklyEmail" },
                new GraphQlFieldMetadata { Name = "monthlyEmail" },
                new GraphQlFieldMetadata { Name = "isFavorite" },
                new GraphQlFieldMetadata { Name = "lastEmail" },
                new GraphQlFieldMetadata { Name = "didManualUpdate" }
            };

        protected override string TypeName { get { return "FollowerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FollowerTypeQueryBuilder WithCaptainJackIdentityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("captainJackIdentityId", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptCaptainJackIdentityId()
        {
            return ExceptField("captainJackIdentityId");
        }

        public FollowerTypeQueryBuilder WithCaptainJackIdentityProfile(CaptainJackIdentityPublicProfileTypeQueryBuilder captainJackIdentityPublicProfileTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("captainJackIdentityProfile", alias, captainJackIdentityPublicProfileTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptCaptainJackIdentityProfile()
        {
            return ExceptField("captainJackIdentityProfile");
        }

        public FollowerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public FollowerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public FollowerTypeQueryBuilder WithFeedLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptFeedLevel()
        {
            return ExceptField("feedLevel");
        }

        public FollowerTypeQueryBuilder WithEmailLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("emailLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptEmailLevel()
        {
            return ExceptField("emailLevel");
        }

        public FollowerTypeQueryBuilder WithDailyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dailyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptDailyEmail()
        {
            return ExceptField("dailyEmail");
        }

        public FollowerTypeQueryBuilder WithWeeklyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weeklyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptWeeklyEmail()
        {
            return ExceptField("weeklyEmail");
        }

        public FollowerTypeQueryBuilder WithMonthlyEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("monthlyEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptMonthlyEmail()
        {
            return ExceptField("monthlyEmail");
        }

        public FollowerTypeQueryBuilder WithIsFavorite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isFavorite", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptIsFavorite()
        {
            return ExceptField("isFavorite");
        }

        public FollowerTypeQueryBuilder WithLastEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastEmail", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptLastEmail()
        {
            return ExceptField("lastEmail");
        }

        public FollowerTypeQueryBuilder WithDidManualUpdate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didManualUpdate", alias, new GraphQlDirective[] { include, skip });
        }

        public FollowerTypeQueryBuilder ExceptDidManualUpdate()
        {
            return ExceptField("didManualUpdate");
        }
    }

    public partial class FeedResponseTypeQueryBuilder : GraphQlQueryBuilder<FeedResponseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "data", IsComplex = true, QueryBuilderType = typeof(FeedTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "count" },
                new GraphQlFieldMetadata { Name = "attackAnimationPoint" }
            };

        protected override string TypeName { get { return "FeedResponseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FeedResponseTypeQueryBuilder WithData(FeedTypeQueryBuilder feedTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("data", alias, feedTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedResponseTypeQueryBuilder ExceptData()
        {
            return ExceptField("data");
        }

        public FeedResponseTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedResponseTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public FeedResponseTypeQueryBuilder WithAttackAnimationPoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackAnimationPoint", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedResponseTypeQueryBuilder ExceptAttackAnimationPoint()
        {
            return ExceptField("attackAnimationPoint");
        }
    }

    public partial class FeedTypeQueryBuilder : GraphQlQueryBuilder<FeedTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "league", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "targetSteamAccountId" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "date" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "didWin" }
            };

        protected override string TypeName { get { return "FeedType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FeedTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public FeedTypeQueryBuilder WithLeague(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("league", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptLeague()
        {
            return ExceptField("league");
        }

        public FeedTypeQueryBuilder WithTargetSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("targetSteamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptTargetSteamAccountId()
        {
            return ExceptField("targetSteamAccountId");
        }

        public FeedTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public FeedTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public FeedTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public FeedTypeQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public FeedTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public FeedTypeQueryBuilder WithDidWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didWin", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedTypeQueryBuilder ExceptDidWin()
        {
            return ExceptField("didWin");
        }
    }

    public partial class PageQueryQueryBuilder : GraphQlQueryBuilder<PageQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "player", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PagePlayerQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PagePlayersQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(PageMatchesQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(PageLeaguesQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "aghanim", IsComplex = true, QueryBuilderType = typeof(PageAghanimQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "imp", IsComplex = true, QueryBuilderType = typeof(ImpQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "direTide", IsComplex = true, QueryBuilderType = typeof(PageDireTideQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "battlePass", IsComplex = true, QueryBuilderType = typeof(PageBattlepassQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rosh", IsComplex = true, QueryBuilderType = typeof(RoshQueryQueryBuilder) }
            };

        protected override string TypeName { get { return "PageQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageQueryQueryBuilder WithPlayer(PagePlayerQueryQueryBuilder pagePlayerQueryQueryBuilder, QueryBuilderParameter<long?> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithObjectField("player", alias, pagePlayerQueryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageQueryQueryBuilder ExceptPlayer()
        {
            return ExceptField("player");
        }

        public PageQueryQueryBuilder WithPlayers(PagePlayersQueryQueryBuilder pagePlayersQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, pagePlayersQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public PageQueryQueryBuilder WithMatches(PageMatchesQueryQueryBuilder pageMatchesQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, pageMatchesQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PageQueryQueryBuilder WithLeagues(PageLeaguesQueryQueryBuilder pageLeaguesQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leagues", alias, pageLeaguesQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }

        public PageQueryQueryBuilder WithAghanim(PageAghanimQueryQueryBuilder pageAghanimQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("aghanim", alias, pageAghanimQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptAghanim()
        {
            return ExceptField("aghanim");
        }

        public PageQueryQueryBuilder WithImp(ImpQueryQueryBuilder impQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("imp", alias, impQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PageQueryQueryBuilder WithDireTide(PageDireTideQueryQueryBuilder pageDireTideQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTide", alias, pageDireTideQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptDireTide()
        {
            return ExceptField("direTide");
        }

        public PageQueryQueryBuilder WithBattlePass(PageBattlepassQueryQueryBuilder pageBattlepassQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("battlePass", alias, pageBattlepassQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptBattlePass()
        {
            return ExceptField("battlePass");
        }

        public PageQueryQueryBuilder WithRosh(RoshQueryQueryBuilder roshQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rosh", alias, roshQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageQueryQueryBuilder ExceptRosh()
        {
            return ExceptField("rosh");
        }
    }

    public partial class PagePlayerQueryQueryBuilder : GraphQlQueryBuilder<PagePlayerQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "conduct", IsComplex = true, QueryBuilderType = typeof(PlayerConductResponseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "simpleSummary", IsComplex = true, QueryBuilderType = typeof(PlayerCardHoverTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "performance", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroPerformance", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerPerformanceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroesPerformance", IsComplex = true, QueryBuilderType = typeof(PlayerHeroesPerformanceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playedWithPro", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "breakdown", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "peers", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerTeammateTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PagePlayerQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PagePlayerQueryQueryBuilder WithConduct(PlayerConductResponseTypeQueryBuilder playerConductResponseTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("conduct", alias, playerConductResponseTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PagePlayerQueryQueryBuilder ExceptConduct()
        {
            return ExceptField("conduct");
        }

        public PagePlayerQueryQueryBuilder WithSimpleSummary(PlayerCardHoverTypeQueryBuilder playerCardHoverTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("simpleSummary", alias, playerCardHoverTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PagePlayerQueryQueryBuilder ExceptSimpleSummary()
        {
            return ExceptField("simpleSummary");
        }

        public PagePlayerQueryQueryBuilder WithPerformance(PlayerPerformanceTypeQueryBuilder playerPerformanceTypeQueryBuilder, QueryBuilderParameter<PlayerPerformanceMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("performance", alias, playerPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptPerformance()
        {
            return ExceptField("performance");
        }

        public PagePlayerQueryQueryBuilder WithHeroPerformance(PlayerPerformanceTypeQueryBuilder playerPerformanceTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<PlayerHeroPerformanceMatchesRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("heroPerformance", alias, playerPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptHeroPerformance()
        {
            return ExceptField("heroPerformance");
        }

        public PagePlayerQueryQueryBuilder WithHeroesPerformance(PlayerHeroesPerformanceTypeQueryBuilder playerHeroesPerformanceTypeQueryBuilder, QueryBuilderParameter<PlayerHeroesPerformanceMatchesRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("heroesPerformance", alias, playerHeroesPerformanceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptHeroesPerformance()
        {
            return ExceptField("heroesPerformance");
        }

        public PagePlayerQueryQueryBuilder WithPlayedWithPro(PlayerPlayedWithProTypeQueryBuilder playerPlayedWithProTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playedWithPro", alias, playerPlayedWithProTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PagePlayerQueryQueryBuilder ExceptPlayedWithPro()
        {
            return ExceptField("playedWithPro");
        }

        public PagePlayerQueryQueryBuilder WithBreakdown(PlayerBreakdownTypeQueryBuilder playerBreakdownTypeQueryBuilder, QueryBuilderParameter<PlayerBreakdownRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("breakdown", alias, playerBreakdownTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptBreakdown()
        {
            return ExceptField("breakdown");
        }

        public PagePlayerQueryQueryBuilder WithPeers(PlayerTeammateTypeQueryBuilder playerTeammateTypeQueryBuilder, QueryBuilderParameter<PlayerTeammatesGroupByRequestType> request, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("peers", alias, playerTeammateTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PagePlayerQueryQueryBuilder ExceptPeers()
        {
            return ExceptField("peers");
        }
    }

    public partial class PlayerConductResponseTypeQueryBuilder : GraphQlQueryBuilder<PlayerConductResponseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "lastIncidentDateTime" },
                new GraphQlFieldMetadata { Name = "lastIncidentMatchId" },
                new GraphQlFieldMetadata { Name = "recentMatchIncidents", IsComplex = true },
                new GraphQlFieldMetadata { Name = "behaviorScore" }
            };

        protected override string TypeName { get { return "PlayerConductResponseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerConductResponseTypeQueryBuilder WithLastIncidentDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastIncidentDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerConductResponseTypeQueryBuilder ExceptLastIncidentDateTime()
        {
            return ExceptField("lastIncidentDateTime");
        }

        public PlayerConductResponseTypeQueryBuilder WithLastIncidentMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastIncidentMatchId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerConductResponseTypeQueryBuilder ExceptLastIncidentMatchId()
        {
            return ExceptField("lastIncidentMatchId");
        }

        public PlayerConductResponseTypeQueryBuilder WithRecentMatchIncidents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("recentMatchIncidents", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerConductResponseTypeQueryBuilder ExceptRecentMatchIncidents()
        {
            return ExceptField("recentMatchIncidents");
        }

        public PlayerConductResponseTypeQueryBuilder WithBehaviorScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorScore", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerConductResponseTypeQueryBuilder ExceptBehaviorScore()
        {
            return ExceptField("behaviorScore");
        }
    }

    public partial class PlayerPlayedWithProTypeQueryBuilder : GraphQlQueryBuilder<PlayerPlayedWithProTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "playedCount" },
                new GraphQlFieldMetadata { Name = "totalCount" },
                new GraphQlFieldMetadata { Name = "casters", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "internationalWinners", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProTeamTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPlayedWithProType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPlayedWithProTypeQueryBuilder WithPlayedCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playedCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptPlayedCount()
        {
            return ExceptField("playedCount");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithCasters(PlayerPlayedWithProPlayerTypeQueryBuilder playerPlayedWithProPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("casters", alias, playerPlayedWithProPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptCasters()
        {
            return ExceptField("casters");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithTeams(PlayerPlayedWithProTeamTypeQueryBuilder playerPlayedWithProTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teams", alias, playerPlayedWithProTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public PlayerPlayedWithProTypeQueryBuilder WithInternationalWinners(PlayerPlayedWithProTeamTypeQueryBuilder playerPlayedWithProTeamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("internationalWinners", alias, playerPlayedWithProTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTypeQueryBuilder ExceptInternationalWinners()
        {
            return ExceptField("internationalWinners");
        }
    }

    public partial class PlayerPlayedWithProPlayerTypeQueryBuilder : GraphQlQueryBuilder<PlayerPlayedWithProPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "with", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "vs", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPlayedWithProPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithSteamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptSteamId()
        {
            return ExceptField("steamId");
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithWith(PlayerPlayedWithProPlayerMatchTypeQueryBuilder playerPlayedWithProPlayerMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("with", alias, playerPlayedWithProPlayerMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptWith()
        {
            return ExceptField("with");
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder WithVs(PlayerPlayedWithProPlayerMatchTypeQueryBuilder playerPlayedWithProPlayerMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vs", alias, playerPlayedWithProPlayerMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerTypeQueryBuilder ExceptVs()
        {
            return ExceptField("vs");
        }
    }

    public partial class PlayerPlayedWithProPlayerMatchTypeQueryBuilder : GraphQlQueryBuilder<PlayerPlayedWithProPlayerMatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPlayedWithProPlayerMatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPlayedWithProPlayerMatchTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerMatchTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public PlayerPlayedWithProPlayerMatchTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProPlayerMatchTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }
    }

    public partial class PlayerPlayedWithProTeamTypeQueryBuilder : GraphQlQueryBuilder<PlayerPlayedWithProTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "teamLogo" },
                new GraphQlFieldMetadata { Name = "teamName" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlayerPlayedWithProPlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerPlayedWithProTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerPlayedWithProTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder WithTeamLogo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamLogo", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder ExceptTeamLogo()
        {
            return ExceptField("teamLogo");
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder WithTeamName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamName", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder ExceptTeamName()
        {
            return ExceptField("teamName");
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder WithPlayers(PlayerPlayedWithProPlayerTypeQueryBuilder playerPlayedWithProPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, playerPlayedWithProPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerPlayedWithProTeamTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }
    }

    public partial class PlayerBreakdownTypeQueryBuilder : GraphQlQueryBuilder<PlayerBreakdownTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isStatsMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rankMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lobbyMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameModeMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "factionMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "regionMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "laneMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roleMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "partyMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "impMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "durationMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroAttributeMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dayOfWeekMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "timeOfDayMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "weekEndMatches", IsComplex = true, QueryBuilderType = typeof(PlayerBreakdownObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerBreakdownType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBreakdownTypeQueryBuilder WithMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PlayerBreakdownTypeQueryBuilder WithIsStatsMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("isStatsMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptIsStatsMatches()
        {
            return ExceptField("isStatsMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithRankMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rankMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptRankMatches()
        {
            return ExceptField("rankMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithLobbyMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lobbyMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptLobbyMatches()
        {
            return ExceptField("lobbyMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithGameModeMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("gameModeMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptGameModeMatches()
        {
            return ExceptField("gameModeMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithFactionMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("factionMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptFactionMatches()
        {
            return ExceptField("factionMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithRegionMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("regionMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptRegionMatches()
        {
            return ExceptField("regionMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithLaneMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("laneMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptLaneMatches()
        {
            return ExceptField("laneMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithRoleMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roleMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptRoleMatches()
        {
            return ExceptField("roleMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithPartyMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("partyMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptPartyMatches()
        {
            return ExceptField("partyMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithImpMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("impMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptImpMatches()
        {
            return ExceptField("impMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithDurationMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("durationMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptDurationMatches()
        {
            return ExceptField("durationMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithHeroAttributeMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroAttributeMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptHeroAttributeMatches()
        {
            return ExceptField("heroAttributeMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithDayOfWeekMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dayOfWeekMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptDayOfWeekMatches()
        {
            return ExceptField("dayOfWeekMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithTimeOfDayMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("timeOfDayMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptTimeOfDayMatches()
        {
            return ExceptField("timeOfDayMatches");
        }

        public PlayerBreakdownTypeQueryBuilder WithWeekEndMatches(PlayerBreakdownObjectTypeQueryBuilder playerBreakdownObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("weekEndMatches", alias, playerBreakdownObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownTypeQueryBuilder ExceptWeekEndMatches()
        {
            return ExceptField("weekEndMatches");
        }
    }

    public partial class PlayerBreakdownObjectTypeQueryBuilder : GraphQlQueryBuilder<PlayerBreakdownObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "win" },
                new GraphQlFieldMetadata { Name = "imp" },
                new GraphQlFieldMetadata { Name = "lastSeenDateTime" }
            };

        protected override string TypeName { get { return "PlayerBreakdownObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBreakdownObjectTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownObjectTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PlayerBreakdownObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerBreakdownObjectTypeQueryBuilder WithWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("win", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownObjectTypeQueryBuilder ExceptWin()
        {
            return ExceptField("win");
        }

        public PlayerBreakdownObjectTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownObjectTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }

        public PlayerBreakdownObjectTypeQueryBuilder WithLastSeenDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastSeenDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBreakdownObjectTypeQueryBuilder ExceptLastSeenDateTime()
        {
            return ExceptField("lastSeenDateTime");
        }
    }

    public partial class PlayerTeammateTypeQueryBuilder : GraphQlQueryBuilder<PlayerTeammateTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "avgGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "avgExperiencePerMinute" },
                new GraphQlFieldMetadata { Name = "avgKDA" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" }
            };

        protected override string TypeName { get { return "PlayerTeammateType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerTeammateTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerTeammateTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerTeammateTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerTeammateTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgGoldPerMinute()
        {
            return ExceptField("avgGoldPerMinute");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgExperiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgExperiencePerMinute()
        {
            return ExceptField("avgExperiencePerMinute");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgKda(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKDA", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgKda()
        {
            return ExceptField("avgKDA");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public PlayerTeammateTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }

        public PlayerTeammateTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }

        public PlayerTeammateTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerTeammateTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }
    }

    public partial class PagePlayersQueryQueryBuilder : GraphQlQueryBuilder<PagePlayersQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountByRank", IsComplex = true, QueryBuilderType = typeof(SteamAccountByRankTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PagePlayersQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PagePlayersQueryQueryBuilder WithSteamAccountByRank(SteamAccountByRankTypeQueryBuilder steamAccountByRankTypeQueryBuilder, QueryBuilderParameter<long?> week = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            return WithObjectField("steamAccountByRank", alias, steamAccountByRankTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PagePlayersQueryQueryBuilder ExceptSteamAccountByRank()
        {
            return ExceptField("steamAccountByRank");
        }
    }

    public partial class SteamAccountByRankTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountByRankTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "rank" },
                new GraphQlFieldMetadata { Name = "playerCount" }
            };

        protected override string TypeName { get { return "SteamAccountByRankType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountByRankTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountByRankTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public SteamAccountByRankTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountByRankTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }
    }

    public partial class PageMatchesQueryQueryBuilder : GraphQlQueryBuilder<PageMatchesQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchesStatsHour", IsComplex = true, QueryBuilderType = typeof(MatchesHourTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesStatsDay", IsComplex = true, QueryBuilderType = typeof(MatchesDayTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesStatsWeek", IsComplex = true, QueryBuilderType = typeof(MatchesWeekTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesStatsMonth", IsComplex = true, QueryBuilderType = typeof(MatchesMonthTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchesStatsGameVersion", IsComplex = true, QueryBuilderType = typeof(MatchesGameVersionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchmakingStats", IsComplex = true, QueryBuilderType = typeof(MatchmakingStatsTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageMatchesQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageMatchesQueryQueryBuilder WithMatchesStatsHour(MatchesHourTypeQueryBuilder matchesHourTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsHour", alias, matchesHourTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsHour()
        {
            return ExceptField("matchesStatsHour");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsDay(MatchesDayTypeQueryBuilder matchesDayTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsDay", alias, matchesDayTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsDay()
        {
            return ExceptField("matchesStatsDay");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsWeek(MatchesWeekTypeQueryBuilder matchesWeekTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsWeek", alias, matchesWeekTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsWeek()
        {
            return ExceptField("matchesStatsWeek");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsMonth(MatchesMonthTypeQueryBuilder matchesMonthTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsMonth", alias, matchesMonthTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsMonth()
        {
            return ExceptField("matchesStatsMonth");
        }

        public PageMatchesQueryQueryBuilder WithMatchesStatsGameVersion(MatchesGameVersionTypeQueryBuilder matchesGameVersionTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            return WithObjectField("matchesStatsGameVersion", alias, matchesGameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageMatchesQueryQueryBuilder ExceptMatchesStatsGameVersion()
        {
            return ExceptField("matchesStatsGameVersion");
        }

        public PageMatchesQueryQueryBuilder WithMatchmakingStats(MatchmakingStatsTypeQueryBuilder matchmakingStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchmakingStats", alias, matchmakingStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageMatchesQueryQueryBuilder ExceptMatchmakingStats()
        {
            return ExceptField("matchmakingStats");
        }
    }

    public partial class MatchesHourTypeQueryBuilder : GraphQlQueryBuilder<MatchesHourTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "hour" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "MatchesHourType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchesHourTypeQueryBuilder WithHour(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hour", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesHourTypeQueryBuilder ExceptHour()
        {
            return ExceptField("hour");
        }

        public MatchesHourTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesHourTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class MatchesDayTypeQueryBuilder : GraphQlQueryBuilder<MatchesDayTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "day" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "MatchesDayType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchesDayTypeQueryBuilder WithDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("day", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesDayTypeQueryBuilder ExceptDay()
        {
            return ExceptField("day");
        }

        public MatchesDayTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesDayTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class MatchesWeekTypeQueryBuilder : GraphQlQueryBuilder<MatchesWeekTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "MatchesWeekType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchesWeekTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesWeekTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public MatchesWeekTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesWeekTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class MatchesMonthTypeQueryBuilder : GraphQlQueryBuilder<MatchesMonthTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "month" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "MatchesMonthType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchesMonthTypeQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesMonthTypeQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public MatchesMonthTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesMonthTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class MatchesGameVersionTypeQueryBuilder : GraphQlQueryBuilder<MatchesGameVersionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "MatchesGameVersionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchesGameVersionTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesGameVersionTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public MatchesGameVersionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchesGameVersionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class MatchmakingStatsTypeQueryBuilder : GraphQlQueryBuilder<MatchmakingStatsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "uSWest" },
                new GraphQlFieldMetadata { Name = "uSEast" },
                new GraphQlFieldMetadata { Name = "europe" },
                new GraphQlFieldMetadata { Name = "singapore" },
                new GraphQlFieldMetadata { Name = "brazil" },
                new GraphQlFieldMetadata { Name = "stockholm" },
                new GraphQlFieldMetadata { Name = "austria" },
                new GraphQlFieldMetadata { Name = "australia" },
                new GraphQlFieldMetadata { Name = "southAfrica" },
                new GraphQlFieldMetadata { Name = "perfectWorldTelecom" },
                new GraphQlFieldMetadata { Name = "perfectWorldUnicom" },
                new GraphQlFieldMetadata { Name = "dubai" },
                new GraphQlFieldMetadata { Name = "chile" },
                new GraphQlFieldMetadata { Name = "peru" },
                new GraphQlFieldMetadata { Name = "india" },
                new GraphQlFieldMetadata { Name = "perfectWorldTelecomGuangdong" },
                new GraphQlFieldMetadata { Name = "perfectWorldTelecomZhejiang" },
                new GraphQlFieldMetadata { Name = "japan" },
                new GraphQlFieldMetadata { Name = "perfectWorldTelecomWuhan" },
                new GraphQlFieldMetadata { Name = "taiwan" },
                new GraphQlFieldMetadata { Name = "perfectWorldUnicomTianjin" }
            };

        protected override string TypeName { get { return "MatchmakingStatsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchmakingStatsTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public MatchmakingStatsTypeQueryBuilder WithUsWest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uSWest", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptUsWest()
        {
            return ExceptField("uSWest");
        }

        public MatchmakingStatsTypeQueryBuilder WithUsEast(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uSEast", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptUsEast()
        {
            return ExceptField("uSEast");
        }

        public MatchmakingStatsTypeQueryBuilder WithEurope(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("europe", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptEurope()
        {
            return ExceptField("europe");
        }

        public MatchmakingStatsTypeQueryBuilder WithSingapore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("singapore", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptSingapore()
        {
            return ExceptField("singapore");
        }

        public MatchmakingStatsTypeQueryBuilder WithBrazil(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("brazil", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptBrazil()
        {
            return ExceptField("brazil");
        }

        public MatchmakingStatsTypeQueryBuilder WithStockholm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stockholm", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptStockholm()
        {
            return ExceptField("stockholm");
        }

        public MatchmakingStatsTypeQueryBuilder WithAustria(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("austria", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptAustria()
        {
            return ExceptField("austria");
        }

        public MatchmakingStatsTypeQueryBuilder WithAustralia(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("australia", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptAustralia()
        {
            return ExceptField("australia");
        }

        public MatchmakingStatsTypeQueryBuilder WithSouthAfrica(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("southAfrica", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptSouthAfrica()
        {
            return ExceptField("southAfrica");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecom()
        {
            return ExceptField("perfectWorldTelecom");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldUnicom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldUnicom", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldUnicom()
        {
            return ExceptField("perfectWorldUnicom");
        }

        public MatchmakingStatsTypeQueryBuilder WithDubai(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dubai", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptDubai()
        {
            return ExceptField("dubai");
        }

        public MatchmakingStatsTypeQueryBuilder WithChile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chile", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptChile()
        {
            return ExceptField("chile");
        }

        public MatchmakingStatsTypeQueryBuilder WithPeru(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("peru", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPeru()
        {
            return ExceptField("peru");
        }

        public MatchmakingStatsTypeQueryBuilder WithIndia(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("india", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptIndia()
        {
            return ExceptField("india");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecomGuangdong(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecomGuangdong", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecomGuangdong()
        {
            return ExceptField("perfectWorldTelecomGuangdong");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecomZhejiang(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecomZhejiang", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecomZhejiang()
        {
            return ExceptField("perfectWorldTelecomZhejiang");
        }

        public MatchmakingStatsTypeQueryBuilder WithJapan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("japan", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptJapan()
        {
            return ExceptField("japan");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldTelecomWuhan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldTelecomWuhan", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldTelecomWuhan()
        {
            return ExceptField("perfectWorldTelecomWuhan");
        }

        public MatchmakingStatsTypeQueryBuilder WithTaiwan(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("taiwan", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptTaiwan()
        {
            return ExceptField("taiwan");
        }

        public MatchmakingStatsTypeQueryBuilder WithPerfectWorldUnicomTianjin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("perfectWorldUnicomTianjin", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchmakingStatsTypeQueryBuilder ExceptPerfectWorldUnicomTianjin()
        {
            return ExceptField("perfectWorldUnicomTianjin");
        }
    }

    public partial class PageLeaguesQueryQueryBuilder : GraphQlQueryBuilder<PageLeaguesQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "dpcPositionStats", IsComplex = true, QueryBuilderType = typeof(LeagueDpcPositionStatObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageLeaguesQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageLeaguesQueryQueryBuilder WithDpcPositionStats(LeagueDpcPositionStatObjectTypeQueryBuilder leagueDpcPositionStatObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dpcPositionStats", alias, leagueDpcPositionStatObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageLeaguesQueryQueryBuilder ExceptDpcPositionStats()
        {
            return ExceptField("dpcPositionStats");
        }
    }

    public partial class LeagueDpcPositionStatObjectTypeQueryBuilder : GraphQlQueryBuilder<LeagueDpcPositionStatObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "avgKills" },
                new GraphQlFieldMetadata { Name = "avgDeaths" },
                new GraphQlFieldMetadata { Name = "avgAssists" }
            };

        protected override string TypeName { get { return "LeagueDpcPositionStatObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeagueDpcPositionStatObjectTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder WithAvgKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgKills", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder ExceptAvgKills()
        {
            return ExceptField("avgKills");
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder WithAvgDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder ExceptAvgDeaths()
        {
            return ExceptField("avgDeaths");
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder WithAvgAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public LeagueDpcPositionStatObjectTypeQueryBuilder ExceptAvgAssists()
        {
            return ExceptField("avgAssists");
        }
    }

    public partial class PageAghanimQueryQueryBuilder : GraphQlQueryBuilder<PageAghanimQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "match", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AghanimLabMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(AghanimLabMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroCompositions", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AghanimLabHeroCompositionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroComposition", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AghanimLabHeroCompositionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winRate", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AghanimLabHeroWinRateTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroAbility", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AghanimLabHeroAbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "room", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AghanimLabRoomTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roomModifier", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(Ti2020CustomGameRoomModifierTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageAghanimQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageAghanimQueryQueryBuilder WithMatch(AghanimLabMatchTypeQueryBuilder aghanimLabMatchTypeQueryBuilder, QueryBuilderParameter<long?> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("match", alias, aghanimLabMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public PageAghanimQueryQueryBuilder WithMatches(AghanimLabMatchTypeQueryBuilder aghanimLabMatchTypeQueryBuilder, QueryBuilderParameter<FilterAghanimLabMatchRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("matches", alias, aghanimLabMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PageAghanimQueryQueryBuilder WithHeroCompositions(AghanimLabHeroCompositionTypeQueryBuilder aghanimLabHeroCompositionTypeQueryBuilder, QueryBuilderParameter<FilterAghanimLabHeroCompositionRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("heroCompositions", alias, aghanimLabHeroCompositionTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptHeroCompositions()
        {
            return ExceptField("heroCompositions");
        }

        public PageAghanimQueryQueryBuilder WithHeroComposition(AghanimLabHeroCompositionTypeQueryBuilder aghanimLabHeroCompositionTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds, QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> difficulty, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "difficulty", ArgumentValue = difficulty} );
            return WithObjectField("heroComposition", alias, aghanimLabHeroCompositionTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptHeroComposition()
        {
            return ExceptField("heroComposition");
        }

        public PageAghanimQueryQueryBuilder WithWinRate(AghanimLabHeroWinRateTypeQueryBuilder aghanimLabHeroWinRateTypeQueryBuilder, QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> difficulty, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "difficulty", ArgumentValue = difficulty} );
            return WithObjectField("winRate", alias, aghanimLabHeroWinRateTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptWinRate()
        {
            return ExceptField("winRate");
        }

        public PageAghanimQueryQueryBuilder WithHeroAbility(AghanimLabHeroAbilityTypeQueryBuilder aghanimLabHeroAbilityTypeQueryBuilder, QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> difficulty, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "difficulty", ArgumentValue = difficulty} );
            return WithObjectField("heroAbility", alias, aghanimLabHeroAbilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptHeroAbility()
        {
            return ExceptField("heroAbility");
        }

        public PageAghanimQueryQueryBuilder WithRoom(AghanimLabRoomTypeQueryBuilder aghanimLabRoomTypeQueryBuilder, QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> difficulty, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "difficulty", ArgumentValue = difficulty} );
            return WithObjectField("room", alias, aghanimLabRoomTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptRoom()
        {
            return ExceptField("room");
        }

        public PageAghanimQueryQueryBuilder WithRoomModifier(Ti2020CustomGameRoomModifierTypeQueryBuilder ti2020CustomGameRoomModifierTypeQueryBuilder, QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> difficulty, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "difficulty", ArgumentValue = difficulty} );
            return WithObjectField("roomModifier", alias, ti2020CustomGameRoomModifierTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageAghanimQueryQueryBuilder ExceptRoomModifier()
        {
            return ExceptField("roomModifier");
        }
    }

    public partial class AghanimLabMatchTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabMatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "didWin" },
                new GraphQlFieldMetadata { Name = "durationSeconds" },
                new GraphQlFieldMetadata { Name = "startDateTime" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "clusterId" },
                new GraphQlFieldMetadata { Name = "lobbyType" },
                new GraphQlFieldMetadata { Name = "numKills" },
                new GraphQlFieldMetadata { Name = "numDeaths" },
                new GraphQlFieldMetadata { Name = "numHumanPlayers" },
                new GraphQlFieldMetadata { Name = "gameMode" },
                new GraphQlFieldMetadata { Name = "replaySalt" },
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "depth" },
                new GraphQlFieldMetadata { Name = "seed" },
                new GraphQlFieldMetadata { Name = "battlePoints" },
                new GraphQlFieldMetadata { Name = "score" },
                new GraphQlFieldMetadata { Name = "arcaneFragments" },
                new GraphQlFieldMetadata { Name = "goldBags" },
                new GraphQlFieldMetadata { Name = "regionId" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(AghanimLabPlayerSeasonOneTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "depthList", IsComplex = true, QueryBuilderType = typeof(AghanimLabMatchDepthListTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "AghanimLabMatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabMatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AghanimLabMatchTypeQueryBuilder WithDidWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didWin", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDidWin()
        {
            return ExceptField("didWin");
        }

        public AghanimLabMatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public AghanimLabMatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public AghanimLabMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public AghanimLabMatchTypeQueryBuilder WithClusterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clusterId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptClusterId()
        {
            return ExceptField("clusterId");
        }

        public AghanimLabMatchTypeQueryBuilder WithLobbyType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lobbyType", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptLobbyType()
        {
            return ExceptField("lobbyType");
        }

        public AghanimLabMatchTypeQueryBuilder WithNumKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numKills", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptNumKills()
        {
            return ExceptField("numKills");
        }

        public AghanimLabMatchTypeQueryBuilder WithNumDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptNumDeaths()
        {
            return ExceptField("numDeaths");
        }

        public AghanimLabMatchTypeQueryBuilder WithNumHumanPlayers(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numHumanPlayers", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptNumHumanPlayers()
        {
            return ExceptField("numHumanPlayers");
        }

        public AghanimLabMatchTypeQueryBuilder WithGameMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameMode", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptGameMode()
        {
            return ExceptField("gameMode");
        }

        public AghanimLabMatchTypeQueryBuilder WithReplaySalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replaySalt", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptReplaySalt()
        {
            return ExceptField("replaySalt");
        }

        public AghanimLabMatchTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabMatchTypeQueryBuilder WithDepth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("depth", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDepth()
        {
            return ExceptField("depth");
        }

        public AghanimLabMatchTypeQueryBuilder WithSeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("seed", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptSeed()
        {
            return ExceptField("seed");
        }

        public AghanimLabMatchTypeQueryBuilder WithBattlePoints(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("battlePoints", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptBattlePoints()
        {
            return ExceptField("battlePoints");
        }

        public AghanimLabMatchTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public AghanimLabMatchTypeQueryBuilder WithArcaneFragments(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("arcaneFragments", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptArcaneFragments()
        {
            return ExceptField("arcaneFragments");
        }

        public AghanimLabMatchTypeQueryBuilder WithGoldBags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldBags", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptGoldBags()
        {
            return ExceptField("goldBags");
        }

        public AghanimLabMatchTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }

        public AghanimLabMatchTypeQueryBuilder WithPlayers(AghanimLabPlayerSeasonOneTypeQueryBuilder aghanimLabPlayerSeasonOneTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (steamAccountId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );

            return WithObjectField("players", alias, aghanimLabPlayerSeasonOneTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AghanimLabMatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public AghanimLabMatchTypeQueryBuilder WithDepthList(AghanimLabMatchDepthListTypeQueryBuilder aghanimLabMatchDepthListTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("depthList", alias, aghanimLabMatchDepthListTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchTypeQueryBuilder ExceptDepthList()
        {
            return ExceptField("depthList");
        }
    }

    public partial class AghanimLabPlayerSeasonOneTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabPlayerSeasonOneTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "playerSlot" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isVictory" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "leaverStatus" },
                new GraphQlFieldMetadata { Name = "numLastHits" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "experiencePerMinute" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "goldSpent" },
                new GraphQlFieldMetadata { Name = "partyId" },
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" },
                new GraphQlFieldMetadata { Name = "neutral0Id" },
                new GraphQlFieldMetadata { Name = "arcaneFragments" },
                new GraphQlFieldMetadata { Name = "bonusArcaneFragments" },
                new GraphQlFieldMetadata { Name = "goldBags" },
                new GraphQlFieldMetadata { Name = "neutralItemId" },
                new GraphQlFieldMetadata { Name = "playerDepthList", IsComplex = true, QueryBuilderType = typeof(AghanimLabPlayerDepthListTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "blessings", IsComplex = true, QueryBuilderType = typeof(AghanimLabPlayerBlessingObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "AghanimLabPlayerSeasonOneType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithLeaverStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaverStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptLeaverStatus()
        {
            return ExceptField("leaverStatus");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithNumLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptNumLastHits()
        {
            return ExceptField("numLastHits");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptGoldSpent()
        {
            return ExceptField("goldSpent");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithPartyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("partyId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptPartyId()
        {
            return ExceptField("partyId");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithNeutral0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutral0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptNeutral0Id()
        {
            return ExceptField("neutral0Id");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithArcaneFragments(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("arcaneFragments", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptArcaneFragments()
        {
            return ExceptField("arcaneFragments");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithBonusArcaneFragments(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bonusArcaneFragments", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptBonusArcaneFragments()
        {
            return ExceptField("bonusArcaneFragments");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithGoldBags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldBags", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptGoldBags()
        {
            return ExceptField("goldBags");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithNeutralItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutralItemId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptNeutralItemId()
        {
            return ExceptField("neutralItemId");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithPlayerDepthList(AghanimLabPlayerDepthListTypeQueryBuilder aghanimLabPlayerDepthListTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerDepthList", alias, aghanimLabPlayerDepthListTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptPlayerDepthList()
        {
            return ExceptField("playerDepthList");
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder WithBlessings(AghanimLabPlayerBlessingObjectTypeQueryBuilder aghanimLabPlayerBlessingObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("blessings", alias, aghanimLabPlayerBlessingObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerSeasonOneTypeQueryBuilder ExceptBlessings()
        {
            return ExceptField("blessings");
        }
    }

    public partial class AghanimLabPlayerDepthListTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabPlayerDepthListTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "numDeaths" },
                new GraphQlFieldMetadata { Name = "goldBags" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "rarity" },
                new GraphQlFieldMetadata { Name = "selectedRewardAbilityId" },
                new GraphQlFieldMetadata { Name = "selectedRewardAbility", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unSelectedRewardAbilityId1" },
                new GraphQlFieldMetadata { Name = "unSelectedRewardAbility1", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unSelectedRewardAbilityId2" },
                new GraphQlFieldMetadata { Name = "unSelectedRewardAbility2", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "selectedRewardImageAbilityId" }
            };

        protected override string TypeName { get { return "AghanimLabPlayerDepthListType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabPlayerDepthListTypeQueryBuilder WithNumDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptNumDeaths()
        {
            return ExceptField("numDeaths");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithGoldBags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldBags", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptGoldBags()
        {
            return ExceptField("goldBags");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithRarity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rarity", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptRarity()
        {
            return ExceptField("rarity");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithSelectedRewardAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedRewardAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptSelectedRewardAbilityId()
        {
            return ExceptField("selectedRewardAbilityId");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithSelectedRewardAbility(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("selectedRewardAbility", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptSelectedRewardAbility()
        {
            return ExceptField("selectedRewardAbility");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbilityId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unSelectedRewardAbilityId1", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbilityId1()
        {
            return ExceptField("unSelectedRewardAbilityId1");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbility1(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("unSelectedRewardAbility1", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbility1()
        {
            return ExceptField("unSelectedRewardAbility1");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbilityId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unSelectedRewardAbilityId2", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbilityId2()
        {
            return ExceptField("unSelectedRewardAbilityId2");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithUnSelectedRewardAbility2(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("unSelectedRewardAbility2", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptUnSelectedRewardAbility2()
        {
            return ExceptField("unSelectedRewardAbility2");
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder WithSelectedRewardImageAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedRewardImageAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerDepthListTypeQueryBuilder ExceptSelectedRewardImageAbilityId()
        {
            return ExceptField("selectedRewardImageAbilityId");
        }
    }

    public partial class AbilityCustomGameTypeQueryBuilder : GraphQlQueryBuilder<AbilityCustomGameTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "abilityName" },
                new GraphQlFieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameLanguageTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "AbilityCustomGameType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityCustomGameTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityCustomGameTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public AbilityCustomGameTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityCustomGameTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AbilityCustomGameTypeQueryBuilder WithAbilityName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityName", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityCustomGameTypeQueryBuilder ExceptAbilityName()
        {
            return ExceptField("abilityName");
        }

        public AbilityCustomGameTypeQueryBuilder WithLanguage(AbilityCustomGameLanguageTypeQueryBuilder abilityCustomGameLanguageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, abilityCustomGameLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AbilityCustomGameTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }
    }

    public partial class AbilityCustomGameLanguageTypeQueryBuilder : GraphQlQueryBuilder<AbilityCustomGameLanguageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "description" }
            };

        protected override string TypeName { get { return "AbilityCustomGameLanguageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AbilityCustomGameLanguageTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityCustomGameLanguageTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public AbilityCustomGameLanguageTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public AbilityCustomGameLanguageTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }
    }

    public partial class AghanimLabPlayerBlessingObjectTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabPlayerBlessingObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "AghanimLabPlayerBlessingObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabPlayerBlessingObjectTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerBlessingObjectTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public AghanimLabPlayerBlessingObjectTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabPlayerBlessingObjectTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public partial class AghanimLabMatchDepthListTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabMatchDepthListTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "selectedElite" },
                new GraphQlFieldMetadata { Name = "selectedEncounter" },
                new GraphQlFieldMetadata { Name = "selectedEncounterEnum" },
                new GraphQlFieldMetadata { Name = "selectedHidden" },
                new GraphQlFieldMetadata { Name = "selectedReward" },
                new GraphQlFieldMetadata { Name = "unselectedElite" },
                new GraphQlFieldMetadata { Name = "unselectedEncounter" },
                new GraphQlFieldMetadata { Name = "unselectedHidden" },
                new GraphQlFieldMetadata { Name = "unselectedReward" },
                new GraphQlFieldMetadata { Name = "ascensionAbilities", IsComplex = true, QueryBuilderType = typeof(AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "AghanimLabMatchDepthListType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabMatchDepthListTypeQueryBuilder WithSelectedElite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedElite", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptSelectedElite()
        {
            return ExceptField("selectedElite");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithSelectedEncounter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedEncounter", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptSelectedEncounter()
        {
            return ExceptField("selectedEncounter");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithSelectedEncounterEnum(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedEncounterEnum", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptSelectedEncounterEnum()
        {
            return ExceptField("selectedEncounterEnum");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithSelectedHidden(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedHidden", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptSelectedHidden()
        {
            return ExceptField("selectedHidden");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithSelectedReward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("selectedReward", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptSelectedReward()
        {
            return ExceptField("selectedReward");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithUnselectedElite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unselectedElite", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptUnselectedElite()
        {
            return ExceptField("unselectedElite");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithUnselectedEncounter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unselectedEncounter", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptUnselectedEncounter()
        {
            return ExceptField("unselectedEncounter");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithUnselectedHidden(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unselectedHidden", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptUnselectedHidden()
        {
            return ExceptField("unselectedHidden");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithUnselectedReward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unselectedReward", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptUnselectedReward()
        {
            return ExceptField("unselectedReward");
        }

        public AghanimLabMatchDepthListTypeQueryBuilder WithAscensionAbilities(AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder aghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ascensionAbilities", alias, aghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabMatchDepthListTypeQueryBuilder ExceptAscensionAbilities()
        {
            return ExceptField("ascensionAbilities");
        }
    }

    public partial class AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "modifierId" }
            };

        protected override string TypeName { get { return "AghanimLabDepthListAscensionAbilitiesObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder WithModifierId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modifierId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabDepthListAscensionAbilitiesObjectTypeQueryBuilder ExceptModifierId()
        {
            return ExceptField("modifierId");
        }
    }

    public partial class AghanimLabHeroCompositionTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabHeroCompositionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "heroId1" },
                new GraphQlFieldMetadata { Name = "heroId2" },
                new GraphQlFieldMetadata { Name = "heroId3" },
                new GraphQlFieldMetadata { Name = "heroId4" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "duration" },
                new GraphQlFieldMetadata { Name = "wilsonScore" }
            };

        protected override string TypeName { get { return "AghanimLabHeroCompositionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabHeroCompositionTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithHeroId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId1", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptHeroId1()
        {
            return ExceptField("heroId1");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithHeroId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId2", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptHeroId2()
        {
            return ExceptField("heroId2");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithHeroId3(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId3", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptHeroId3()
        {
            return ExceptField("heroId3");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithHeroId4(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId4", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptHeroId4()
        {
            return ExceptField("heroId4");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }

        public AghanimLabHeroCompositionTypeQueryBuilder WithWilsonScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wilsonScore", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroCompositionTypeQueryBuilder ExceptWilsonScore()
        {
            return ExceptField("wilsonScore");
        }
    }

    public partial class AghanimLabHeroWinRateTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabHeroWinRateTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" }
            };

        protected override string TypeName { get { return "AghanimLabHeroWinRateType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabHeroWinRateTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroWinRateTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabHeroWinRateTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroWinRateTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public AghanimLabHeroWinRateTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroWinRateTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public AghanimLabHeroWinRateTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroWinRateTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }
    }

    public partial class AghanimLabHeroAbilityTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabHeroAbilityTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "customAbilityId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "pickCount" }
            };

        protected override string TypeName { get { return "AghanimLabHeroAbilityType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabHeroAbilityTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroAbilityTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabHeroAbilityTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroAbilityTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public AghanimLabHeroAbilityTypeQueryBuilder WithCustomAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("customAbilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroAbilityTypeQueryBuilder ExceptCustomAbilityId()
        {
            return ExceptField("customAbilityId");
        }

        public AghanimLabHeroAbilityTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroAbilityTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public AghanimLabHeroAbilityTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroAbilityTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public AghanimLabHeroAbilityTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabHeroAbilityTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }
    }

    public partial class AghanimLabRoomTypeQueryBuilder : GraphQlQueryBuilder<AghanimLabRoomTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "encounterId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "pickCount" },
                new GraphQlFieldMetadata { Name = "deathCount" },
                new GraphQlFieldMetadata { Name = "eliteMatchCount" },
                new GraphQlFieldMetadata { Name = "eliteWinCount" },
                new GraphQlFieldMetadata { Name = "elitePickCount" },
                new GraphQlFieldMetadata { Name = "eliteDeathCount" }
            };

        protected override string TypeName { get { return "AghanimLabRoomType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AghanimLabRoomTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public AghanimLabRoomTypeQueryBuilder WithEncounterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("encounterId", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEncounterId()
        {
            return ExceptField("encounterId");
        }

        public AghanimLabRoomTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithPickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptPickCount()
        {
            return ExceptField("pickCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptDeathCount()
        {
            return ExceptField("deathCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithEliteMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEliteMatchCount()
        {
            return ExceptField("eliteMatchCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithEliteWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEliteWinCount()
        {
            return ExceptField("eliteWinCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithElitePickCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("elitePickCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptElitePickCount()
        {
            return ExceptField("elitePickCount");
        }

        public AghanimLabRoomTypeQueryBuilder WithEliteDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteDeathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public AghanimLabRoomTypeQueryBuilder ExceptEliteDeathCount()
        {
            return ExceptField("eliteDeathCount");
        }
    }

    public partial class Ti2020CustomGameRoomModifierTypeQueryBuilder : GraphQlQueryBuilder<Ti2020CustomGameRoomModifierTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "modifierId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "deathCount" },
                new GraphQlFieldMetadata { Name = "eliteMatchCount" },
                new GraphQlFieldMetadata { Name = "eliteWinCount" },
                new GraphQlFieldMetadata { Name = "eliteDeathCount" }
            };

        protected override string TypeName { get { return "TI2020CustomGameRoomModifierType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithModifierId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modifierId", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptModifierId()
        {
            return ExceptField("modifierId");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptDeathCount()
        {
            return ExceptField("deathCount");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithEliteMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptEliteMatchCount()
        {
            return ExceptField("eliteMatchCount");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithEliteWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptEliteWinCount()
        {
            return ExceptField("eliteWinCount");
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder WithEliteDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("eliteDeathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public Ti2020CustomGameRoomModifierTypeQueryBuilder ExceptEliteDeathCount()
        {
            return ExceptField("eliteDeathCount");
        }
    }

    public partial class ImpQueryQueryBuilder : GraphQlQueryBuilder<ImpQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchGenerator", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ImpGeneratorMatchPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerGenerator", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ImpGeneratorPlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ImpQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImpQueryQueryBuilder WithMatchGenerator(ImpGeneratorMatchPlayerTypeQueryBuilder impGeneratorMatchPlayerTypeQueryBuilder, QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithObjectField("matchGenerator", alias, impGeneratorMatchPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ImpQueryQueryBuilder ExceptMatchGenerator()
        {
            return ExceptField("matchGenerator");
        }

        public ImpQueryQueryBuilder WithPlayerGenerator(ImpGeneratorPlayerTypeQueryBuilder impGeneratorPlayerTypeQueryBuilder, QueryBuilderParameter<ImpGeneratorRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("playerGenerator", alias, impGeneratorPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ImpQueryQueryBuilder ExceptPlayerGenerator()
        {
            return ExceptField("playerGenerator");
        }
    }

    public partial class ImpGeneratorMatchPlayerTypeQueryBuilder : GraphQlQueryBuilder<ImpGeneratorMatchPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "winChance", IsComplex = true },
                new GraphQlFieldMetadata { Name = "winRateByPlayerMinuteValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "events", IsComplex = true, QueryBuilderType = typeof(ImpGeneratorPlayerEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "impValues", IsComplex = true }
            };

        protected override string TypeName { get { return "ImpGeneratorMatchPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImpGeneratorMatchPlayerTypeQueryBuilder WithWinChance(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winChance", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder ExceptWinChance()
        {
            return ExceptField("winChance");
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder WithWinRateByPlayerMinuteValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateByPlayerMinuteValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder ExceptWinRateByPlayerMinuteValues()
        {
            return ExceptField("winRateByPlayerMinuteValues");
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder WithEvents(ImpGeneratorPlayerEventTypeQueryBuilder impGeneratorPlayerEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("events", alias, impGeneratorPlayerEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder ExceptEvents()
        {
            return ExceptField("events");
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder WithImpValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorMatchPlayerTypeQueryBuilder ExceptImpValues()
        {
            return ExceptField("impValues");
        }
    }

    public partial class ImpGeneratorPlayerEventTypeQueryBuilder : GraphQlQueryBuilder<ImpGeneratorPlayerEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "dn" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "physicalDamage" },
                new GraphQlFieldMetadata { Name = "magicalDamage" },
                new GraphQlFieldMetadata { Name = "pureDamage" },
                new GraphQlFieldMetadata { Name = "damageReceived" },
                new GraphQlFieldMetadata { Name = "healingAllies" },
                new GraphQlFieldMetadata { Name = "runePower" },
                new GraphQlFieldMetadata { Name = "neutrals" }
            };

        protected override string TypeName { get { return "ImpGeneratorPlayerEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImpGeneratorPlayerEventTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithDn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dn", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptDn()
        {
            return ExceptField("dn");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithPhysicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("physicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptPhysicalDamage()
        {
            return ExceptField("physicalDamage");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithMagicalDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("magicalDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptMagicalDamage()
        {
            return ExceptField("magicalDamage");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithPureDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pureDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptPureDamage()
        {
            return ExceptField("pureDamage");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithDamageReceived(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("damageReceived", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptDamageReceived()
        {
            return ExceptField("damageReceived");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithHealingAllies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingAllies", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptHealingAllies()
        {
            return ExceptField("healingAllies");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithRunePower(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runePower", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptRunePower()
        {
            return ExceptField("runePower");
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder WithNeutrals(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutrals", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerEventTypeQueryBuilder ExceptNeutrals()
        {
            return ExceptField("neutrals");
        }
    }

    public partial class ImpGeneratorPlayerTypeQueryBuilder : GraphQlQueryBuilder<ImpGeneratorPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "winChance", IsComplex = true },
                new GraphQlFieldMetadata { Name = "winRateByPlayerMinuteValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "events", IsComplex = true, QueryBuilderType = typeof(ImpGeneratorPlayerEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "impValues", IsComplex = true }
            };

        protected override string TypeName { get { return "ImpGeneratorPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ImpGeneratorPlayerTypeQueryBuilder WithWinChance(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winChance", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerTypeQueryBuilder ExceptWinChance()
        {
            return ExceptField("winChance");
        }

        public ImpGeneratorPlayerTypeQueryBuilder WithWinRateByPlayerMinuteValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateByPlayerMinuteValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerTypeQueryBuilder ExceptWinRateByPlayerMinuteValues()
        {
            return ExceptField("winRateByPlayerMinuteValues");
        }

        public ImpGeneratorPlayerTypeQueryBuilder WithEvents(ImpGeneratorPlayerEventTypeQueryBuilder impGeneratorPlayerEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("events", alias, impGeneratorPlayerEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerTypeQueryBuilder ExceptEvents()
        {
            return ExceptField("events");
        }

        public ImpGeneratorPlayerTypeQueryBuilder WithImpValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("impValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ImpGeneratorPlayerTypeQueryBuilder ExceptImpValues()
        {
            return ExceptField("impValues");
        }
    }

    public partial class PageDireTideQueryQueryBuilder : GraphQlQueryBuilder<PageDireTideQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "match", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winDay", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameHeroWinDayTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageDireTideQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageDireTideQueryQueryBuilder WithMatch(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, QueryBuilderParameter<long?> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("match", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageDireTideQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public PageDireTideQueryQueryBuilder WithMatches(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, QueryBuilderParameter<FilterDireTideCustomMatchRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("matches", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageDireTideQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public PageDireTideQueryQueryBuilder WithWinDay(DireTideCustomGameHeroWinDayTypeQueryBuilder direTideCustomGameHeroWinDayTypeQueryBuilder, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("winDay", alias, direTideCustomGameHeroWinDayTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageDireTideQueryQueryBuilder ExceptWinDay()
        {
            return ExceptField("winDay");
        }
    }

    public partial class DireTideCustomGameMatchTypeQueryBuilder : GraphQlQueryBuilder<DireTideCustomGameMatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "didRadiantWin" },
                new GraphQlFieldMetadata { Name = "durationSeconds" },
                new GraphQlFieldMetadata { Name = "startDateTime" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "clusterId" },
                new GraphQlFieldMetadata { Name = "replaySalt" },
                new GraphQlFieldMetadata { Name = "candyLost" },
                new GraphQlFieldMetadata { Name = "candyPickedUp" },
                new GraphQlFieldMetadata { Name = "candyScored" },
                new GraphQlFieldMetadata { Name = "radiantCandyScored" },
                new GraphQlFieldMetadata { Name = "direCandyScored" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGamePlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DireTideCustomGameMatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DireTideCustomGameMatchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithDidRadiantWin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("didRadiantWin", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptDidRadiantWin()
        {
            return ExceptField("didRadiantWin");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithDurationSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptDurationSeconds()
        {
            return ExceptField("durationSeconds");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithStartDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptStartDateTime()
        {
            return ExceptField("startDateTime");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithClusterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clusterId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptClusterId()
        {
            return ExceptField("clusterId");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithReplaySalt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("replaySalt", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptReplaySalt()
        {
            return ExceptField("replaySalt");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithCandyLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyLost", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptCandyLost()
        {
            return ExceptField("candyLost");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithCandyPickedUp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyPickedUp", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptCandyPickedUp()
        {
            return ExceptField("candyPickedUp");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptCandyScored()
        {
            return ExceptField("candyScored");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithRadiantCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("radiantCandyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptRadiantCandyScored()
        {
            return ExceptField("radiantCandyScored");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithDireCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("direCandyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptDireCandyScored()
        {
            return ExceptField("direCandyScored");
        }

        public DireTideCustomGameMatchTypeQueryBuilder WithPlayers(DireTideCustomGamePlayerTypeQueryBuilder direTideCustomGamePlayerTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (steamAccountId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );

            return WithObjectField("players", alias, direTideCustomGamePlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DireTideCustomGameMatchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }
    }

    public partial class DireTideCustomGamePlayerTypeQueryBuilder : GraphQlQueryBuilder<DireTideCustomGamePlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "playerSlot" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isVictory" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "leaverStatus" },
                new GraphQlFieldMetadata { Name = "numLastHits" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" },
                new GraphQlFieldMetadata { Name = "goldSpent" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "heroHealing" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "item0Id" },
                new GraphQlFieldMetadata { Name = "item1Id" },
                new GraphQlFieldMetadata { Name = "item2Id" },
                new GraphQlFieldMetadata { Name = "item3Id" },
                new GraphQlFieldMetadata { Name = "item4Id" },
                new GraphQlFieldMetadata { Name = "item5Id" },
                new GraphQlFieldMetadata { Name = "backpack0Id" },
                new GraphQlFieldMetadata { Name = "backpack1Id" },
                new GraphQlFieldMetadata { Name = "backpack2Id" },
                new GraphQlFieldMetadata { Name = "neutral0Id" },
                new GraphQlFieldMetadata { Name = "partyId" },
                new GraphQlFieldMetadata { Name = "candyLost" },
                new GraphQlFieldMetadata { Name = "candyPickedUp" },
                new GraphQlFieldMetadata { Name = "candyScored" }
            };

        protected override string TypeName { get { return "DireTideCustomGamePlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DireTideCustomGamePlayerTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithLeaverStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaverStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptLeaverStatus()
        {
            return ExceptField("leaverStatus");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithNumLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptNumLastHits()
        {
            return ExceptField("numLastHits");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptGoldSpent()
        {
            return ExceptField("goldSpent");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithHeroHealing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealing", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptHeroHealing()
        {
            return ExceptField("heroHealing");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithBackpack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptBackpack0Id()
        {
            return ExceptField("backpack0Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithBackpack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptBackpack1Id()
        {
            return ExceptField("backpack1Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithBackpack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptBackpack2Id()
        {
            return ExceptField("backpack2Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithNeutral0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutral0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptNeutral0Id()
        {
            return ExceptField("neutral0Id");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithPartyId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("partyId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptPartyId()
        {
            return ExceptField("partyId");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithCandyLost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyLost", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptCandyLost()
        {
            return ExceptField("candyLost");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithCandyPickedUp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyPickedUp", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptCandyPickedUp()
        {
            return ExceptField("candyPickedUp");
        }

        public DireTideCustomGamePlayerTypeQueryBuilder WithCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGamePlayerTypeQueryBuilder ExceptCandyScored()
        {
            return ExceptField("candyScored");
        }
    }

    public partial class DireTideCustomGameHeroWinDayTypeQueryBuilder : GraphQlQueryBuilder<DireTideCustomGameHeroWinDayTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "day" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "candyScored" }
            };

        protected override string TypeName { get { return "DireTideCustomGameHeroWinDayType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DireTideCustomGameHeroWinDayTypeQueryBuilder WithDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("day", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder ExceptDay()
        {
            return ExceptField("day");
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder WithCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public DireTideCustomGameHeroWinDayTypeQueryBuilder ExceptCandyScored()
        {
            return ExceptField("candyScored");
        }
    }

    public partial class PageBattlepassQueryQueryBuilder : GraphQlQueryBuilder<PageBattlepassQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "predictionsHero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "predictionsTeams", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "predictionsPlayers", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "predictionsTournament", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionTournamentTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PageBattlepassQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageBattlepassQueryQueryBuilder WithPredictionsHero(BattlepassPredictionHeroTypeQueryBuilder battlepassPredictionHeroTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> leagueIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            return WithObjectField("predictionsHero", alias, battlepassPredictionHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsHero()
        {
            return ExceptField("predictionsHero");
        }

        public PageBattlepassQueryQueryBuilder WithPredictionsTeams(BattlepassPredictionTeamTypeQueryBuilder battlepassPredictionTeamTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, QueryBuilderParameter<IEnumerable<int?>> leagueIds, QueryBuilderParameter<bool?> averaged = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            if (averaged != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "averaged", ArgumentValue = averaged} );

            return WithObjectField("predictionsTeams", alias, battlepassPredictionTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsTeams()
        {
            return ExceptField("predictionsTeams");
        }

        public PageBattlepassQueryQueryBuilder WithPredictionsPlayers(BattlepassPredictionPlayerTypeQueryBuilder battlepassPredictionPlayerTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, QueryBuilderParameter<IEnumerable<int?>> leagueIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            return WithObjectField("predictionsPlayers", alias, battlepassPredictionPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsPlayers()
        {
            return ExceptField("predictionsPlayers");
        }

        public PageBattlepassQueryQueryBuilder WithPredictionsTournament(BattlepassPredictionTournamentTypeQueryBuilder battlepassPredictionTournamentTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> teamIds, QueryBuilderParameter<IEnumerable<int?>> leagueIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamIds", ArgumentValue = teamIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueIds", ArgumentValue = leagueIds} );
            return WithObjectField("predictionsTournament", alias, battlepassPredictionTournamentTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PageBattlepassQueryQueryBuilder ExceptPredictionsTournament()
        {
            return ExceptField("predictionsTournament");
        }
    }

    public partial class BattlepassPredictionHeroTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "matchCountBanned" },
                new GraphQlFieldMetadata { Name = "winRate" },
                new GraphQlFieldMetadata { Name = "killAvg" },
                new GraphQlFieldMetadata { Name = "assistAvg" },
                new GraphQlFieldMetadata { Name = "deathAvg" },
                new GraphQlFieldMetadata { Name = "lastHitAvg" },
                new GraphQlFieldMetadata { Name = "experiencePerMinuteAvg" },
                new GraphQlFieldMetadata { Name = "mostKills" },
                new GraphQlFieldMetadata { Name = "mostDeaths" },
                new GraphQlFieldMetadata { Name = "mostAssists" },
                new GraphQlFieldMetadata { Name = "mostLastHits" }
            };

        protected override string TypeName { get { return "BattlepassPredictionHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithMatchCountBanned(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountBanned", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptMatchCountBanned()
        {
            return ExceptField("matchCountBanned");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRate", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptWinRate()
        {
            return ExceptField("winRate");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithKillAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptKillAvg()
        {
            return ExceptField("killAvg");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithAssistAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptAssistAvg()
        {
            return ExceptField("assistAvg");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithDeathAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptDeathAvg()
        {
            return ExceptField("deathAvg");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithLastHitAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptLastHitAvg()
        {
            return ExceptField("lastHitAvg");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithExperiencePerMinuteAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinuteAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptExperiencePerMinuteAvg()
        {
            return ExceptField("experiencePerMinuteAvg");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithMostKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostKills", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptMostKills()
        {
            return ExceptField("mostKills");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithMostDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptMostDeaths()
        {
            return ExceptField("mostDeaths");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithMostAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptMostAssists()
        {
            return ExceptField("mostAssists");
        }

        public BattlepassPredictionHeroTypeQueryBuilder WithMostLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionHeroTypeQueryBuilder ExceptMostLastHits()
        {
            return ExceptField("mostLastHits");
        }
    }

    public partial class BattlepassPredictionTeamTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionTeamTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "teamId" },
                new GraphQlFieldMetadata { Name = "team", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "mostKills" },
                new GraphQlFieldMetadata { Name = "killAvg" },
                new GraphQlFieldMetadata { Name = "leastDeaths" },
                new GraphQlFieldMetadata { Name = "mostAssists" },
                new GraphQlFieldMetadata { Name = "longestGameSeconds" },
                new GraphQlFieldMetadata { Name = "shortestGameSeconds" },
                new GraphQlFieldMetadata { Name = "gameSecondsAvg" },
                new GraphQlFieldMetadata { Name = "heroCount" }
            };

        protected override string TypeName { get { return "BattlepassPredictionTeamType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionTeamTypeQueryBuilder WithTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamId", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptTeamId()
        {
            return ExceptField("teamId");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithTeam(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("team", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptTeam()
        {
            return ExceptField("team");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithMostKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostKills", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptMostKills()
        {
            return ExceptField("mostKills");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithKillAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptKillAvg()
        {
            return ExceptField("killAvg");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithLeastDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leastDeaths", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptLeastDeaths()
        {
            return ExceptField("leastDeaths");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithMostAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptMostAssists()
        {
            return ExceptField("mostAssists");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithLongestGameSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longestGameSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptLongestGameSeconds()
        {
            return ExceptField("longestGameSeconds");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithShortestGameSeconds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shortestGameSeconds", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptShortestGameSeconds()
        {
            return ExceptField("shortestGameSeconds");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithGameSecondsAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameSecondsAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptGameSecondsAvg()
        {
            return ExceptField("gameSecondsAvg");
        }

        public BattlepassPredictionTeamTypeQueryBuilder WithHeroCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTeamTypeQueryBuilder ExceptHeroCount()
        {
            return ExceptField("heroCount");
        }
    }

    public partial class BattlepassPredictionPlayerTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "killAvg" },
                new GraphQlFieldMetadata { Name = "mostKills" },
                new GraphQlFieldMetadata { Name = "deathAvg" },
                new GraphQlFieldMetadata { Name = "assistAvg" },
                new GraphQlFieldMetadata { Name = "mostAssists" },
                new GraphQlFieldMetadata { Name = "lastHitAvg" },
                new GraphQlFieldMetadata { Name = "mostLastHits" },
                new GraphQlFieldMetadata { Name = "mostGoldPerMinute" },
                new GraphQlFieldMetadata { Name = "goldPerMinuteAvg" },
                new GraphQlFieldMetadata { Name = "heroCount" }
            };

        protected override string TypeName { get { return "BattlepassPredictionPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithKillAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptKillAvg()
        {
            return ExceptField("killAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostKills", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostKills()
        {
            return ExceptField("mostKills");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithDeathAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptDeathAvg()
        {
            return ExceptField("deathAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithAssistAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptAssistAvg()
        {
            return ExceptField("assistAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostAssists", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostAssists()
        {
            return ExceptField("mostAssists");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithLastHitAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHitAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptLastHitAvg()
        {
            return ExceptField("lastHitAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostLastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostLastHits()
        {
            return ExceptField("mostLastHits");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithMostGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mostGoldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptMostGoldPerMinute()
        {
            return ExceptField("mostGoldPerMinute");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithGoldPerMinuteAvg(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinuteAvg", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptGoldPerMinuteAvg()
        {
            return ExceptField("goldPerMinuteAvg");
        }

        public BattlepassPredictionPlayerTypeQueryBuilder WithHeroCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionPlayerTypeQueryBuilder ExceptHeroCount()
        {
            return ExceptField("heroCount");
        }
    }

    public partial class BattlepassPredictionTournamentTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionTournamentTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroesPicked", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroesBanned", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalKills", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "longestGame", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "soloKills", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "soloDeaths", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "soloAssists", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "soloGoldPerMinute", IsComplex = true, QueryBuilderType = typeof(BattlepassPredictionIdValueTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "BattlepassPredictionTournamentType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionTournamentTypeQueryBuilder WithHeroesPicked(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroesPicked", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptHeroesPicked()
        {
            return ExceptField("heroesPicked");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithHeroesBanned(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("heroesBanned", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptHeroesBanned()
        {
            return ExceptField("heroesBanned");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithTotalKills(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("totalKills", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptTotalKills()
        {
            return ExceptField("totalKills");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithLongestGame(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("longestGame", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptLongestGame()
        {
            return ExceptField("longestGame");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloKills(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloKills", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloKills()
        {
            return ExceptField("soloKills");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloDeaths(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloDeaths", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloDeaths()
        {
            return ExceptField("soloDeaths");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloAssists(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloAssists", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloAssists()
        {
            return ExceptField("soloAssists");
        }

        public BattlepassPredictionTournamentTypeQueryBuilder WithSoloGoldPerMinute(BattlepassPredictionIdValueTypeQueryBuilder battlepassPredictionIdValueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("soloGoldPerMinute", alias, battlepassPredictionIdValueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionTournamentTypeQueryBuilder ExceptSoloGoldPerMinute()
        {
            return ExceptField("soloGoldPerMinute");
        }
    }

    public partial class BattlepassPredictionIdValueTypeQueryBuilder : GraphQlQueryBuilder<BattlepassPredictionIdValueTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "BattlepassPredictionIdValueType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BattlepassPredictionIdValueTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionIdValueTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public BattlepassPredictionIdValueTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public BattlepassPredictionIdValueTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class RoshQueryQueryBuilder : GraphQlQueryBuilder<RoshQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(RoshGlobalStatTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "RoshQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoshQueryQueryBuilder WithStats(RoshGlobalStatTypeQueryBuilder roshGlobalStatTypeQueryBuilder, QueryBuilderParameter<RoshMatchesRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("stats", alias, roshGlobalStatTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public RoshQueryQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }
    }

    public partial class RoshGlobalStatTypeQueryBuilder : GraphQlQueryBuilder<RoshGlobalStatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "difficulty" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "maxScore" }
            };

        protected override string TypeName { get { return "ROSHGlobalStatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoshGlobalStatTypeQueryBuilder WithDifficulty(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difficulty", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshGlobalStatTypeQueryBuilder ExceptDifficulty()
        {
            return ExceptField("difficulty");
        }

        public RoshGlobalStatTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshGlobalStatTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public RoshGlobalStatTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshGlobalStatTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public RoshGlobalStatTypeQueryBuilder WithMaxScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxScore", alias, new GraphQlDirective[] { include, skip });
        }

        public RoshGlobalStatTypeQueryBuilder ExceptMaxScore()
        {
            return ExceptField("maxScore");
        }
    }

    public partial class NewsItemTypeQueryBuilder : GraphQlQueryBuilder<NewsItemTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "uri" },
                new GraphQlFieldMetadata { Name = "author" },
                new GraphQlFieldMetadata { Name = "contents" },
                new GraphQlFieldMetadata { Name = "feedLabel" },
                new GraphQlFieldMetadata { Name = "date" },
                new GraphQlFieldMetadata { Name = "feedName" }
            };

        protected override string TypeName { get { return "NewsItemType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NewsItemTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NewsItemTypeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public NewsItemTypeQueryBuilder WithUri(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uri", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptUri()
        {
            return ExceptField("uri");
        }

        public NewsItemTypeQueryBuilder WithAuthor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("author", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptAuthor()
        {
            return ExceptField("author");
        }

        public NewsItemTypeQueryBuilder WithContents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contents", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptContents()
        {
            return ExceptField("contents");
        }

        public NewsItemTypeQueryBuilder WithFeedLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedLabel", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptFeedLabel()
        {
            return ExceptField("feedLabel");
        }

        public NewsItemTypeQueryBuilder WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("date", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptDate()
        {
            return ExceptField("date");
        }

        public NewsItemTypeQueryBuilder WithFeedName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("feedName", alias, new GraphQlDirective[] { include, skip });
        }

        public NewsItemTypeQueryBuilder ExceptFeedName()
        {
            return ExceptField("feedName");
        }
    }

    public partial class ServerStatusTypeQueryBuilder : GraphQlQueryBuilder<ServerStatusTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isRedisOnline" },
                new GraphQlFieldMetadata { Name = "steamApiDetail", IsComplex = true, QueryBuilderType = typeof(SteamApiDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rabbitDetail", IsComplex = true, QueryBuilderType = typeof(RabbitDetailTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ServerStatusType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ServerStatusTypeQueryBuilder WithIsRedisOnline(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRedisOnline", alias, new GraphQlDirective[] { include, skip });
        }

        public ServerStatusTypeQueryBuilder ExceptIsRedisOnline()
        {
            return ExceptField("isRedisOnline");
        }

        public ServerStatusTypeQueryBuilder WithSteamApiDetail(SteamApiDetailTypeQueryBuilder steamApiDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamApiDetail", alias, steamApiDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServerStatusTypeQueryBuilder ExceptSteamApiDetail()
        {
            return ExceptField("steamApiDetail");
        }

        public ServerStatusTypeQueryBuilder WithRabbitDetail(RabbitDetailTypeQueryBuilder rabbitDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rabbitDetail", alias, rabbitDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ServerStatusTypeQueryBuilder ExceptRabbitDetail()
        {
            return ExceptField("rabbitDetail");
        }
    }

    public partial class SteamApiDetailTypeQueryBuilder : GraphQlQueryBuilder<SteamApiDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isOnline" },
                new GraphQlFieldMetadata { Name = "outages", IsComplex = true, QueryBuilderType = typeof(SteamApiDetailOutageTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SteamApiDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamApiDetailTypeQueryBuilder WithIsOnline(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isOnline", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamApiDetailTypeQueryBuilder ExceptIsOnline()
        {
            return ExceptField("isOnline");
        }

        public SteamApiDetailTypeQueryBuilder WithOutages(SteamApiDetailOutageTypeQueryBuilder steamApiDetailOutageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("outages", alias, steamApiDetailOutageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamApiDetailTypeQueryBuilder ExceptOutages()
        {
            return ExceptField("outages");
        }
    }

    public partial class SteamApiDetailOutageTypeQueryBuilder : GraphQlQueryBuilder<SteamApiDetailOutageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "secondsOffline" },
                new GraphQlFieldMetadata { Name = "dateTime" }
            };

        protected override string TypeName { get { return "SteamApiDetailOutageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamApiDetailOutageTypeQueryBuilder WithSecondsOffline(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondsOffline", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamApiDetailOutageTypeQueryBuilder ExceptSecondsOffline()
        {
            return ExceptField("secondsOffline");
        }

        public SteamApiDetailOutageTypeQueryBuilder WithDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamApiDetailOutageTypeQueryBuilder ExceptDateTime()
        {
            return ExceptField("dateTime");
        }
    }

    public partial class RabbitDetailTypeQueryBuilder : GraphQlQueryBuilder<RabbitDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "lastUpdated" },
                new GraphQlFieldMetadata { Name = "isOnline" },
                new GraphQlFieldMetadata { Name = "matchHistory", IsComplex = true, QueryBuilderType = typeof(RabbitQueueDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchDetail", IsComplex = true, QueryBuilderType = typeof(RabbitQueueDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchDetailDelay", IsComplex = true, QueryBuilderType = typeof(RabbitQueueDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchStats", IsComplex = true, QueryBuilderType = typeof(RabbitQueueDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(RabbitQueueDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchLive", IsComplex = true, QueryBuilderType = typeof(RabbitQueueDetailTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "RabbitDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RabbitDetailTypeQueryBuilder WithLastUpdated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdated", alias, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptLastUpdated()
        {
            return ExceptField("lastUpdated");
        }

        public RabbitDetailTypeQueryBuilder WithIsOnline(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isOnline", alias, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptIsOnline()
        {
            return ExceptField("isOnline");
        }

        public RabbitDetailTypeQueryBuilder WithMatchHistory(RabbitQueueDetailTypeQueryBuilder rabbitQueueDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchHistory", alias, rabbitQueueDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptMatchHistory()
        {
            return ExceptField("matchHistory");
        }

        public RabbitDetailTypeQueryBuilder WithMatchDetail(RabbitQueueDetailTypeQueryBuilder rabbitQueueDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchDetail", alias, rabbitQueueDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptMatchDetail()
        {
            return ExceptField("matchDetail");
        }

        public RabbitDetailTypeQueryBuilder WithMatchDetailDelay(RabbitQueueDetailTypeQueryBuilder rabbitQueueDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchDetailDelay", alias, rabbitQueueDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptMatchDetailDelay()
        {
            return ExceptField("matchDetailDelay");
        }

        public RabbitDetailTypeQueryBuilder WithMatchStats(RabbitQueueDetailTypeQueryBuilder rabbitQueueDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchStats", alias, rabbitQueueDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptMatchStats()
        {
            return ExceptField("matchStats");
        }

        public RabbitDetailTypeQueryBuilder WithSteamAccount(RabbitQueueDetailTypeQueryBuilder rabbitQueueDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, rabbitQueueDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public RabbitDetailTypeQueryBuilder WithMatchLive(RabbitQueueDetailTypeQueryBuilder rabbitQueueDetailTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchLive", alias, rabbitQueueDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RabbitDetailTypeQueryBuilder ExceptMatchLive()
        {
            return ExceptField("matchLive");
        }
    }

    public partial class RabbitQueueDetailTypeQueryBuilder : GraphQlQueryBuilder<RabbitQueueDetailTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "queueCount" },
                new GraphQlFieldMetadata { Name = "queueInRate" },
                new GraphQlFieldMetadata { Name = "queueOutRate" }
            };

        protected override string TypeName { get { return "RabbitQueueDetailType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RabbitQueueDetailTypeQueryBuilder WithQueueCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("queueCount", alias, new GraphQlDirective[] { include, skip });
        }

        public RabbitQueueDetailTypeQueryBuilder ExceptQueueCount()
        {
            return ExceptField("queueCount");
        }

        public RabbitQueueDetailTypeQueryBuilder WithQueueInRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("queueInRate", alias, new GraphQlDirective[] { include, skip });
        }

        public RabbitQueueDetailTypeQueryBuilder ExceptQueueInRate()
        {
            return ExceptField("queueInRate");
        }

        public RabbitQueueDetailTypeQueryBuilder WithQueueOutRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("queueOutRate", alias, new GraphQlDirective[] { include, skip });
        }

        public RabbitQueueDetailTypeQueryBuilder ExceptQueueOutRate()
        {
            return ExceptField("queueOutRate");
        }
    }

    public partial class LanguageTypeQueryBuilder : GraphQlQueryBuilder<LanguageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "languageCode" },
                new GraphQlFieldMetadata { Name = "displaLanguageNameyName" }
            };

        protected override string TypeName { get { return "LanguageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LanguageTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LanguageTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LanguageTypeQueryBuilder WithLanguageCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageCode", alias, new GraphQlDirective[] { include, skip });
        }

        public LanguageTypeQueryBuilder ExceptLanguageCode()
        {
            return ExceptField("languageCode");
        }

        public LanguageTypeQueryBuilder WithDisplaLanguageNameyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displaLanguageNameyName", alias, new GraphQlDirective[] { include, skip });
        }

        public LanguageTypeQueryBuilder ExceptDisplaLanguageNameyName()
        {
            return ExceptField("displaLanguageNameyName");
        }
    }

    public partial class SearchTypeQueryBuilder : GraphQlQueryBuilder<SearchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "leagues", IsComplex = true, QueryBuilderType = typeof(LeagueTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teams", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "proPlayers", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "casters", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "direTideMatches", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SearchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SearchTypeQueryBuilder WithPlayers(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public SearchTypeQueryBuilder WithMatches(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }

        public SearchTypeQueryBuilder WithLeagues(LeagueTypeQueryBuilder leagueTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("leagues", alias, leagueTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptLeagues()
        {
            return ExceptField("leagues");
        }

        public SearchTypeQueryBuilder WithTeams(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teams", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptTeams()
        {
            return ExceptField("teams");
        }

        public SearchTypeQueryBuilder WithProPlayers(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("proPlayers", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptProPlayers()
        {
            return ExceptField("proPlayers");
        }

        public SearchTypeQueryBuilder WithCasters(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("casters", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptCasters()
        {
            return ExceptField("casters");
        }

        public SearchTypeQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public SearchTypeQueryBuilder WithDireTideMatches(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("direTideMatches", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTypeQueryBuilder ExceptDireTideMatches()
        {
            return ExceptField("direTideMatches");
        }
    }

    public partial class HeroStatsQueryQueryBuilder : GraphQlQueryBuilder<HeroStatsQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(HeroPositionTimeDetailTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchUp", IsComplex = true, QueryBuilderType = typeof(HeroDryadTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemFullPurchase", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroItemPurchaseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemStartingPurchase", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroItemStartingPurchaseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemBootPurchase", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroItemBootPurchaseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "itemNeutral", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroNeutralItemTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "laneOutcome", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroLaneOutcomeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroVsHeroMatchup", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroMatchupTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "talent", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroAbilityTalentTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winHour", IsComplex = true, QueryBuilderType = typeof(HeroWinHourTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winDay", IsComplex = true, QueryBuilderType = typeof(HeroWinDayTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winWeek", IsComplex = true, QueryBuilderType = typeof(HeroWinWeekTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winMonth", IsComplex = true, QueryBuilderType = typeof(HeroWinMonthTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winGameVersion", IsComplex = true, QueryBuilderType = typeof(HeroWinGameVersionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "guide", IsComplex = true, QueryBuilderType = typeof(HeroGuideListTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rampages", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroRampageObjectTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilityMinLevel", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroAbilityMinTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilityMaxLevel", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroAbilityMaxTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "banDay", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroBanTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroStatsQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroStatsQueryQueryBuilder WithStats(HeroPositionTimeDetailTypeQueryBuilder heroPositionTimeDetailTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<bool?> groupByTime = null, QueryBuilderParameter<bool?> groupByPosition = null, QueryBuilderParameter<bool?> groupByBracket = null, QueryBuilderParameter<int?> minTime = null, QueryBuilderParameter<int?> maxTime = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (groupByTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupByTime", ArgumentValue = groupByTime} );

            if (groupByPosition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupByPosition", ArgumentValue = groupByPosition} );

            if (groupByBracket != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupByBracket", ArgumentValue = groupByBracket} );

            if (minTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "minTime", ArgumentValue = minTime} );

            if (maxTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "maxTime", ArgumentValue = maxTime} );

            return WithObjectField("stats", alias, heroPositionTimeDetailTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public HeroStatsQueryQueryBuilder WithMatchUp(HeroDryadTypeQueryBuilder heroDryadTypeQueryBuilder, QueryBuilderParameter<short?> heroId = null, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<byte?> orderBy = null, QueryBuilderParameter<int?> matchLimit = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );

            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (matchLimit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchLimit", ArgumentValue = matchLimit} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("matchUp", alias, heroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptMatchUp()
        {
            return ExceptField("matchUp");
        }

        public HeroStatsQueryQueryBuilder WithItemFullPurchase(HeroItemPurchaseTypeQueryBuilder heroItemPurchaseTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<int?> minTime = null, QueryBuilderParameter<int?> maxTime = null, QueryBuilderParameter<int?> matchLimit = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (minTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "minTime", ArgumentValue = minTime} );

            if (maxTime != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "maxTime", ArgumentValue = maxTime} );

            if (matchLimit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchLimit", ArgumentValue = matchLimit} );

            return WithObjectField("itemFullPurchase", alias, heroItemPurchaseTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptItemFullPurchase()
        {
            return ExceptField("itemFullPurchase");
        }

        public HeroStatsQueryQueryBuilder WithItemStartingPurchase(HeroItemStartingPurchaseTypeQueryBuilder heroItemStartingPurchaseTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("itemStartingPurchase", alias, heroItemStartingPurchaseTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptItemStartingPurchase()
        {
            return ExceptField("itemStartingPurchase");
        }

        public HeroStatsQueryQueryBuilder WithItemBootPurchase(HeroItemBootPurchaseTypeQueryBuilder heroItemBootPurchaseTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("itemBootPurchase", alias, heroItemBootPurchaseTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptItemBootPurchase()
        {
            return ExceptField("itemBootPurchase");
        }

        public HeroStatsQueryQueryBuilder WithItemNeutral(HeroNeutralItemTypeQueryBuilder heroNeutralItemTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("itemNeutral", alias, heroNeutralItemTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptItemNeutral()
        {
            return ExceptField("itemNeutral");
        }

        public HeroStatsQueryQueryBuilder WithLaneOutcome(HeroLaneOutcomeTypeQueryBuilder heroLaneOutcomeTypeQueryBuilder, QueryBuilderParameter<bool> isWith, QueryBuilderParameter<short?> heroId = null, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isWith", ArgumentValue = isWith} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("laneOutcome", alias, heroLaneOutcomeTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptLaneOutcome()
        {
            return ExceptField("laneOutcome");
        }

        public HeroStatsQueryQueryBuilder WithHeroVsHeroMatchup(HeroMatchupTypeQueryBuilder heroMatchupTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<int?> matchLimit = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (matchLimit != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchLimit", ArgumentValue = matchLimit} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("heroVsHeroMatchup", alias, heroMatchupTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptHeroVsHeroMatchup()
        {
            return ExceptField("heroVsHeroMatchup");
        }

        public HeroStatsQueryQueryBuilder WithTalent(HeroAbilityTalentTypeQueryBuilder heroAbilityTalentTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("talent", alias, heroAbilityTalentTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptTalent()
        {
            return ExceptField("talent");
        }

        public HeroStatsQueryQueryBuilder WithWinHour(HeroWinHourTypeQueryBuilder heroWinHourTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, QueryBuilderParameter<FilterHeroWinRequestGroupBy> groupBy = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            if (groupBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupBy", ArgumentValue = groupBy} );

            return WithObjectField("winHour", alias, heroWinHourTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptWinHour()
        {
            return ExceptField("winHour");
        }

        public HeroStatsQueryQueryBuilder WithWinDay(HeroWinDayTypeQueryBuilder heroWinDayTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, QueryBuilderParameter<FilterHeroWinRequestGroupBy> groupBy = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            if (groupBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupBy", ArgumentValue = groupBy} );

            return WithObjectField("winDay", alias, heroWinDayTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptWinDay()
        {
            return ExceptField("winDay");
        }

        public HeroStatsQueryQueryBuilder WithWinWeek(HeroWinWeekTypeQueryBuilder heroWinWeekTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, QueryBuilderParameter<FilterHeroWinRequestGroupBy> groupBy = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            if (groupBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupBy", ArgumentValue = groupBy} );

            return WithObjectField("winWeek", alias, heroWinWeekTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptWinWeek()
        {
            return ExceptField("winWeek");
        }

        public HeroStatsQueryQueryBuilder WithWinMonth(HeroWinMonthTypeQueryBuilder heroWinMonthTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, QueryBuilderParameter<FilterHeroWinRequestGroupBy> groupBy = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            if (groupBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupBy", ArgumentValue = groupBy} );

            return WithObjectField("winMonth", alias, heroWinMonthTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptWinMonth()
        {
            return ExceptField("winMonth");
        }

        public HeroStatsQueryQueryBuilder WithWinGameVersion(HeroWinGameVersionTypeQueryBuilder heroWinGameVersionTypeQueryBuilder, QueryBuilderParameter<IEnumerable<short?>> heroIds = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<IEnumerable<RankBracket>> bracketIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, QueryBuilderParameter<IEnumerable<BasicRegionType>> regionIds = null, QueryBuilderParameter<IEnumerable<GameModeEnumType>> gameModeIds = null, QueryBuilderParameter<FilterHeroWinRequestGroupBy> groupBy = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroIds", ArgumentValue = heroIds} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (bracketIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketIds", ArgumentValue = bracketIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            if (regionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "regionIds", ArgumentValue = regionIds} );

            if (gameModeIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );

            if (groupBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupBy", ArgumentValue = groupBy} );

            return WithObjectField("winGameVersion", alias, heroWinGameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptWinGameVersion()
        {
            return ExceptField("winGameVersion");
        }

        public HeroStatsQueryQueryBuilder WithGuide(HeroGuideListTypeQueryBuilder heroGuideListTypeQueryBuilder, QueryBuilderParameter<short?> heroId = null, QueryBuilderParameter<short?> withHeroId = null, QueryBuilderParameter<short?> againstHeroId = null, QueryBuilderParameter<bool?> isPro = null, QueryBuilderParameter<MatchPlayerPositionType> positionId = null, QueryBuilderParameter<short?> itemId = null, QueryBuilderParameter<short?> neutralItemId = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );

            if (withHeroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "withHeroId", ArgumentValue = withHeroId} );

            if (againstHeroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "againstHeroId", ArgumentValue = againstHeroId} );

            if (isPro != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isPro", ArgumentValue = isPro} );

            if (positionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionId", ArgumentValue = positionId} );

            if (itemId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "itemId", ArgumentValue = itemId} );

            if (neutralItemId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "neutralItemId", ArgumentValue = neutralItemId} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("guide", alias, heroGuideListTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptGuide()
        {
            return ExceptField("guide");
        }

        public HeroStatsQueryQueryBuilder WithRampages(HeroRampageObjectTypeQueryBuilder heroRampageObjectTypeQueryBuilder, QueryBuilderParameter<FilterHeroRampageType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithObjectField("rampages", alias, heroRampageObjectTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptRampages()
        {
            return ExceptField("rampages");
        }

        public HeroStatsQueryQueryBuilder WithAbilityMinLevel(HeroAbilityMinTypeQueryBuilder heroAbilityMinTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("abilityMinLevel", alias, heroAbilityMinTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptAbilityMinLevel()
        {
            return ExceptField("abilityMinLevel");
        }

        public HeroStatsQueryQueryBuilder WithAbilityMaxLevel(HeroAbilityMaxTypeQueryBuilder heroAbilityMaxTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<long?> week = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<IEnumerable<MatchPlayerPositionType>> positionIds = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (week != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "week", ArgumentValue = week} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (positionIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "positionIds", ArgumentValue = positionIds} );

            return WithObjectField("abilityMaxLevel", alias, heroAbilityMaxTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptAbilityMaxLevel()
        {
            return ExceptField("abilityMaxLevel");
        }

        public HeroStatsQueryQueryBuilder WithBanDay(HeroBanTypeQueryBuilder heroBanTypeQueryBuilder, QueryBuilderParameter<short?> heroId, QueryBuilderParameter<int?> day = null, QueryBuilderParameter<IEnumerable<RankBracketBasicEnum>> bracketBasicIds = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<bool?> groupByDay = null, QueryBuilderParameter<bool?> groupByRank = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );
            if (day != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "day", ArgumentValue = day} );

            if (bracketBasicIds != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracketBasicIds", ArgumentValue = bracketBasicIds} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (groupByDay != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupByDay", ArgumentValue = groupByDay} );

            if (groupByRank != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupByRank", ArgumentValue = groupByRank} );

            return WithObjectField("banDay", alias, heroBanTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroStatsQueryQueryBuilder ExceptBanDay()
        {
            return ExceptField("banDay");
        }
    }

    public partial class HeroDryadTypeQueryBuilder : GraphQlQueryBuilder<HeroDryadTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "with", IsComplex = true, QueryBuilderType = typeof(HeroStatsHeroDryadTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCountWith" },
                new GraphQlFieldMetadata { Name = "vs", IsComplex = true, QueryBuilderType = typeof(HeroStatsHeroDryadTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCountVs" }
            };

        protected override string TypeName { get { return "HeroDryadType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroDryadTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroDryadTypeQueryBuilder WithWith(HeroStatsHeroDryadTypeQueryBuilder heroStatsHeroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("with", alias, heroStatsHeroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptWith()
        {
            return ExceptField("with");
        }

        public HeroDryadTypeQueryBuilder WithMatchCountWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountWith", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptMatchCountWith()
        {
            return ExceptField("matchCountWith");
        }

        public HeroDryadTypeQueryBuilder WithVs(HeroStatsHeroDryadTypeQueryBuilder heroStatsHeroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("vs", alias, heroStatsHeroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptVs()
        {
            return ExceptField("vs");
        }

        public HeroDryadTypeQueryBuilder WithMatchCountVs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountVs", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDryadTypeQueryBuilder ExceptMatchCountVs()
        {
            return ExceptField("matchCountVs");
        }
    }

    public partial class HeroStatsHeroDryadTypeQueryBuilder : GraphQlQueryBuilder<HeroStatsHeroDryadTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId1" },
                new GraphQlFieldMetadata { Name = "heroId2" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "networth" },
                new GraphQlFieldMetadata { Name = "duration" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "firstBloodTime" },
                new GraphQlFieldMetadata { Name = "cs" },
                new GraphQlFieldMetadata { Name = "dn" },
                new GraphQlFieldMetadata { Name = "goldEarned" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "heroDamage" },
                new GraphQlFieldMetadata { Name = "towerDamage" },
                new GraphQlFieldMetadata { Name = "heroHealing" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "synergy" },
                new GraphQlFieldMetadata { Name = "winRateHeroId1" },
                new GraphQlFieldMetadata { Name = "winRateHeroId2" },
                new GraphQlFieldMetadata { Name = "winsAverage" }
            };

        protected override string TypeName { get { return "HeroStatsHeroDryadType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroStatsHeroDryadTypeQueryBuilder WithHeroId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId1", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptHeroId1()
        {
            return ExceptField("heroId1");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithHeroId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId2", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptHeroId2()
        {
            return ExceptField("heroId2");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("duration", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptDuration()
        {
            return ExceptField("duration");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithFirstBloodTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstBloodTime", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptFirstBloodTime()
        {
            return ExceptField("firstBloodTime");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithCs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cs", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptCs()
        {
            return ExceptField("cs");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithDn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dn", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptDn()
        {
            return ExceptField("dn");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithGoldEarned(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldEarned", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptGoldEarned()
        {
            return ExceptField("goldEarned");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithHeroHealing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealing", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptHeroHealing()
        {
            return ExceptField("heroHealing");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithSynergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("synergy", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptSynergy()
        {
            return ExceptField("synergy");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithWinRateHeroId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateHeroId1", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptWinRateHeroId1()
        {
            return ExceptField("winRateHeroId1");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithWinRateHeroId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRateHeroId2", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptWinRateHeroId2()
        {
            return ExceptField("winRateHeroId2");
        }

        public HeroStatsHeroDryadTypeQueryBuilder WithWinsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroStatsHeroDryadTypeQueryBuilder ExceptWinsAverage()
        {
            return ExceptField("winsAverage");
        }
    }

    public partial class HeroItemPurchaseTypeQueryBuilder : GraphQlQueryBuilder<HeroItemPurchaseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "instance" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "winsAverage" }
            };

        protected override string TypeName { get { return "HeroItemPurchaseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroItemPurchaseTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroItemPurchaseTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroItemPurchaseTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroItemPurchaseTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroItemPurchaseTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public HeroItemPurchaseTypeQueryBuilder WithInstance(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("instance", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptInstance()
        {
            return ExceptField("instance");
        }

        public HeroItemPurchaseTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroItemPurchaseTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroItemPurchaseTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroItemPurchaseTypeQueryBuilder WithWinsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemPurchaseTypeQueryBuilder ExceptWinsAverage()
        {
            return ExceptField("winsAverage");
        }
    }

    public partial class HeroItemStartingPurchaseTypeQueryBuilder : GraphQlQueryBuilder<HeroItemStartingPurchaseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "instance" },
                new GraphQlFieldMetadata { Name = "wasGiven" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "winsAverage" }
            };

        protected override string TypeName { get { return "HeroItemStartingPurchaseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroItemStartingPurchaseTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithInstance(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("instance", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptInstance()
        {
            return ExceptField("instance");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithWasGiven(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wasGiven", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptWasGiven()
        {
            return ExceptField("wasGiven");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroItemStartingPurchaseTypeQueryBuilder WithWinsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemStartingPurchaseTypeQueryBuilder ExceptWinsAverage()
        {
            return ExceptField("winsAverage");
        }
    }

    public partial class HeroItemBootPurchaseTypeQueryBuilder : GraphQlQueryBuilder<HeroItemBootPurchaseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "instance" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "timeAverage" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "winAverage" },
                new GraphQlFieldMetadata { Name = "kills" },
                new GraphQlFieldMetadata { Name = "killsAverage" },
                new GraphQlFieldMetadata { Name = "deaths" },
                new GraphQlFieldMetadata { Name = "deathsAverage" },
                new GraphQlFieldMetadata { Name = "assists" },
                new GraphQlFieldMetadata { Name = "assistsAverage" },
                new GraphQlFieldMetadata { Name = "goldEarned" },
                new GraphQlFieldMetadata { Name = "goldEarnedAverage" },
                new GraphQlFieldMetadata { Name = "xp" },
                new GraphQlFieldMetadata { Name = "xpAverage" },
                new GraphQlFieldMetadata { Name = "activations" },
                new GraphQlFieldMetadata { Name = "activationsAverage" },
                new GraphQlFieldMetadata { Name = "activationTime" },
                new GraphQlFieldMetadata { Name = "activationsTimeAverage" }
            };

        protected override string TypeName { get { return "HeroItemBootPurchaseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroItemBootPurchaseTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithInstance(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("instance", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptInstance()
        {
            return ExceptField("instance");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithTimeAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptTimeAverage()
        {
            return ExceptField("timeAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithWinAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptWinAverage()
        {
            return ExceptField("winAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithKillsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptKillsAverage()
        {
            return ExceptField("killsAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithDeathsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptDeathsAverage()
        {
            return ExceptField("deathsAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithAssistsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptAssistsAverage()
        {
            return ExceptField("assistsAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithGoldEarned(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldEarned", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptGoldEarned()
        {
            return ExceptField("goldEarned");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithGoldEarnedAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldEarnedAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptGoldEarnedAverage()
        {
            return ExceptField("goldEarnedAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithXp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xp", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptXp()
        {
            return ExceptField("xp");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithXpAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("xpAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptXpAverage()
        {
            return ExceptField("xpAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithActivations(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activations", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptActivations()
        {
            return ExceptField("activations");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithActivationsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activationsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptActivationsAverage()
        {
            return ExceptField("activationsAverage");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithActivationTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activationTime", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptActivationTime()
        {
            return ExceptField("activationTime");
        }

        public HeroItemBootPurchaseTypeQueryBuilder WithActivationsTimeAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activationsTimeAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroItemBootPurchaseTypeQueryBuilder ExceptActivationsTimeAverage()
        {
            return ExceptField("activationsTimeAverage");
        }
    }

    public partial class HeroNeutralItemTypeQueryBuilder : GraphQlQueryBuilder<HeroNeutralItemTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "item", IsComplex = true, QueryBuilderType = typeof(ItemTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "equippedMatchCount" },
                new GraphQlFieldMetadata { Name = "equippedMatchWinCount" }
            };

        protected override string TypeName { get { return "HeroNeutralItemType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroNeutralItemTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroNeutralItemTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroNeutralItemTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroNeutralItemTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroNeutralItemTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public HeroNeutralItemTypeQueryBuilder WithItem(ItemTypeQueryBuilder itemTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("item", alias, itemTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptItem()
        {
            return ExceptField("item");
        }

        public HeroNeutralItemTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroNeutralItemTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroNeutralItemTypeQueryBuilder WithEquippedMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("equippedMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptEquippedMatchCount()
        {
            return ExceptField("equippedMatchCount");
        }

        public HeroNeutralItemTypeQueryBuilder WithEquippedMatchWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("equippedMatchWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroNeutralItemTypeQueryBuilder ExceptEquippedMatchWinCount()
        {
            return ExceptField("equippedMatchWinCount");
        }
    }

    public partial class ItemTypeQueryBuilder : GraphQlQueryBuilder<ItemTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "shortName" },
                new GraphQlFieldMetadata { Name = "isSupportFullItem" },
                new GraphQlFieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(ItemLanguageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stat", IsComplex = true, QueryBuilderType = typeof(ItemStatTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "attributes", IsComplex = true, QueryBuilderType = typeof(ItemAttributeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "components", IsComplex = true, QueryBuilderType = typeof(ItemComponentTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "image" }
            };

        protected override string TypeName { get { return "ItemType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ItemTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ItemTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public ItemTypeQueryBuilder WithShortName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shortName", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptShortName()
        {
            return ExceptField("shortName");
        }

        public ItemTypeQueryBuilder WithIsSupportFullItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSupportFullItem", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptIsSupportFullItem()
        {
            return ExceptField("isSupportFullItem");
        }

        public ItemTypeQueryBuilder WithLanguage(ItemLanguageTypeQueryBuilder itemLanguageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, itemLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public ItemTypeQueryBuilder WithStat(ItemStatTypeQueryBuilder itemStatTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stat", alias, itemStatTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptStat()
        {
            return ExceptField("stat");
        }

        public ItemTypeQueryBuilder WithAttributes(ItemAttributeTypeQueryBuilder itemAttributeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("attributes", alias, itemAttributeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }

        public ItemTypeQueryBuilder WithComponents(ItemComponentTypeQueryBuilder itemComponentTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("components", alias, itemComponentTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptComponents()
        {
            return ExceptField("components");
        }

        public ItemTypeQueryBuilder WithImage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("image", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemTypeQueryBuilder ExceptImage()
        {
            return ExceptField("image");
        }
    }

    public partial class ItemLanguageTypeQueryBuilder : GraphQlQueryBuilder<ItemLanguageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "lore", IsComplex = true },
                new GraphQlFieldMetadata { Name = "notes", IsComplex = true },
                new GraphQlFieldMetadata { Name = "attributes", IsComplex = true }
            };

        protected override string TypeName { get { return "ItemLanguageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemLanguageTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemLanguageTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public ItemLanguageTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemLanguageTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ItemLanguageTypeQueryBuilder WithLore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lore", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemLanguageTypeQueryBuilder ExceptLore()
        {
            return ExceptField("lore");
        }

        public ItemLanguageTypeQueryBuilder WithNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("notes", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemLanguageTypeQueryBuilder ExceptNotes()
        {
            return ExceptField("notes");
        }

        public ItemLanguageTypeQueryBuilder WithAttributes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attributes", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemLanguageTypeQueryBuilder ExceptAttributes()
        {
            return ExceptField("attributes");
        }
    }

    public partial class ItemStatTypeQueryBuilder : GraphQlQueryBuilder<ItemStatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "behavior" },
                new GraphQlFieldMetadata { Name = "unitTargetType" },
                new GraphQlFieldMetadata { Name = "unitTargetTeam" },
                new GraphQlFieldMetadata { Name = "unitTargetFlags" },
                new GraphQlFieldMetadata { Name = "fightRecapLevel" },
                new GraphQlFieldMetadata { Name = "castRange", IsComplex = true },
                new GraphQlFieldMetadata { Name = "castPoint", IsComplex = true },
                new GraphQlFieldMetadata { Name = "manaCost", IsComplex = true },
                new GraphQlFieldMetadata { Name = "channelTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "sharedCooldown" },
                new GraphQlFieldMetadata { Name = "cost" },
                new GraphQlFieldMetadata { Name = "shopTags" },
                new GraphQlFieldMetadata { Name = "aliases" },
                new GraphQlFieldMetadata { Name = "quality" },
                new GraphQlFieldMetadata { Name = "isSellable" },
                new GraphQlFieldMetadata { Name = "isDroppable" },
                new GraphQlFieldMetadata { Name = "isPurchasable" },
                new GraphQlFieldMetadata { Name = "isSideShop" },
                new GraphQlFieldMetadata { Name = "isStackable" },
                new GraphQlFieldMetadata { Name = "isPermanent" },
                new GraphQlFieldMetadata { Name = "isHideCharges" },
                new GraphQlFieldMetadata { Name = "isRequiresCharges" },
                new GraphQlFieldMetadata { Name = "isDisplayCharges" },
                new GraphQlFieldMetadata { Name = "isSupport" },
                new GraphQlFieldMetadata { Name = "isAlertable" },
                new GraphQlFieldMetadata { Name = "isTempestDoubleClonable" },
                new GraphQlFieldMetadata { Name = "stockMax" },
                new GraphQlFieldMetadata { Name = "initialCharges" },
                new GraphQlFieldMetadata { Name = "initialStock" },
                new GraphQlFieldMetadata { Name = "stockTime" },
                new GraphQlFieldMetadata { Name = "initialStockTime" },
                new GraphQlFieldMetadata { Name = "isRecipe" },
                new GraphQlFieldMetadata { Name = "needsComponents" },
                new GraphQlFieldMetadata { Name = "upgradeItem" },
                new GraphQlFieldMetadata { Name = "upgradeRecipe" },
                new GraphQlFieldMetadata { Name = "itemResult" },
                new GraphQlFieldMetadata { Name = "neutralItemDropTime" },
                new GraphQlFieldMetadata { Name = "neutralItemTier" }
            };

        protected override string TypeName { get { return "ItemStatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemStatTypeQueryBuilder WithBehavior(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behavior", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptBehavior()
        {
            return ExceptField("behavior");
        }

        public ItemStatTypeQueryBuilder WithUnitTargetType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitTargetType", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptUnitTargetType()
        {
            return ExceptField("unitTargetType");
        }

        public ItemStatTypeQueryBuilder WithUnitTargetTeam(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitTargetTeam", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptUnitTargetTeam()
        {
            return ExceptField("unitTargetTeam");
        }

        public ItemStatTypeQueryBuilder WithUnitTargetFlags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitTargetFlags", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptUnitTargetFlags()
        {
            return ExceptField("unitTargetFlags");
        }

        public ItemStatTypeQueryBuilder WithFightRecapLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fightRecapLevel", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptFightRecapLevel()
        {
            return ExceptField("fightRecapLevel");
        }

        public ItemStatTypeQueryBuilder WithCastRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castRange", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptCastRange()
        {
            return ExceptField("castRange");
        }

        public ItemStatTypeQueryBuilder WithCastPoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("castPoint", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptCastPoint()
        {
            return ExceptField("castPoint");
        }

        public ItemStatTypeQueryBuilder WithManaCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("manaCost", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptManaCost()
        {
            return ExceptField("manaCost");
        }

        public ItemStatTypeQueryBuilder WithChannelTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channelTime", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptChannelTime()
        {
            return ExceptField("channelTime");
        }

        public ItemStatTypeQueryBuilder WithSharedCooldown(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sharedCooldown", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptSharedCooldown()
        {
            return ExceptField("sharedCooldown");
        }

        public ItemStatTypeQueryBuilder WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptCost()
        {
            return ExceptField("cost");
        }

        public ItemStatTypeQueryBuilder WithShopTags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shopTags", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptShopTags()
        {
            return ExceptField("shopTags");
        }

        public ItemStatTypeQueryBuilder WithAliases(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("aliases", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptAliases()
        {
            return ExceptField("aliases");
        }

        public ItemStatTypeQueryBuilder WithQuality(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("quality", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptQuality()
        {
            return ExceptField("quality");
        }

        public ItemStatTypeQueryBuilder WithIsSellable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSellable", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsSellable()
        {
            return ExceptField("isSellable");
        }

        public ItemStatTypeQueryBuilder WithIsDroppable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDroppable", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsDroppable()
        {
            return ExceptField("isDroppable");
        }

        public ItemStatTypeQueryBuilder WithIsPurchasable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPurchasable", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsPurchasable()
        {
            return ExceptField("isPurchasable");
        }

        public ItemStatTypeQueryBuilder WithIsSideShop(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSideShop", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsSideShop()
        {
            return ExceptField("isSideShop");
        }

        public ItemStatTypeQueryBuilder WithIsStackable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStackable", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsStackable()
        {
            return ExceptField("isStackable");
        }

        public ItemStatTypeQueryBuilder WithIsPermanent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isPermanent", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsPermanent()
        {
            return ExceptField("isPermanent");
        }

        public ItemStatTypeQueryBuilder WithIsHideCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isHideCharges", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsHideCharges()
        {
            return ExceptField("isHideCharges");
        }

        public ItemStatTypeQueryBuilder WithIsRequiresCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRequiresCharges", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsRequiresCharges()
        {
            return ExceptField("isRequiresCharges");
        }

        public ItemStatTypeQueryBuilder WithIsDisplayCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDisplayCharges", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsDisplayCharges()
        {
            return ExceptField("isDisplayCharges");
        }

        public ItemStatTypeQueryBuilder WithIsSupport(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSupport", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsSupport()
        {
            return ExceptField("isSupport");
        }

        public ItemStatTypeQueryBuilder WithIsAlertable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAlertable", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsAlertable()
        {
            return ExceptField("isAlertable");
        }

        public ItemStatTypeQueryBuilder WithIsTempestDoubleClonable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTempestDoubleClonable", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsTempestDoubleClonable()
        {
            return ExceptField("isTempestDoubleClonable");
        }

        public ItemStatTypeQueryBuilder WithStockMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stockMax", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptStockMax()
        {
            return ExceptField("stockMax");
        }

        public ItemStatTypeQueryBuilder WithInitialCharges(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialCharges", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptInitialCharges()
        {
            return ExceptField("initialCharges");
        }

        public ItemStatTypeQueryBuilder WithInitialStock(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialStock", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptInitialStock()
        {
            return ExceptField("initialStock");
        }

        public ItemStatTypeQueryBuilder WithStockTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stockTime", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptStockTime()
        {
            return ExceptField("stockTime");
        }

        public ItemStatTypeQueryBuilder WithInitialStockTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialStockTime", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptInitialStockTime()
        {
            return ExceptField("initialStockTime");
        }

        public ItemStatTypeQueryBuilder WithIsRecipe(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRecipe", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptIsRecipe()
        {
            return ExceptField("isRecipe");
        }

        public ItemStatTypeQueryBuilder WithNeedsComponents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("needsComponents", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptNeedsComponents()
        {
            return ExceptField("needsComponents");
        }

        public ItemStatTypeQueryBuilder WithUpgradeItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("upgradeItem", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptUpgradeItem()
        {
            return ExceptField("upgradeItem");
        }

        public ItemStatTypeQueryBuilder WithUpgradeRecipe(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("upgradeRecipe", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptUpgradeRecipe()
        {
            return ExceptField("upgradeRecipe");
        }

        public ItemStatTypeQueryBuilder WithItemResult(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemResult", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptItemResult()
        {
            return ExceptField("itemResult");
        }

        public ItemStatTypeQueryBuilder WithNeutralItemDropTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutralItemDropTime", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptNeutralItemDropTime()
        {
            return ExceptField("neutralItemDropTime");
        }

        public ItemStatTypeQueryBuilder WithNeutralItemTier(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutralItemTier", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemStatTypeQueryBuilder ExceptNeutralItemTier()
        {
            return ExceptField("neutralItemTier");
        }
    }

    public partial class ItemAttributeTypeQueryBuilder : GraphQlQueryBuilder<ItemAttributeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "ItemAttributeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemAttributeTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemAttributeTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ItemAttributeTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemAttributeTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public partial class ItemComponentTypeQueryBuilder : GraphQlQueryBuilder<ItemComponentTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "index" },
                new GraphQlFieldMetadata { Name = "componentId" }
            };

        protected override string TypeName { get { return "ItemComponentType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ItemComponentTypeQueryBuilder WithIndex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("index", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemComponentTypeQueryBuilder ExceptIndex()
        {
            return ExceptField("index");
        }

        public ItemComponentTypeQueryBuilder WithComponentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("componentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ItemComponentTypeQueryBuilder ExceptComponentId()
        {
            return ExceptField("componentId");
        }
    }

    public partial class HeroLaneOutcomeTypeQueryBuilder : GraphQlQueryBuilder<HeroLaneOutcomeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId1" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "drawCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "lossCount" },
                new GraphQlFieldMetadata { Name = "stompWinCount" },
                new GraphQlFieldMetadata { Name = "stompLossCount" },
                new GraphQlFieldMetadata { Name = "matchWinCount" },
                new GraphQlFieldMetadata { Name = "csCount" },
                new GraphQlFieldMetadata { Name = "heroId2" }
            };

        protected override string TypeName { get { return "HeroLaneOutcomeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroLaneOutcomeTypeQueryBuilder WithHeroId1(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId1", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptHeroId1()
        {
            return ExceptField("heroId1");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithDrawCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("drawCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptDrawCount()
        {
            return ExceptField("drawCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptLossCount()
        {
            return ExceptField("lossCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithStompWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stompWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptStompWinCount()
        {
            return ExceptField("stompWinCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithStompLossCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stompLossCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptStompLossCount()
        {
            return ExceptField("stompLossCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithMatchWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchWinCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptMatchWinCount()
        {
            return ExceptField("matchWinCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithCsCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("csCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptCsCount()
        {
            return ExceptField("csCount");
        }

        public HeroLaneOutcomeTypeQueryBuilder WithHeroId2(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId2", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroLaneOutcomeTypeQueryBuilder ExceptHeroId2()
        {
            return ExceptField("heroId2");
        }
    }

    public partial class HeroMatchupTypeQueryBuilder : GraphQlQueryBuilder<HeroMatchupTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "advantage", IsComplex = true, QueryBuilderType = typeof(HeroDryadTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "disadvantage", IsComplex = true, QueryBuilderType = typeof(HeroDryadTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroMatchupType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroMatchupTypeQueryBuilder WithAdvantage(HeroDryadTypeQueryBuilder heroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("advantage", alias, heroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroMatchupTypeQueryBuilder ExceptAdvantage()
        {
            return ExceptField("advantage");
        }

        public HeroMatchupTypeQueryBuilder WithDisadvantage(HeroDryadTypeQueryBuilder heroDryadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("disadvantage", alias, heroDryadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroMatchupTypeQueryBuilder ExceptDisadvantage()
        {
            return ExceptField("disadvantage");
        }
    }

    public partial class HeroAbilityTalentTypeQueryBuilder : GraphQlQueryBuilder<HeroAbilityTalentTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "winsAverage" },
                new GraphQlFieldMetadata { Name = "timeAverage" }
            };

        protected override string TypeName { get { return "HeroAbilityTalentType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroAbilityTalentTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroAbilityTalentTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroAbilityTalentTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroAbilityTalentTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroAbilityTalentTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public HeroAbilityTalentTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroAbilityTalentTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroAbilityTalentTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroAbilityTalentTypeQueryBuilder WithWinsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptWinsAverage()
        {
            return ExceptField("winsAverage");
        }

        public HeroAbilityTalentTypeQueryBuilder WithTimeAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptTimeAverage()
        {
            return ExceptField("timeAverage");
        }
    }

    public partial class HeroWinHourTypeQueryBuilder : GraphQlQueryBuilder<HeroWinHourTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "hour" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinHourType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinHourTypeQueryBuilder WithHour(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hour", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinHourTypeQueryBuilder ExceptHour()
        {
            return ExceptField("hour");
        }

        public HeroWinHourTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinHourTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinHourTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinHourTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinHourTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinHourTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class HeroWinDayTypeQueryBuilder : GraphQlQueryBuilder<HeroWinDayTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "day" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinDayType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinDayTypeQueryBuilder WithDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("day", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinDayTypeQueryBuilder ExceptDay()
        {
            return ExceptField("day");
        }

        public HeroWinDayTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinDayTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinDayTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinDayTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinDayTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinDayTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class HeroWinWeekTypeQueryBuilder : GraphQlQueryBuilder<HeroWinWeekTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "durationMinute" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinWeekType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinWeekTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroWinWeekTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinWeekTypeQueryBuilder WithDurationMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptDurationMinute()
        {
            return ExceptField("durationMinute");
        }

        public HeroWinWeekTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinWeekTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinWeekTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class HeroWinMonthTypeQueryBuilder : GraphQlQueryBuilder<HeroWinMonthTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "month" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "durationMinute" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinMonthType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinMonthTypeQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public HeroWinMonthTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinMonthTypeQueryBuilder WithDurationMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptDurationMinute()
        {
            return ExceptField("durationMinute");
        }

        public HeroWinMonthTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinMonthTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinMonthTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class HeroWinGameVersionTypeQueryBuilder : GraphQlQueryBuilder<HeroWinGameVersionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "durationMinute" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "HeroWinGameVersionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroWinGameVersionTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinGameVersionTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public HeroWinGameVersionTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinGameVersionTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroWinGameVersionTypeQueryBuilder WithDurationMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("durationMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinGameVersionTypeQueryBuilder ExceptDurationMinute()
        {
            return ExceptField("durationMinute");
        }

        public HeroWinGameVersionTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinGameVersionTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public HeroWinGameVersionTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroWinGameVersionTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class HeroGuideListTypeQueryBuilder : GraphQlQueryBuilder<HeroGuideListTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "guides", IsComplex = true, QueryBuilderType = typeof(HeroGuideTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroGuideListType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroGuideListTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideListTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroGuideListTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideListTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroGuideListTypeQueryBuilder WithGuides(HeroGuideTypeQueryBuilder heroGuideTypeQueryBuilder, QueryBuilderParameter<short?> itemId = null, QueryBuilderParameter<short?> neutralItemId = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (itemId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "itemId", ArgumentValue = itemId} );

            if (neutralItemId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "neutralItemId", ArgumentValue = neutralItemId} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("guides", alias, heroGuideTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public HeroGuideListTypeQueryBuilder ExceptGuides()
        {
            return ExceptField("guides");
        }
    }

    public partial class HeroGuideTypeQueryBuilder : GraphQlQueryBuilder<HeroGuideTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchPlayer", IsComplex = true, QueryBuilderType = typeof(MatchPlayerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdDateTime" },
                new GraphQlFieldMetadata { Name = "itemIds", IsComplex = true },
                new GraphQlFieldMetadata { Name = "neutralItemIds", IsComplex = true }
            };

        protected override string TypeName { get { return "HeroGuideType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroGuideTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroGuideTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public HeroGuideTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public HeroGuideTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public HeroGuideTypeQueryBuilder WithMatchPlayer(MatchPlayerTypeQueryBuilder matchPlayerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchPlayer", alias, matchPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptMatchPlayer()
        {
            return ExceptField("matchPlayer");
        }

        public HeroGuideTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }

        public HeroGuideTypeQueryBuilder WithItemIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptItemIds()
        {
            return ExceptField("itemIds");
        }

        public HeroGuideTypeQueryBuilder WithNeutralItemIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("neutralItemIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroGuideTypeQueryBuilder ExceptNeutralItemIds()
        {
            return ExceptField("neutralItemIds");
        }
    }

    public partial class HeroRampageObjectTypeQueryBuilder : GraphQlQueryBuilder<HeroRampageObjectTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "heroIds", IsComplex = true },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroRampageObjectType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroRampageObjectTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroRampageObjectTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public HeroRampageObjectTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroRampageObjectTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public HeroRampageObjectTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroRampageObjectTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroRampageObjectTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroRampageObjectTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public HeroRampageObjectTypeQueryBuilder WithHeroIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroRampageObjectTypeQueryBuilder ExceptHeroIds()
        {
            return ExceptField("heroIds");
        }

        public HeroRampageObjectTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroRampageObjectTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class HeroAbilityMinTypeQueryBuilder : GraphQlQueryBuilder<HeroAbilityMinTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" }
            };

        protected override string TypeName { get { return "HeroAbilityMinType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroAbilityMinTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroAbilityMinTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroAbilityMinTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroAbilityMinTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroAbilityMinTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public HeroAbilityMinTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public HeroAbilityMinTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroAbilityMinTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMinTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }
    }

    public partial class HeroAbilityMaxTypeQueryBuilder : GraphQlQueryBuilder<HeroAbilityMaxTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" }
            };

        protected override string TypeName { get { return "HeroAbilityMaxType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroAbilityMaxTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroAbilityMaxTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroAbilityMaxTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroAbilityMaxTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroAbilityMaxTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public HeroAbilityMaxTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public HeroAbilityMaxTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroAbilityMaxTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityMaxTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }
    }

    public partial class HeroBanTypeQueryBuilder : GraphQlQueryBuilder<HeroBanTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "day" },
                new GraphQlFieldMetadata { Name = "bracketBasicIds" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" }
            };

        protected override string TypeName { get { return "HeroBanType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroBanTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroBanTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroBanTypeQueryBuilder WithDay(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("day", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroBanTypeQueryBuilder ExceptDay()
        {
            return ExceptField("day");
        }

        public HeroBanTypeQueryBuilder WithBracketBasicIds(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasicIds", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroBanTypeQueryBuilder ExceptBracketBasicIds()
        {
            return ExceptField("bracketBasicIds");
        }

        public HeroBanTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroBanTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public HeroBanTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroBanTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }
    }

    public partial class ConstantQueryQueryBuilder : GraphQlQueryBuilder<ConstantQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "hero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroes", IsComplex = true, QueryBuilderType = typeof(HeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true, QueryBuilderType = typeof(RoleTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "item", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ItemTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(ItemTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ability", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "abilities", IsComplex = true, QueryBuilderType = typeof(AbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameModes", IsComplex = true, QueryBuilderType = typeof(GameModeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lobbyTypes", IsComplex = true, QueryBuilderType = typeof(LobbyTypeTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clusters", IsComplex = true, QueryBuilderType = typeof(ClusterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "regions", IsComplex = true, QueryBuilderType = typeof(RegionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GameVersionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "gameVersions", IsComplex = true, QueryBuilderType = typeof(GameVersionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "npc", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NpcTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "npcs", IsComplex = true, QueryBuilderType = typeof(NpcTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "patchNotes", IsComplex = true, QueryBuilderType = typeof(PatchNoteLanguageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "customAbilities", IsComplex = true, QueryBuilderType = typeof(AbilityCustomGameTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "modifiers", IsComplex = true, QueryBuilderType = typeof(ModifierTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "proSteamAccounts", IsComplex = true, QueryBuilderType = typeof(ProSteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "popularTeamIds", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "casters", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tiWinners", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ConstantQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ConstantQueryQueryBuilder WithHero(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> id, QueryBuilderParameter<short?> gameVersionId = null, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("hero", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }

        public ConstantQueryQueryBuilder WithHeroes(HeroTypeQueryBuilder heroTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId = null, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("heroes", alias, heroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptHeroes()
        {
            return ExceptField("heroes");
        }

        public ConstantQueryQueryBuilder WithRoles(RoleTypeQueryBuilder roleTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roles", alias, roleTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public ConstantQueryQueryBuilder WithItem(ItemTypeQueryBuilder itemTypeQueryBuilder, QueryBuilderParameter<int> id, QueryBuilderParameter<short?> gameVersionId = null, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("item", alias, itemTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptItem()
        {
            return ExceptField("item");
        }

        public ConstantQueryQueryBuilder WithItems(ItemTypeQueryBuilder itemTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId = null, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("items", alias, itemTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public ConstantQueryQueryBuilder WithAbility(AbilityTypeQueryBuilder abilityTypeQueryBuilder, QueryBuilderParameter<int> id, QueryBuilderParameter<short?> gameVersionId = null, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("ability", alias, abilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptAbility()
        {
            return ExceptField("ability");
        }

        public ConstantQueryQueryBuilder WithAbilities(AbilityTypeQueryBuilder abilityTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId = null, QueryBuilderParameter<Language> language = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            if (language != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "language", ArgumentValue = language} );

            return WithObjectField("abilities", alias, abilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptAbilities()
        {
            return ExceptField("abilities");
        }

        public ConstantQueryQueryBuilder WithGameModes(GameModeTypeQueryBuilder gameModeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("gameModes", alias, gameModeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptGameModes()
        {
            return ExceptField("gameModes");
        }

        public ConstantQueryQueryBuilder WithLobbyTypes(LobbyTypeTypeQueryBuilder lobbyTypeTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lobbyTypes", alias, lobbyTypeTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptLobbyTypes()
        {
            return ExceptField("lobbyTypes");
        }

        public ConstantQueryQueryBuilder WithClusters(ClusterTypeQueryBuilder clusterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("clusters", alias, clusterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptClusters()
        {
            return ExceptField("clusters");
        }

        public ConstantQueryQueryBuilder WithRegions(RegionTypeQueryBuilder regionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("regions", alias, regionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptRegions()
        {
            return ExceptField("regions");
        }

        public ConstantQueryQueryBuilder WithGameVersion(GameVersionTypeQueryBuilder gameVersionTypeQueryBuilder, QueryBuilderParameter<short?> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("gameVersion", alias, gameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptGameVersion()
        {
            return ExceptField("gameVersion");
        }

        public ConstantQueryQueryBuilder WithGameVersions(GameVersionTypeQueryBuilder gameVersionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("gameVersions", alias, gameVersionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptGameVersions()
        {
            return ExceptField("gameVersions");
        }

        public ConstantQueryQueryBuilder WithNpc(NpcTypeQueryBuilder npcTypeQueryBuilder, QueryBuilderParameter<short?> id, QueryBuilderParameter<short?> gameVersionId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            return WithObjectField("npc", alias, npcTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptNpc()
        {
            return ExceptField("npc");
        }

        public ConstantQueryQueryBuilder WithNpcs(NpcTypeQueryBuilder npcTypeQueryBuilder, QueryBuilderParameter<short?> gameVersionId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            return WithObjectField("npcs", alias, npcTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptNpcs()
        {
            return ExceptField("npcs");
        }

        public ConstantQueryQueryBuilder WithPatchNotes(PatchNoteLanguageTypeQueryBuilder patchNoteLanguageTypeQueryBuilder, QueryBuilderParameter<Language> languageId = null, QueryBuilderParameter<short?> gameVersionId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (languageId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "languageId", ArgumentValue = languageId} );

            if (gameVersionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVersionId", ArgumentValue = gameVersionId} );

            return WithObjectField("patchNotes", alias, patchNoteLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptPatchNotes()
        {
            return ExceptField("patchNotes");
        }

        public ConstantQueryQueryBuilder WithCustomAbilities(AbilityCustomGameTypeQueryBuilder abilityCustomGameTypeQueryBuilder, QueryBuilderParameter<Language> languageId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (languageId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "languageId", ArgumentValue = languageId} );

            return WithObjectField("customAbilities", alias, abilityCustomGameTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ConstantQueryQueryBuilder ExceptCustomAbilities()
        {
            return ExceptField("customAbilities");
        }

        public ConstantQueryQueryBuilder WithModifiers(ModifierTypeQueryBuilder modifierTypeQueryBuilder, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("modifiers", alias, modifierTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public ConstantQueryQueryBuilder ExceptModifiers()
        {
            return ExceptField("modifiers");
        }

        public ConstantQueryQueryBuilder WithProSteamAccounts(ProSteamAccountTypeQueryBuilder proSteamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("proSteamAccounts", alias, proSteamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptProSteamAccounts()
        {
            return ExceptField("proSteamAccounts");
        }

        public ConstantQueryQueryBuilder WithPopularTeamIds(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("popularTeamIds", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptPopularTeamIds()
        {
            return ExceptField("popularTeamIds");
        }

        public ConstantQueryQueryBuilder WithCasters(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("casters", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptCasters()
        {
            return ExceptField("casters");
        }

        public ConstantQueryQueryBuilder WithTiWinners(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tiWinners", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ConstantQueryQueryBuilder ExceptTiWinners()
        {
            return ExceptField("tiWinners");
        }
    }

    public partial class RoleTypeQueryBuilder : GraphQlQueryBuilder<RoleTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "roleId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "langKey" }
            };

        protected override string TypeName { get { return "RoleType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoleTypeQueryBuilder WithRoleId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("roleId", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleTypeQueryBuilder ExceptRoleId()
        {
            return ExceptField("roleId");
        }

        public RoleTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RoleTypeQueryBuilder WithLangKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("langKey", alias, new GraphQlDirective[] { include, skip });
        }

        public RoleTypeQueryBuilder ExceptLangKey()
        {
            return ExceptField("langKey");
        }
    }

    public partial class GameModeTypeQueryBuilder : GraphQlQueryBuilder<GameModeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "GameModeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GameModeTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GameModeTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GameModeTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GameModeTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public partial class LobbyTypeTypeQueryBuilder : GraphQlQueryBuilder<LobbyTypeTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "LobbyTypeType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LobbyTypeTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public LobbyTypeTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public LobbyTypeTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LobbyTypeTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public partial class ClusterTypeQueryBuilder : GraphQlQueryBuilder<ClusterTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "regionId" }
            };

        protected override string TypeName { get { return "ClusterType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClusterTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ClusterTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ClusterTypeQueryBuilder WithRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("regionId", alias, new GraphQlDirective[] { include, skip });
        }

        public ClusterTypeQueryBuilder ExceptRegionId()
        {
            return ExceptField("regionId");
        }
    }

    public partial class RegionTypeQueryBuilder : GraphQlQueryBuilder<RegionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "clientName" },
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "leaderboardDivision" },
                new GraphQlFieldMetadata { Name = "langKey" },
                new GraphQlFieldMetadata { Name = "latitude" },
                new GraphQlFieldMetadata { Name = "longitude" },
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "matchGroup" },
                new GraphQlFieldMetadata { Name = "weekendTourneyDivision" }
            };

        protected override string TypeName { get { return "RegionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RegionTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RegionTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RegionTypeQueryBuilder WithClientName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientName", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptClientName()
        {
            return ExceptField("clientName");
        }

        public RegionTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public RegionTypeQueryBuilder WithLeaderboardDivision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaderboardDivision", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLeaderboardDivision()
        {
            return ExceptField("leaderboardDivision");
        }

        public RegionTypeQueryBuilder WithLangKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("langKey", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLangKey()
        {
            return ExceptField("langKey");
        }

        public RegionTypeQueryBuilder WithLatitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("latitude", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLatitude()
        {
            return ExceptField("latitude");
        }

        public RegionTypeQueryBuilder WithLongitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("longitude", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptLongitude()
        {
            return ExceptField("longitude");
        }

        public RegionTypeQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public RegionTypeQueryBuilder WithMatchGroup(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchGroup", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptMatchGroup()
        {
            return ExceptField("matchGroup");
        }

        public RegionTypeQueryBuilder WithWeekendTourneyDivision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weekendTourneyDivision", alias, new GraphQlDirective[] { include, skip });
        }

        public RegionTypeQueryBuilder ExceptWeekendTourneyDivision()
        {
            return ExceptField("weekendTourneyDivision");
        }
    }

    public partial class GameVersionTypeQueryBuilder : GraphQlQueryBuilder<GameVersionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "asOfDateTime" }
            };

        protected override string TypeName { get { return "GameVersionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GameVersionTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public GameVersionTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public GameVersionTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GameVersionTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public GameVersionTypeQueryBuilder WithAsOfDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("asOfDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GameVersionTypeQueryBuilder ExceptAsOfDateTime()
        {
            return ExceptField("asOfDateTime");
        }
    }

    public partial class NpcTypeQueryBuilder : GraphQlQueryBuilder<NpcTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "stat", IsComplex = true, QueryBuilderType = typeof(NpcStatTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "NpcType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NpcTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public NpcTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public NpcTypeQueryBuilder WithStat(NpcStatTypeQueryBuilder npcStatTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stat", alias, npcStatTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NpcTypeQueryBuilder ExceptStat()
        {
            return ExceptField("stat");
        }
    }

    public partial class NpcStatTypeQueryBuilder : GraphQlQueryBuilder<NpcStatTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "statusHealth" },
                new GraphQlFieldMetadata { Name = "statusHealthRegen" },
                new GraphQlFieldMetadata { Name = "statusMana" },
                new GraphQlFieldMetadata { Name = "statusManaRegen" },
                new GraphQlFieldMetadata { Name = "movementSpeed" },
                new GraphQlFieldMetadata { Name = "movementTurnRate" },
                new GraphQlFieldMetadata { Name = "dayTimeVision" },
                new GraphQlFieldMetadata { Name = "nightTimeVision" },
                new GraphQlFieldMetadata { Name = "attackRangeBuffer" },
                new GraphQlFieldMetadata { Name = "attackRange" },
                new GraphQlFieldMetadata { Name = "isNeutralUnitType" },
                new GraphQlFieldMetadata { Name = "isAncient" },
                new GraphQlFieldMetadata { Name = "canBeDominated" },
                new GraphQlFieldMetadata { Name = "autoAttacksByDefault" },
                new GraphQlFieldMetadata { Name = "attackDamageMin" },
                new GraphQlFieldMetadata { Name = "attackDamageMax" },
                new GraphQlFieldMetadata { Name = "attackRate" },
                new GraphQlFieldMetadata { Name = "attackAnimationPoint" },
                new GraphQlFieldMetadata { Name = "projectileSpeed" },
                new GraphQlFieldMetadata { Name = "teamName" },
                new GraphQlFieldMetadata { Name = "combatClassAttack" },
                new GraphQlFieldMetadata { Name = "combatClassDefend" },
                new GraphQlFieldMetadata { Name = "unitRelationshipClass" },
                new GraphQlFieldMetadata { Name = "attackDesire" },
                new GraphQlFieldMetadata { Name = "hasInventory" },
                new GraphQlFieldMetadata { Name = "wakesNeutrals" }
            };

        protected override string TypeName { get { return "NpcStatType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NpcStatTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public NpcStatTypeQueryBuilder WithStatusHealth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusHealth", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptStatusHealth()
        {
            return ExceptField("statusHealth");
        }

        public NpcStatTypeQueryBuilder WithStatusHealthRegen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusHealthRegen", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptStatusHealthRegen()
        {
            return ExceptField("statusHealthRegen");
        }

        public NpcStatTypeQueryBuilder WithStatusMana(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusMana", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptStatusMana()
        {
            return ExceptField("statusMana");
        }

        public NpcStatTypeQueryBuilder WithStatusManaRegen(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("statusManaRegen", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptStatusManaRegen()
        {
            return ExceptField("statusManaRegen");
        }

        public NpcStatTypeQueryBuilder WithMovementSpeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("movementSpeed", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptMovementSpeed()
        {
            return ExceptField("movementSpeed");
        }

        public NpcStatTypeQueryBuilder WithMovementTurnRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("movementTurnRate", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptMovementTurnRate()
        {
            return ExceptField("movementTurnRate");
        }

        public NpcStatTypeQueryBuilder WithDayTimeVision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dayTimeVision", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptDayTimeVision()
        {
            return ExceptField("dayTimeVision");
        }

        public NpcStatTypeQueryBuilder WithNightTimeVision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("nightTimeVision", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptNightTimeVision()
        {
            return ExceptField("nightTimeVision");
        }

        public NpcStatTypeQueryBuilder WithAttackRangeBuffer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackRangeBuffer", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackRangeBuffer()
        {
            return ExceptField("attackRangeBuffer");
        }

        public NpcStatTypeQueryBuilder WithAttackRange(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackRange", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackRange()
        {
            return ExceptField("attackRange");
        }

        public NpcStatTypeQueryBuilder WithIsNeutralUnitType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isNeutralUnitType", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptIsNeutralUnitType()
        {
            return ExceptField("isNeutralUnitType");
        }

        public NpcStatTypeQueryBuilder WithIsAncient(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAncient", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptIsAncient()
        {
            return ExceptField("isAncient");
        }

        public NpcStatTypeQueryBuilder WithCanBeDominated(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("canBeDominated", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptCanBeDominated()
        {
            return ExceptField("canBeDominated");
        }

        public NpcStatTypeQueryBuilder WithAutoAttacksByDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoAttacksByDefault", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAutoAttacksByDefault()
        {
            return ExceptField("autoAttacksByDefault");
        }

        public NpcStatTypeQueryBuilder WithAttackDamageMin(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackDamageMin", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackDamageMin()
        {
            return ExceptField("attackDamageMin");
        }

        public NpcStatTypeQueryBuilder WithAttackDamageMax(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackDamageMax", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackDamageMax()
        {
            return ExceptField("attackDamageMax");
        }

        public NpcStatTypeQueryBuilder WithAttackRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackRate", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackRate()
        {
            return ExceptField("attackRate");
        }

        public NpcStatTypeQueryBuilder WithAttackAnimationPoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackAnimationPoint", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackAnimationPoint()
        {
            return ExceptField("attackAnimationPoint");
        }

        public NpcStatTypeQueryBuilder WithProjectileSpeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("projectileSpeed", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptProjectileSpeed()
        {
            return ExceptField("projectileSpeed");
        }

        public NpcStatTypeQueryBuilder WithTeamName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamName", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptTeamName()
        {
            return ExceptField("teamName");
        }

        public NpcStatTypeQueryBuilder WithCombatClassAttack(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("combatClassAttack", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptCombatClassAttack()
        {
            return ExceptField("combatClassAttack");
        }

        public NpcStatTypeQueryBuilder WithCombatClassDefend(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("combatClassDefend", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptCombatClassDefend()
        {
            return ExceptField("combatClassDefend");
        }

        public NpcStatTypeQueryBuilder WithUnitRelationshipClass(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unitRelationshipClass", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptUnitRelationshipClass()
        {
            return ExceptField("unitRelationshipClass");
        }

        public NpcStatTypeQueryBuilder WithAttackDesire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("attackDesire", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptAttackDesire()
        {
            return ExceptField("attackDesire");
        }

        public NpcStatTypeQueryBuilder WithHasInventory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasInventory", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptHasInventory()
        {
            return ExceptField("hasInventory");
        }

        public NpcStatTypeQueryBuilder WithWakesNeutrals(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wakesNeutrals", alias, new GraphQlDirective[] { include, skip });
        }

        public NpcStatTypeQueryBuilder ExceptWakesNeutrals()
        {
            return ExceptField("wakesNeutrals");
        }
    }

    public partial class PatchNoteLanguageTypeQueryBuilder : GraphQlQueryBuilder<PatchNoteLanguageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "languageId" },
                new GraphQlFieldMetadata { Name = "index" },
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "generalId" },
                new GraphQlFieldMetadata { Name = "text" }
            };

        protected override string TypeName { get { return "PatchNoteLanguageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PatchNoteLanguageTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PatchNoteLanguageTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public PatchNoteLanguageTypeQueryBuilder WithLanguageId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("languageId", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptLanguageId()
        {
            return ExceptField("languageId");
        }

        public PatchNoteLanguageTypeQueryBuilder WithIndex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("index", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptIndex()
        {
            return ExceptField("index");
        }

        public PatchNoteLanguageTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public PatchNoteLanguageTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public PatchNoteLanguageTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public PatchNoteLanguageTypeQueryBuilder WithGeneralId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("generalId", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptGeneralId()
        {
            return ExceptField("generalId");
        }

        public PatchNoteLanguageTypeQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public PatchNoteLanguageTypeQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }
    }

    public partial class ModifierTypeQueryBuilder : GraphQlQueryBuilder<ModifierTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "buffDuration" },
                new GraphQlFieldMetadata { Name = "isRoot" },
                new GraphQlFieldMetadata { Name = "isStun" },
                new GraphQlFieldMetadata { Name = "isSilence" },
                new GraphQlFieldMetadata { Name = "isInvisible" },
                new GraphQlFieldMetadata { Name = "isShackle" },
                new GraphQlFieldMetadata { Name = "isHex" },
                new GraphQlFieldMetadata { Name = "isSleep" },
                new GraphQlFieldMetadata { Name = "isCyclone" },
                new GraphQlFieldMetadata { Name = "isTaunt" },
                new GraphQlFieldMetadata { Name = "isDisarm" },
                new GraphQlFieldMetadata { Name = "isBlind" },
                new GraphQlFieldMetadata { Name = "isEthereal" },
                new GraphQlFieldMetadata { Name = "isMovementSlow" },
                new GraphQlFieldMetadata { Name = "isAttackSlow" },
                new GraphQlFieldMetadata { Name = "isBreak" },
                new GraphQlFieldMetadata { Name = "isArmorReduce" },
                new GraphQlFieldMetadata { Name = "isAttackReduce" },
                new GraphQlFieldMetadata { Name = "isMute" },
                new GraphQlFieldMetadata { Name = "isDamageAmplified" },
                new GraphQlFieldMetadata { Name = "isMovementDebuff" },
                new GraphQlFieldMetadata { Name = "isKnockback" },
                new GraphQlFieldMetadata { Name = "isWeaken" },
                new GraphQlFieldMetadata { Name = "isItem" },
                new GraphQlFieldMetadata { Name = "isBanished" }
            };

        protected override string TypeName { get { return "ModifierType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ModifierTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ModifierTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ModifierTypeQueryBuilder WithBuffDuration(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buffDuration", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptBuffDuration()
        {
            return ExceptField("buffDuration");
        }

        public ModifierTypeQueryBuilder WithIsRoot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRoot", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsRoot()
        {
            return ExceptField("isRoot");
        }

        public ModifierTypeQueryBuilder WithIsStun(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isStun", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsStun()
        {
            return ExceptField("isStun");
        }

        public ModifierTypeQueryBuilder WithIsSilence(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSilence", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsSilence()
        {
            return ExceptField("isSilence");
        }

        public ModifierTypeQueryBuilder WithIsInvisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isInvisible", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsInvisible()
        {
            return ExceptField("isInvisible");
        }

        public ModifierTypeQueryBuilder WithIsShackle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isShackle", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsShackle()
        {
            return ExceptField("isShackle");
        }

        public ModifierTypeQueryBuilder WithIsHex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isHex", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsHex()
        {
            return ExceptField("isHex");
        }

        public ModifierTypeQueryBuilder WithIsSleep(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSleep", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsSleep()
        {
            return ExceptField("isSleep");
        }

        public ModifierTypeQueryBuilder WithIsCyclone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isCyclone", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsCyclone()
        {
            return ExceptField("isCyclone");
        }

        public ModifierTypeQueryBuilder WithIsTaunt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTaunt", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsTaunt()
        {
            return ExceptField("isTaunt");
        }

        public ModifierTypeQueryBuilder WithIsDisarm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDisarm", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsDisarm()
        {
            return ExceptField("isDisarm");
        }

        public ModifierTypeQueryBuilder WithIsBlind(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBlind", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsBlind()
        {
            return ExceptField("isBlind");
        }

        public ModifierTypeQueryBuilder WithIsEthereal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isEthereal", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsEthereal()
        {
            return ExceptField("isEthereal");
        }

        public ModifierTypeQueryBuilder WithIsMovementSlow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMovementSlow", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsMovementSlow()
        {
            return ExceptField("isMovementSlow");
        }

        public ModifierTypeQueryBuilder WithIsAttackSlow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAttackSlow", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsAttackSlow()
        {
            return ExceptField("isAttackSlow");
        }

        public ModifierTypeQueryBuilder WithIsBreak(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBreak", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsBreak()
        {
            return ExceptField("isBreak");
        }

        public ModifierTypeQueryBuilder WithIsArmorReduce(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isArmorReduce", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsArmorReduce()
        {
            return ExceptField("isArmorReduce");
        }

        public ModifierTypeQueryBuilder WithIsAttackReduce(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAttackReduce", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsAttackReduce()
        {
            return ExceptField("isAttackReduce");
        }

        public ModifierTypeQueryBuilder WithIsMute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMute", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsMute()
        {
            return ExceptField("isMute");
        }

        public ModifierTypeQueryBuilder WithIsDamageAmplified(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDamageAmplified", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsDamageAmplified()
        {
            return ExceptField("isDamageAmplified");
        }

        public ModifierTypeQueryBuilder WithIsMovementDebuff(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isMovementDebuff", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsMovementDebuff()
        {
            return ExceptField("isMovementDebuff");
        }

        public ModifierTypeQueryBuilder WithIsKnockback(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isKnockback", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsKnockback()
        {
            return ExceptField("isKnockback");
        }

        public ModifierTypeQueryBuilder WithIsWeaken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isWeaken", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsWeaken()
        {
            return ExceptField("isWeaken");
        }

        public ModifierTypeQueryBuilder WithIsItem(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isItem", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsItem()
        {
            return ExceptField("isItem");
        }

        public ModifierTypeQueryBuilder WithIsBanished(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBanished", alias, new GraphQlDirective[] { include, skip });
        }

        public ModifierTypeQueryBuilder ExceptIsBanished()
        {
            return ExceptField("isBanished");
        }
    }

    public partial class LeaderboardQueryQueryBuilder : GraphQlQueryBuilder<LeaderboardQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "season", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dotaPlus", IsComplex = true, QueryBuilderType = typeof(PlayerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dotaPlusWeek", IsComplex = true, QueryBuilderType = typeof(DotaPlusWeekTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dotaPlusTopLevels", IsComplex = true, QueryBuilderType = typeof(HeroDotaPlusLeaderboardRankTopTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "battlePass", IsComplex = true, QueryBuilderType = typeof(PlayerBattlePassResponseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "battlePassGroupBy", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PlayerBattlePassGroupByTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "coaching", IsComplex = true, QueryBuilderType = typeof(PlayerCoachingLeaderboardResponseTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "guild", IsComplex = true, QueryBuilderType = typeof(GuildTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hero", IsComplex = true, QueryBuilderType = typeof(PlayerLeaderBoardByHeroTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LeaderboardQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LeaderboardQueryQueryBuilder WithSeason(SteamAccountSeasonActiveLeaderboardTypeQueryBuilder steamAccountSeasonActiveLeaderboardTypeQueryBuilder, QueryBuilderParameter<FilterSeasonLeaderboardRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("season", alias, steamAccountSeasonActiveLeaderboardTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptSeason()
        {
            return ExceptField("season");
        }

        public LeaderboardQueryQueryBuilder WithDotaPlus(PlayerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder playerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder, QueryBuilderParameter<short?> heroId = null, QueryBuilderParameter<FilterLeaderboardOrder> orderBy = null, QueryBuilderParameter<byte?> level = null, QueryBuilderParameter<int?> skip = null, QueryBuilderParameter<int?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (heroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (level != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "level", ArgumentValue = level} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("dotaPlus", alias, playerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptDotaPlus()
        {
            return ExceptField("dotaPlus");
        }

        public LeaderboardQueryQueryBuilder WithDotaPlusWeek(DotaPlusWeekTypeQueryBuilder dotaPlusWeekTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dotaPlusWeek", alias, dotaPlusWeekTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaderboardQueryQueryBuilder ExceptDotaPlusWeek()
        {
            return ExceptField("dotaPlusWeek");
        }

        public LeaderboardQueryQueryBuilder WithDotaPlusTopLevels(HeroDotaPlusLeaderboardRankTopTypeQueryBuilder heroDotaPlusLeaderboardRankTopTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dotaPlusTopLevels", alias, heroDotaPlusLeaderboardRankTopTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LeaderboardQueryQueryBuilder ExceptDotaPlusTopLevels()
        {
            return ExceptField("dotaPlusTopLevels");
        }

        public LeaderboardQueryQueryBuilder WithBattlePass(PlayerBattlePassResponseTypeQueryBuilder playerBattlePassResponseTypeQueryBuilder, QueryBuilderParameter<byte?> eventId = null, QueryBuilderParameter<string> countryCode = null, QueryBuilderParameter<IEnumerable<int?>> levels = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (eventId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );

            if (countryCode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "countryCode", ArgumentValue = countryCode} );

            if (levels != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "levels", ArgumentValue = levels} );

            return WithObjectField("battlePass", alias, playerBattlePassResponseTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptBattlePass()
        {
            return ExceptField("battlePass");
        }

        public LeaderboardQueryQueryBuilder WithBattlePassGroupBy(PlayerBattlePassGroupByTypeQueryBuilder playerBattlePassGroupByTypeQueryBuilder, QueryBuilderParameter<PlayerBattlePassGroupByEnum?> groupBy, QueryBuilderParameter<int> playerCountAt, QueryBuilderParameter<byte?> eventId = null, QueryBuilderParameter<string> countryCode = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "groupBy", ArgumentValue = groupBy} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "playerCountAt", ArgumentValue = playerCountAt} );
            if (eventId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );

            if (countryCode != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "countryCode", ArgumentValue = countryCode} );

            return WithObjectField("battlePassGroupBy", alias, playerBattlePassGroupByTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptBattlePassGroupBy()
        {
            return ExceptField("battlePassGroupBy");
        }

        public LeaderboardQueryQueryBuilder WithCoaching(PlayerCoachingLeaderboardResponseTypeQueryBuilder playerCoachingLeaderboardResponseTypeQueryBuilder, QueryBuilderParameter<IEnumerable<int?>> levels = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (levels != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "levels", ArgumentValue = levels} );

            return WithObjectField("coaching", alias, playerCoachingLeaderboardResponseTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptCoaching()
        {
            return ExceptField("coaching");
        }

        public LeaderboardQueryQueryBuilder WithGuild(GuildTypeQueryBuilder guildTypeQueryBuilder, QueryBuilderParameter<FilterLeaderboardGuildRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("guild", alias, guildTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptGuild()
        {
            return ExceptField("guild");
        }

        public LeaderboardQueryQueryBuilder WithHero(PlayerLeaderBoardByHeroTypeQueryBuilder playerLeaderBoardByHeroTypeQueryBuilder, QueryBuilderParameter<FilterLeaderboardHeroRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("hero", alias, playerLeaderBoardByHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LeaderboardQueryQueryBuilder ExceptHero()
        {
            return ExceptField("hero");
        }
    }

    public partial class SteamAccountSeasonActiveLeaderboardTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonActiveLeaderboardTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "playerCount" },
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "countryData", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "positionData", IsComplex = true, QueryBuilderType = typeof(SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamData", IsComplex = true, QueryBuilderType = typeof(TeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "teamIdData", IsComplex = true }
            };

        protected override string TypeName { get { return "SteamAccountSeasonActiveLeaderboardType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithPlayers(SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder steamAccountSeasonActiveLeaderboardRankTypeQueryBuilder, QueryBuilderParameter<long?> skip = null, QueryBuilderParameter<long?> take = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            return WithObjectField("players", alias, steamAccountSeasonActiveLeaderboardRankTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithCountryData(SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder steamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("countryData", alias, steamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptCountryData()
        {
            return ExceptField("countryData");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithPositionData(SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder steamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("positionData", alias, steamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptPositionData()
        {
            return ExceptField("positionData");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithTeamData(TeamTypeQueryBuilder teamTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("teamData", alias, teamTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptTeamData()
        {
            return ExceptField("teamData");
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder WithTeamIdData(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamIdData", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardTypeQueryBuilder ExceptTeamIdData()
        {
            return ExceptField("teamIdData");
        }
    }

    public partial class SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "avgImp" },
                new GraphQlFieldMetadata { Name = "divisionId" },
                new GraphQlFieldMetadata { Name = "lastUpdateDateTime" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "positionValue" },
                new GraphQlFieldMetadata { Name = "rank" },
                new GraphQlFieldMetadata { Name = "rankShift" },
                new GraphQlFieldMetadata { Name = "topHeroOne" },
                new GraphQlFieldMetadata { Name = "topHeroTwo" },
                new GraphQlFieldMetadata { Name = "topHeroThree" },
                new GraphQlFieldMetadata { Name = "winRate" }
            };

        protected override string TypeName { get { return "SteamAccountSeasonActiveLeaderboardRankType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithAvgImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avgImp", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptAvgImp()
        {
            return ExceptField("avgImp");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithDivisionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("divisionId", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptDivisionId()
        {
            return ExceptField("divisionId");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithLastUpdateDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastUpdateDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptLastUpdateDateTime()
        {
            return ExceptField("lastUpdateDateTime");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithPositionValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("positionValue", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptPositionValue()
        {
            return ExceptField("positionValue");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithRankShift(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rankShift", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptRankShift()
        {
            return ExceptField("rankShift");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithTopHeroOne(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topHeroOne", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptTopHeroOne()
        {
            return ExceptField("topHeroOne");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithTopHeroTwo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topHeroTwo", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptTopHeroTwo()
        {
            return ExceptField("topHeroTwo");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithTopHeroThree(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("topHeroThree", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptTopHeroThree()
        {
            return ExceptField("topHeroThree");
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder WithWinRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winRate", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardRankTypeQueryBuilder ExceptWinRate()
        {
            return ExceptField("winRate");
        }
    }

    public partial class SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "countryCode" },
                new GraphQlFieldMetadata { Name = "playerCount" }
            };

        protected override string TypeName { get { return "SteamAccountSeasonActiveLeaderboardCountryDataType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder WithCountryCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("countryCode", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder ExceptCountryCode()
        {
            return ExceptField("countryCode");
        }

        public SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardCountryDataTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }
    }

    public partial class SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder : GraphQlQueryBuilder<SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "playerCount" }
            };

        protected override string TypeName { get { return "SteamAccountSeasonActiveLeaderboardPositionDataType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SteamAccountSeasonActiveLeaderboardPositionDataTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }
    }

    public partial class PlayerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder : GraphQlQueryBuilder<PlayerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(HeroDotaPlusLeaderboardRankTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "PlayerHeroDotaPlusLeaderboardRankResponseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder WithPlayers(HeroDotaPlusLeaderboardRankTypeQueryBuilder heroDotaPlusLeaderboardRankTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, heroDotaPlusLeaderboardRankTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerHeroDotaPlusLeaderboardRankResponseTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }
    }

    public partial class DotaPlusWeekTypeQueryBuilder : GraphQlQueryBuilder<DotaPlusWeekTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "week" },
                new GraphQlFieldMetadata { Name = "active" },
                new GraphQlFieldMetadata { Name = "expired" }
            };

        protected override string TypeName { get { return "DotaPlusWeekType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaPlusWeekTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaPlusWeekTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public DotaPlusWeekTypeQueryBuilder WithActive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("active", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaPlusWeekTypeQueryBuilder ExceptActive()
        {
            return ExceptField("active");
        }

        public DotaPlusWeekTypeQueryBuilder WithExpired(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expired", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaPlusWeekTypeQueryBuilder ExceptExpired()
        {
            return ExceptField("expired");
        }
    }

    public partial class HeroDotaPlusLeaderboardRankTopTypeQueryBuilder : GraphQlQueryBuilder<HeroDotaPlusLeaderboardRankTopTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "createdDateTime" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroDotaPlusLeaderboardRankTopType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder WithCreatedDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder ExceptCreatedDateTime()
        {
            return ExceptField("createdDateTime");
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroDotaPlusLeaderboardRankTopTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }

    public partial class PlayerBattlePassResponseTypeQueryBuilder : GraphQlQueryBuilder<PlayerBattlePassResponseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlayerBattlePassTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "levels", IsComplex = true }
            };

        protected override string TypeName { get { return "PlayerBattlePassResponseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBattlePassResponseTypeQueryBuilder WithPlayers(PlayerBattlePassTypeQueryBuilder playerBattlePassTypeQueryBuilder, QueryBuilderParameter<int?> minimumLevel = null, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (minimumLevel != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "minimumLevel", ArgumentValue = minimumLevel} );

            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("players", alias, playerBattlePassTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithLevels(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("levels", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptLevels()
        {
            return ExceptField("levels");
        }
    }

    public partial class PlayerBattlePassTypeQueryBuilder : GraphQlQueryBuilder<PlayerBattlePassTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "PlayerBattlePassType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBattlePassTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerBattlePassTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerBattlePassTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public partial class PlayerBattlePassGroupByTypeQueryBuilder : GraphQlQueryBuilder<PlayerBattlePassGroupByTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "playerCount" },
                new GraphQlFieldMetadata { Name = "sumLevels" },
                new GraphQlFieldMetadata { Name = "playerCountAt" }
            };

        protected override string TypeName { get { return "PlayerBattlePassGroupByType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBattlePassGroupByTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PlayerBattlePassGroupByTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public PlayerBattlePassGroupByTypeQueryBuilder WithSumLevels(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sumLevels", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptSumLevels()
        {
            return ExceptField("sumLevels");
        }

        public PlayerBattlePassGroupByTypeQueryBuilder WithPlayerCountAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCountAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassGroupByTypeQueryBuilder ExceptPlayerCountAt()
        {
            return ExceptField("playerCountAt");
        }
    }

    public partial class PlayerCoachingLeaderboardResponseTypeQueryBuilder : GraphQlQueryBuilder<PlayerCoachingLeaderboardResponseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlayerCoachingLeaderboardTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "levels", IsComplex = true }
            };

        protected override string TypeName { get { return "PlayerCoachingLeaderboardResponseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerCoachingLeaderboardResponseTypeQueryBuilder WithPlayers(PlayerCoachingLeaderboardTypeQueryBuilder playerCoachingLeaderboardTypeQueryBuilder, QueryBuilderParameter<int?> take = null, QueryBuilderParameter<int?> skip = null, string alias = null, IncludeDirective include = null, SkipDirective skipDirective = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (take != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "take", ArgumentValue = take} );

            if (skip != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

            return WithObjectField("players", alias, playerCoachingLeaderboardTypeQueryBuilder, new GraphQlDirective[] { include, skipDirective }, args);
        }

        public PlayerCoachingLeaderboardResponseTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public PlayerCoachingLeaderboardResponseTypeQueryBuilder WithLevels(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("levels", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardResponseTypeQueryBuilder ExceptLevels()
        {
            return ExceptField("levels");
        }
    }

    public partial class PlayerCoachingLeaderboardTypeQueryBuilder : GraphQlQueryBuilder<PlayerCoachingLeaderboardTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rating" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" },
                new GraphQlFieldMetadata { Name = "firstMatchDateTime" },
                new GraphQlFieldMetadata { Name = "lastMatchDateTime" }
            };

        protected override string TypeName { get { return "PlayerCoachingLeaderboardType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerCoachingLeaderboardTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithRating(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rating", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptRating()
        {
            return ExceptField("rating");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithFirstMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptFirstMatchDateTime()
        {
            return ExceptField("firstMatchDateTime");
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder WithLastMatchDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastMatchDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerCoachingLeaderboardTypeQueryBuilder ExceptLastMatchDateTime()
        {
            return ExceptField("lastMatchDateTime");
        }
    }

    public partial class LiveQueryQueryBuilder : GraphQlQueryBuilder<LiveQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "match", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LiveQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveQueryQueryBuilder WithMatch(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<long?> id, QueryBuilderParameter<int?> skipPlaybackDuration = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (skipPlaybackDuration != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "skipPlaybackDuration", ArgumentValue = skipPlaybackDuration} );

            return WithObjectField("match", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LiveQueryQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveQueryQueryBuilder WithMatches(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<MatchLiveRequestType> request = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("matches", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LiveQueryQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }
    }

    public partial class VendorQueryQueryBuilder : GraphQlQueryBuilder<VendorQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "dotaNext", IsComplex = true, QueryBuilderType = typeof(DotaNextQueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "twitchTracker", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TwitchTrackerPlayerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "VendorQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public VendorQueryQueryBuilder WithDotaNext(DotaNextQueryQueryBuilder dotaNextQueryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("dotaNext", alias, dotaNextQueryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public VendorQueryQueryBuilder ExceptDotaNext()
        {
            return ExceptField("dotaNext");
        }

        public VendorQueryQueryBuilder WithTwitchTracker(TwitchTrackerPlayerTypeQueryBuilder twitchTrackerPlayerTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithObjectField("twitchTracker", alias, twitchTrackerPlayerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public VendorQueryQueryBuilder ExceptTwitchTracker()
        {
            return ExceptField("twitchTracker");
        }
    }

    public partial class DotaNextQueryQueryBuilder : GraphQlQueryBuilder<DotaNextQueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "enemy", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DotaNextWithAllyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ally", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DotaNextWithAllyTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerHero", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchPlayerItemPurchaseEventTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DotaNextQuery"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaNextQueryQueryBuilder WithEnemy(DotaNextWithAllyTypeQueryBuilder dotaNextWithAllyTypeQueryBuilder, QueryBuilderParameter<IEnumerable<long?>> steamAccountIds, QueryBuilderParameter<long?> matchSteamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchSteamAccountId", ArgumentValue = matchSteamAccountId} );
            return WithObjectField("enemy", alias, dotaNextWithAllyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaNextQueryQueryBuilder ExceptEnemy()
        {
            return ExceptField("enemy");
        }

        public DotaNextQueryQueryBuilder WithAlly(DotaNextWithAllyTypeQueryBuilder dotaNextWithAllyTypeQueryBuilder, QueryBuilderParameter<IEnumerable<long?>> steamAccountIds, QueryBuilderParameter<long?> matchSteamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchSteamAccountId", ArgumentValue = matchSteamAccountId} );
            return WithObjectField("ally", alias, dotaNextWithAllyTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaNextQueryQueryBuilder ExceptAlly()
        {
            return ExceptField("ally");
        }

        public DotaNextQueryQueryBuilder WithPlayerHero(MatchPlayerItemPurchaseEventTypeQueryBuilder matchPlayerItemPurchaseEventTypeQueryBuilder, QueryBuilderParameter<long?> steamAccountIds, QueryBuilderParameter<byte?> gameModeIds, QueryBuilderParameter<byte?> lobbyTypeIds, QueryBuilderParameter<int> limitByItemIds, QueryBuilderParameter<long?> startDateTime, QueryBuilderParameter<short?> heroId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountIds", ArgumentValue = steamAccountIds} );
            if (heroId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "heroId", ArgumentValue = heroId} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameModeIds", ArgumentValue = gameModeIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "lobbyTypeIds", ArgumentValue = lobbyTypeIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "limitByItemIds", ArgumentValue = limitByItemIds} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "startDateTime", ArgumentValue = startDateTime} );
            return WithObjectField("playerHero", alias, matchPlayerItemPurchaseEventTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaNextQueryQueryBuilder ExceptPlayerHero()
        {
            return ExceptField("playerHero");
        }
    }

    public partial class DotaNextWithAllyTypeQueryBuilder : GraphQlQueryBuilder<DotaNextWithAllyTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "lifetimeMatchCount" },
                new GraphQlFieldMetadata { Name = "lifetimeWinMatchCount" }
            };

        protected override string TypeName { get { return "DotaNextWithAllyType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaNextWithAllyTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaNextWithAllyTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public DotaNextWithAllyTypeQueryBuilder WithLifetimeMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lifetimeMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaNextWithAllyTypeQueryBuilder ExceptLifetimeMatchCount()
        {
            return ExceptField("lifetimeMatchCount");
        }

        public DotaNextWithAllyTypeQueryBuilder WithLifetimeWinMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lifetimeWinMatchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaNextWithAllyTypeQueryBuilder ExceptLifetimeWinMatchCount()
        {
            return ExceptField("lifetimeWinMatchCount");
        }
    }

    public partial class TwitchTrackerPlayerTypeQueryBuilder : GraphQlQueryBuilder<TwitchTrackerPlayerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccountId" },
                new GraphQlFieldMetadata { Name = "activity" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "avatar" },
                new GraphQlFieldMetadata { Name = "rank" },
                new GraphQlFieldMetadata { Name = "leaderboardRank" },
                new GraphQlFieldMetadata { Name = "proPlayerName" },
                new GraphQlFieldMetadata { Name = "matchCountLast100" },
                new GraphQlFieldMetadata { Name = "winCountLast100" },
                new GraphQlFieldMetadata { Name = "uniqueHeroLast100" },
                new GraphQlFieldMetadata { Name = "coreCountLast100" },
                new GraphQlFieldMetadata { Name = "topHeroLast100", IsComplex = true, QueryBuilderType = typeof(TwitchTrackerPlayerHeroTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matches", IsComplex = true, QueryBuilderType = typeof(TwitchTrackerPlayerMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TwitchTrackerPlayerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TwitchTrackerPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithActivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("activity", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptActivity()
        {
            return ExceptField("activity");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptAvatar()
        {
            return ExceptField("avatar");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithLeaderboardRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("leaderboardRank", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptLeaderboardRank()
        {
            return ExceptField("leaderboardRank");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithProPlayerName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("proPlayerName", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptProPlayerName()
        {
            return ExceptField("proPlayerName");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithMatchCountLast100(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCountLast100", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptMatchCountLast100()
        {
            return ExceptField("matchCountLast100");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithWinCountLast100(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCountLast100", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptWinCountLast100()
        {
            return ExceptField("winCountLast100");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithUniqueHeroLast100(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uniqueHeroLast100", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptUniqueHeroLast100()
        {
            return ExceptField("uniqueHeroLast100");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithCoreCountLast100(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coreCountLast100", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptCoreCountLast100()
        {
            return ExceptField("coreCountLast100");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithTopHeroLast100(TwitchTrackerPlayerHeroTypeQueryBuilder twitchTrackerPlayerHeroTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("topHeroLast100", alias, twitchTrackerPlayerHeroTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptTopHeroLast100()
        {
            return ExceptField("topHeroLast100");
        }

        public TwitchTrackerPlayerTypeQueryBuilder WithMatches(TwitchTrackerPlayerMatchTypeQueryBuilder twitchTrackerPlayerMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matches", alias, twitchTrackerPlayerMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerTypeQueryBuilder ExceptMatches()
        {
            return ExceptField("matches");
        }
    }

    public partial class TwitchTrackerPlayerHeroTypeQueryBuilder : GraphQlQueryBuilder<TwitchTrackerPlayerHeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "matchCount" },
                new GraphQlFieldMetadata { Name = "winCount" }
            };

        protected override string TypeName { get { return "TwitchTrackerPlayerHeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TwitchTrackerPlayerHeroTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerHeroTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public TwitchTrackerPlayerHeroTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerHeroTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public TwitchTrackerPlayerHeroTypeQueryBuilder WithWinCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerHeroTypeQueryBuilder ExceptWinCount()
        {
            return ExceptField("winCount");
        }
    }

    public partial class TwitchTrackerPlayerMatchTypeQueryBuilder : GraphQlQueryBuilder<TwitchTrackerPlayerMatchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchId" },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "lane" },
                new GraphQlFieldMetadata { Name = "role" },
                new GraphQlFieldMetadata { Name = "position" },
                new GraphQlFieldMetadata { Name = "killCount" },
                new GraphQlFieldMetadata { Name = "deathCount" },
                new GraphQlFieldMetadata { Name = "assistCount" },
                new GraphQlFieldMetadata { Name = "endDateTime" },
                new GraphQlFieldMetadata { Name = "isVictory" },
                new GraphQlFieldMetadata { Name = "award" }
            };

        protected override string TypeName { get { return "TwitchTrackerPlayerMatchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lane", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptLane()
        {
            return ExceptField("lane");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithKillCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptKillCount()
        {
            return ExceptField("killCount");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithDeathCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deathCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptDeathCount()
        {
            return ExceptField("deathCount");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithAssistCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptAssistCount()
        {
            return ExceptField("assistCount");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithEndDateTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endDateTime", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptEndDateTime()
        {
            return ExceptField("endDateTime");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder WithAward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("award", alias, new GraphQlDirective[] { include, skip });
        }

        public TwitchTrackerPlayerMatchTypeQueryBuilder ExceptAward()
        {
            return ExceptField("award");
        }
    }

    public partial class DotaMutationQueryBuilder : GraphQlQueryBuilder<DotaMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "yogurt", IsComplex = true, QueryBuilderType = typeof(YogurtMutationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(DotaUserMutationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "admin", IsComplex = true, QueryBuilderType = typeof(AdminMutationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rosh", IsComplex = true, QueryBuilderType = typeof(RoshMutationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "retryMatchDownload", RequiresParameters = true }
            };

        protected override string TypeName { get { return "DotaMutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaMutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public DotaMutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public DotaMutationQueryBuilder WithYogurt(YogurtMutationQueryBuilder yogurtMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("yogurt", alias, yogurtMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptYogurt()
        {
            return ExceptField("yogurt");
        }

        public DotaMutationQueryBuilder WithUser(DotaUserMutationQueryBuilder dotaUserMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, dotaUserMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public DotaMutationQueryBuilder WithAdmin(AdminMutationQueryBuilder adminMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("admin", alias, adminMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptAdmin()
        {
            return ExceptField("admin");
        }

        public DotaMutationQueryBuilder WithRosh(RoshMutationQueryBuilder roshMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rosh", alias, roshMutationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaMutationQueryBuilder ExceptRosh()
        {
            return ExceptField("rosh");
        }

        public DotaMutationQueryBuilder WithRetryMatchDownload(QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithScalarField("retryMatchDownload", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaMutationQueryBuilder ExceptRetryMatchDownload()
        {
            return ExceptField("retryMatchDownload");
        }
    }

    public partial class YogurtMutationQueryBuilder : GraphQlQueryBuilder<YogurtMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "createTeam", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadTeamTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateTeam", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "addTeamMember", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "updateTeamMember", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "setTeamMemberDefaultTeam", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "removeTeamMember", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "update", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "validate", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "invalidate", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "delete", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "linkSeriesId", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "removeSeriesId", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "importMatch", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "importPickBans", RequiresParameters = true }
            };

        protected override string TypeName { get { return "YogurtMutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public YogurtMutationQueryBuilder WithCreateTeam(MatchReplayUploadTeamTypeQueryBuilder matchReplayUploadTeamTypeQueryBuilder, QueryBuilderParameter<string> matchReplayUploadTeamName, QueryBuilderParameter<string> emailAddress, QueryBuilderParameter<int> teamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamName", ArgumentValue = matchReplayUploadTeamName} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "emailAddress", ArgumentValue = emailAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamId", ArgumentValue = teamId} );
            return WithObjectField("createTeam", alias, matchReplayUploadTeamTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptCreateTeam()
        {
            return ExceptField("createTeam");
        }

        public YogurtMutationQueryBuilder WithUpdateTeam(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<string> matchReplayUploadTeamName = null, QueryBuilderParameter<int?> teamId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            if (matchReplayUploadTeamName != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamName", ArgumentValue = matchReplayUploadTeamName} );

            if (teamId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "teamId", ArgumentValue = teamId} );

            return WithScalarField("updateTeam", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptUpdateTeam()
        {
            return ExceptField("updateTeam");
        }

        public YogurtMutationQueryBuilder WithAddTeamMember(QueryBuilderParameter<long?> steamAccountId, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithScalarField("addTeamMember", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptAddTeamMember()
        {
            return ExceptField("addTeamMember");
        }

        public YogurtMutationQueryBuilder WithUpdateTeamMember(QueryBuilderParameter<Guid> captainJackIdentityId, QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<bool> isAdmin, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "captainJackIdentityId", ArgumentValue = captainJackIdentityId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isAdmin", ArgumentValue = isAdmin} );
            return WithScalarField("updateTeamMember", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptUpdateTeamMember()
        {
            return ExceptField("updateTeamMember");
        }

        public YogurtMutationQueryBuilder WithSetTeamMemberDefaultTeam(QueryBuilderParameter<Guid> captainJackIdentityId, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "captainJackIdentityId", ArgumentValue = captainJackIdentityId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithScalarField("setTeamMemberDefaultTeam", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptSetTeamMemberDefaultTeam()
        {
            return ExceptField("setTeamMemberDefaultTeam");
        }

        public YogurtMutationQueryBuilder WithRemoveTeamMember(QueryBuilderParameter<Guid> captainJackIdentityId, QueryBuilderParameter<long?> matchReplayUploadTeamId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "captainJackIdentityId", ArgumentValue = captainJackIdentityId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            return WithScalarField("removeTeamMember", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptRemoveTeamMember()
        {
            return ExceptField("removeTeamMember");
        }

        public YogurtMutationQueryBuilder WithUpdate(QueryBuilderParameter<UpdateMatchReplayUploadObjectType> updateMatchReplayUploadObject, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "updateMatchReplayUploadObject", ArgumentValue = updateMatchReplayUploadObject} );
            return WithScalarField("update", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptUpdate()
        {
            return ExceptField("update");
        }

        public YogurtMutationQueryBuilder WithValidate(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithScalarField("validate", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptValidate()
        {
            return ExceptField("validate");
        }

        public YogurtMutationQueryBuilder WithInvalidate(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithScalarField("invalidate", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptInvalidate()
        {
            return ExceptField("invalidate");
        }

        public YogurtMutationQueryBuilder WithDelete(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithScalarField("delete", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptDelete()
        {
            return ExceptField("delete");
        }

        public YogurtMutationQueryBuilder WithLinkSeriesId(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<IEnumerable<long?>> matchIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchIds", ArgumentValue = matchIds} );
            return WithScalarField("linkSeriesId", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptLinkSeriesId()
        {
            return ExceptField("linkSeriesId");
        }

        public YogurtMutationQueryBuilder WithRemoveSeriesId(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<IEnumerable<long?>> matchIds, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchIds", ArgumentValue = matchIds} );
            return WithScalarField("removeSeriesId", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptRemoveSeriesId()
        {
            return ExceptField("removeSeriesId");
        }

        public YogurtMutationQueryBuilder WithImportMatch(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithScalarField("importMatch", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptImportMatch()
        {
            return ExceptField("importMatch");
        }

        public YogurtMutationQueryBuilder WithImportPickBans(QueryBuilderParameter<long?> matchReplayUploadTeamId, QueryBuilderParameter<long?> matchId, QueryBuilderParameter<IEnumerable<ImportPickBanType>> pickBans, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchReplayUploadTeamId", ArgumentValue = matchReplayUploadTeamId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pickBans", ArgumentValue = pickBans} );
            return WithScalarField("importPickBans", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public YogurtMutationQueryBuilder ExceptImportPickBans()
        {
            return ExceptField("importPickBans");
        }
    }

    public partial class DotaUserMutationQueryBuilder : GraphQlQueryBuilder<DotaUserMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "readAllFeed" },
                new GraphQlFieldMetadata { Name = "validateEmail", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "unsubscribeEmail", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "updateProfile", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "followPlayer", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "unfollowPlayer", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "updateFollowing", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "updateAllFollowing", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "updateFollowingFavorite", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "followLeague", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "unfollowLeague", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "applyStratzApiKey", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "checkPublicDotaAccount" }
            };

        protected override string TypeName { get { return "DotaUserMutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaUserMutationQueryBuilder WithReadAllFeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("readAllFeed", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaUserMutationQueryBuilder ExceptReadAllFeed()
        {
            return ExceptField("readAllFeed");
        }

        public DotaUserMutationQueryBuilder WithValidateEmail(QueryBuilderParameter<Guid?> code, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "code", ArgumentValue = code} );
            return WithScalarField("validateEmail", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptValidateEmail()
        {
            return ExceptField("validateEmail");
        }

        public DotaUserMutationQueryBuilder WithUnsubscribeEmail(QueryBuilderParameter<Guid?> code, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "code", ArgumentValue = code} );
            return WithScalarField("unsubscribeEmail", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUnsubscribeEmail()
        {
            return ExceptField("unsubscribeEmail");
        }

        public DotaUserMutationQueryBuilder WithUpdateProfile(QueryBuilderParameter<CaptainJackIdentityProfileUpdateRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("updateProfile", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateProfile()
        {
            return ExceptField("updateProfile");
        }

        public DotaUserMutationQueryBuilder WithFollowPlayer(QueryBuilderParameter<long?> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithScalarField("followPlayer", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptFollowPlayer()
        {
            return ExceptField("followPlayer");
        }

        public DotaUserMutationQueryBuilder WithUnfollowPlayer(QueryBuilderParameter<long?> steamAccountId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "steamAccountId", ArgumentValue = steamAccountId} );
            return WithScalarField("unfollowPlayer", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUnfollowPlayer()
        {
            return ExceptField("unfollowPlayer");
        }

        public DotaUserMutationQueryBuilder WithUpdateFollowing(QueryBuilderParameter<long?> followedSteamAccountId, QueryBuilderParameter<UpdateFollowerRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "followedSteamAccountId", ArgumentValue = followedSteamAccountId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("updateFollowing", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateFollowing()
        {
            return ExceptField("updateFollowing");
        }

        public DotaUserMutationQueryBuilder WithUpdateAllFollowing(QueryBuilderParameter<UpdateFollowerRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("updateAllFollowing", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateAllFollowing()
        {
            return ExceptField("updateAllFollowing");
        }

        public DotaUserMutationQueryBuilder WithUpdateFollowingFavorite(QueryBuilderParameter<long?> followedSteamAccountId, QueryBuilderParameter<bool> isFavorite, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "followedSteamAccountId", ArgumentValue = followedSteamAccountId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isFavorite", ArgumentValue = isFavorite} );
            return WithScalarField("updateFollowingFavorite", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUpdateFollowingFavorite()
        {
            return ExceptField("updateFollowingFavorite");
        }

        public DotaUserMutationQueryBuilder WithFollowLeague(QueryBuilderParameter<int> leagueId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueId", ArgumentValue = leagueId} );
            return WithScalarField("followLeague", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptFollowLeague()
        {
            return ExceptField("followLeague");
        }

        public DotaUserMutationQueryBuilder WithUnfollowLeague(QueryBuilderParameter<int> leagueId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueId", ArgumentValue = leagueId} );
            return WithScalarField("unfollowLeague", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptUnfollowLeague()
        {
            return ExceptField("unfollowLeague");
        }

        public DotaUserMutationQueryBuilder WithApplyStratzApiKey(QueryBuilderParameter<StratzApiType?> tokenType, QueryBuilderParameter<string> emailAddress, QueryBuilderParameter<string> discordAddress, QueryBuilderParameter<string> websiteAddress, QueryBuilderParameter<string> description, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tokenType", ArgumentValue = tokenType} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "emailAddress", ArgumentValue = emailAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "discordAddress", ArgumentValue = discordAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "websiteAddress", ArgumentValue = websiteAddress} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "description", ArgumentValue = description} );
            return WithScalarField("applyStratzApiKey", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaUserMutationQueryBuilder ExceptApplyStratzApiKey()
        {
            return ExceptField("applyStratzApiKey");
        }

        public DotaUserMutationQueryBuilder WithCheckPublicDotaAccount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("checkPublicDotaAccount", alias, new GraphQlDirective[] { include, skip });
        }

        public DotaUserMutationQueryBuilder ExceptCheckPublicDotaAccount()
        {
            return ExceptField("checkPublicDotaAccount");
        }
    }

    public partial class AdminMutationQueryBuilder : GraphQlQueryBuilder<AdminMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "mergeProSteamAccount", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "deleteProSteamAccount", RequiresParameters = true }
            };

        protected override string TypeName { get { return "AdminMutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AdminMutationQueryBuilder WithMergeProSteamAccount(QueryBuilderParameter<IEnumerable<MergeProSteamAccountRequestType>> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("mergeProSteamAccount", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public AdminMutationQueryBuilder ExceptMergeProSteamAccount()
        {
            return ExceptField("mergeProSteamAccount");
        }

        public AdminMutationQueryBuilder WithDeleteProSteamAccount(QueryBuilderParameter<DeleteProSteamAccountRequestType> request, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );
            return WithScalarField("deleteProSteamAccount", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public AdminMutationQueryBuilder ExceptDeleteProSteamAccount()
        {
            return ExceptField("deleteProSteamAccount");
        }
    }

    public partial class RoshMutationQueryBuilder : GraphQlQueryBuilder<RoshMutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "create", RequiresParameters = true },
                new GraphQlFieldMetadata { Name = "update", RequiresParameters = true }
            };

        protected override string TypeName { get { return "ROSHMutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoshMutationQueryBuilder WithCreate(QueryBuilderParameter<RoshDifficultyEnum?> difficulty, QueryBuilderParameter<RankBracket?> bracket, QueryBuilderParameter<bool> isUserRadiant, QueryBuilderParameter<bool> isRadiantFirstPick, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "difficulty", ArgumentValue = difficulty} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bracket", ArgumentValue = bracket} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isUserRadiant", ArgumentValue = isUserRadiant} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isRadiantFirstPick", ArgumentValue = isRadiantFirstPick} );
            return WithScalarField("create", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public RoshMutationQueryBuilder ExceptCreate()
        {
            return ExceptField("create");
        }

        public RoshMutationQueryBuilder WithUpdate(QueryBuilderParameter<long?> matchId, QueryBuilderParameter<decimal> score, QueryBuilderParameter<bool> didUserWin, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "score", ArgumentValue = score} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "didUserWin", ArgumentValue = didUserWin} );
            return WithScalarField("update", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public RoshMutationQueryBuilder ExceptUpdate()
        {
            return ExceptField("update");
        }
    }

    public partial class DotaSubscriptionQueryBuilder : GraphQlQueryBuilder<DotaSubscriptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchCount", IsComplex = true, QueryBuilderType = typeof(TotalMatchCountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "playerCount", IsComplex = true, QueryBuilderType = typeof(TotalPlayerCountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feedLive", IsComplex = true, QueryBuilderType = typeof(LiveEventTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchLive", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "matchLiveLeague", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DotaSubscription"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DotaSubscriptionQueryBuilder(string operationName = null) : base("subscription", operationName)
        {
        }

        public DotaSubscriptionQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public DotaSubscriptionQueryBuilder WithMatchCount(TotalMatchCountTypeQueryBuilder totalMatchCountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("matchCount", alias, totalMatchCountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaSubscriptionQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }

        public DotaSubscriptionQueryBuilder WithPlayerCount(TotalPlayerCountTypeQueryBuilder totalPlayerCountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("playerCount", alias, totalPlayerCountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaSubscriptionQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public DotaSubscriptionQueryBuilder WithFeedLive(LiveEventTypeQueryBuilder liveEventTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feedLive", alias, liveEventTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DotaSubscriptionQueryBuilder ExceptFeedLive()
        {
            return ExceptField("feedLive");
        }

        public DotaSubscriptionQueryBuilder WithMatchLive(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<long?> matchId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "matchId", ArgumentValue = matchId} );
            return WithObjectField("matchLive", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaSubscriptionQueryBuilder ExceptMatchLive()
        {
            return ExceptField("matchLive");
        }

        public DotaSubscriptionQueryBuilder WithMatchLiveLeague(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, QueryBuilderParameter<int> leagueId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "leagueId", ArgumentValue = leagueId} );
            return WithObjectField("matchLiveLeague", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DotaSubscriptionQueryBuilder ExceptMatchLiveLeague()
        {
            return ExceptField("matchLiveLeague");
        }
    }

    public partial class TotalMatchCountTypeQueryBuilder : GraphQlQueryBuilder<TotalMatchCountTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "matchCount" }
            };

        protected override string TypeName { get { return "TotalMatchCountType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TotalMatchCountTypeQueryBuilder WithMatchCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TotalMatchCountTypeQueryBuilder ExceptMatchCount()
        {
            return ExceptField("matchCount");
        }
    }

    public partial class TotalPlayerCountTypeQueryBuilder : GraphQlQueryBuilder<TotalPlayerCountTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "playerCount" }
            };

        protected override string TypeName { get { return "TotalPlayerCountType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TotalPlayerCountTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TotalPlayerCountTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }
    }

    public partial class LiveEventTypeQueryBuilder : GraphQlQueryBuilder<LiveEventTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public LiveEventTypeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "LiveEventType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventTypeQueryBuilder WithLiveEventPlayerRampageTypeFragment(LiveEventPlayerRampageTypeQueryBuilder liveEventPlayerRampageTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerRampageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerWinStreakTypeFragment(LiveEventPlayerWinStreakTypeQueryBuilder liveEventPlayerWinStreakTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerWinStreakTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroWinStreakTypeFragment(LiveEventPlayerHeroWinStreakTypeQueryBuilder liveEventPlayerHeroWinStreakTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroWinStreakTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroKillsTypeFragment(LiveEventPlayerHeroKillsTypeQueryBuilder liveEventPlayerHeroKillsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroKillsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroAssistsTypeFragment(LiveEventPlayerHeroAssistsTypeQueryBuilder liveEventPlayerHeroAssistsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroAssistsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroBuildingDamageTypeFragment(LiveEventPlayerHeroBuildingDamageTypeQueryBuilder liveEventPlayerHeroBuildingDamageTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroBuildingDamageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroHealingTypeFragment(LiveEventPlayerHeroHealingTypeQueryBuilder liveEventPlayerHeroHealingTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroHealingTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroHeroDamageTypeFragment(LiveEventPlayerHeroHeroDamageTypeQueryBuilder liveEventPlayerHeroHeroDamageTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroHeroDamageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroGoldPerMinuteTypeFragment(LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder liveEventPlayerHeroGoldPerMinuteTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroGoldPerMinuteTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroExpPerMinuteTypeFragment(LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder liveEventPlayerHeroExpPerMinuteTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroExpPerMinuteTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroHighImpTypeFragment(LiveEventPlayerHeroHighImpTypeQueryBuilder liveEventPlayerHeroHighImpTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroHighImpTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroDotaPlusLevelTypeFragment(LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder liveEventPlayerHeroDotaPlusLevelTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroDotaPlusLevelTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerRankUpTypeFragment(LiveEventPlayerRankUpTypeQueryBuilder liveEventPlayerRankUpTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerRankUpTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventProPlayerLiveTypeFragment(LiveEventProPlayerLiveTypeQueryBuilder liveEventProPlayerLiveTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventProPlayerLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroItemPurchaseTypeFragment(LiveEventPlayerHeroItemPurchaseTypeQueryBuilder liveEventPlayerHeroItemPurchaseTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroItemPurchaseTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerHeroDewardTypeFragment(LiveEventPlayerHeroDewardTypeQueryBuilder liveEventPlayerHeroDewardTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerHeroDewardTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventMatchDireTideStompTypeFragment(LiveEventMatchDireTideStompTypeQueryBuilder liveEventMatchDireTideStompTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventMatchDireTideStompTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventTypeQueryBuilder WithLiveEventPlayerDireTideCandyScoredTypeFragment(LiveEventPlayerDireTideCandyScoredTypeQueryBuilder liveEventPlayerDireTideCandyScoredTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(liveEventPlayerDireTideCandyScoredTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public partial class LiveEventPlayerRampageTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerRampageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "rampageCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerRampageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerRampageTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRampageTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerRampageTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRampageTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerRampageTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRampageTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerRampageTypeQueryBuilder WithRampageCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rampageCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRampageTypeQueryBuilder ExceptRampageCount()
        {
            return ExceptField("rampageCount");
        }
    }

    public partial class LiveEventPlayerWinStreakTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerWinStreakTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "winStreakCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerWinStreakType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerWinStreakTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerWinStreakTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerWinStreakTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerWinStreakTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerWinStreakTypeQueryBuilder WithWinStreakCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winStreakCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerWinStreakTypeQueryBuilder ExceptWinStreakCount()
        {
            return ExceptField("winStreakCount");
        }
    }

    public partial class LiveEventPlayerHeroWinStreakTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroWinStreakTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "winStreakCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroWinStreakType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder WithWinStreakCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winStreakCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroWinStreakTypeQueryBuilder ExceptWinStreakCount()
        {
            return ExceptField("winStreakCount");
        }
    }

    public partial class LiveEventPlayerHeroKillsTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroKillsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "killCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroKillsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroKillsTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder WithKillCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("killCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroKillsTypeQueryBuilder ExceptKillCount()
        {
            return ExceptField("killCount");
        }
    }

    public partial class LiveEventPlayerHeroAssistsTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroAssistsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "assistCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroAssistsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroAssistsTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder WithAssistCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assistCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroAssistsTypeQueryBuilder ExceptAssistCount()
        {
            return ExceptField("assistCount");
        }
    }

    public partial class LiveEventPlayerHeroBuildingDamageTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroBuildingDamageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "buildingDamage" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroBuildingDamageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder WithBuildingDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buildingDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroBuildingDamageTypeQueryBuilder ExceptBuildingDamage()
        {
            return ExceptField("buildingDamage");
        }
    }

    public partial class LiveEventPlayerHeroHealingTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroHealingTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "healingAmount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroHealingType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroHealingTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder WithHealingAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("healingAmount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHealingTypeQueryBuilder ExceptHealingAmount()
        {
            return ExceptField("healingAmount");
        }
    }

    public partial class LiveEventPlayerHeroHeroDamageTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroHeroDamageTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "heroDamage" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroHeroDamageType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHeroDamageTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }
    }

    public partial class LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "goldPerMinute" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroGoldPerMinuteType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroGoldPerMinuteTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }
    }

    public partial class LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "expPerMinute" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroExpPerMinuteType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder WithExpPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("expPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroExpPerMinuteTypeQueryBuilder ExceptExpPerMinute()
        {
            return ExceptField("expPerMinute");
        }
    }

    public partial class LiveEventPlayerHeroHighImpTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroHighImpTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "imp" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroHighImpType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroHighImpTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder WithImp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imp", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroHighImpTypeQueryBuilder ExceptImp()
        {
            return ExceptField("imp");
        }
    }

    public partial class LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "level" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroDotaPlusLevelType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDotaPlusLevelTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }
    }

    public partial class LiveEventPlayerRankUpTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerRankUpTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "rank" }
            };

        protected override string TypeName { get { return "LiveEventPlayerRankUpType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerRankUpTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRankUpTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerRankUpTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRankUpTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerRankUpTypeQueryBuilder WithRank(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("rank", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerRankUpTypeQueryBuilder ExceptRank()
        {
            return ExceptField("rank");
        }
    }

    public partial class LiveEventProPlayerLiveTypeQueryBuilder : GraphQlQueryBuilder<LiveEventProPlayerLiveTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccounts", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchLiveTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LiveEventProPlayerLiveType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventProPlayerLiveTypeQueryBuilder WithSteamAccounts(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccounts", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventProPlayerLiveTypeQueryBuilder ExceptSteamAccounts()
        {
            return ExceptField("steamAccounts");
        }

        public LiveEventProPlayerLiveTypeQueryBuilder WithMatch(MatchLiveTypeQueryBuilder matchLiveTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchLiveTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventProPlayerLiveTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }
    }

    public partial class LiveEventPlayerHeroItemPurchaseTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroItemPurchaseTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "itemId" },
                new GraphQlFieldMetadata { Name = "itemCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroItemPurchaseType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder WithItemId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder ExceptItemId()
        {
            return ExceptField("itemId");
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder WithItemCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("itemCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroItemPurchaseTypeQueryBuilder ExceptItemCount()
        {
            return ExceptField("itemCount");
        }
    }

    public partial class LiveEventPlayerHeroDewardTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerHeroDewardTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(MatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "dewardCount" }
            };

        protected override string TypeName { get { return "LiveEventPlayerHeroDewardType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerHeroDewardTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder WithMatch(MatchTypeQueryBuilder matchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, matchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder WithDewardCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dewardCount", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerHeroDewardTypeQueryBuilder ExceptDewardCount()
        {
            return ExceptField("dewardCount");
        }
    }

    public partial class LiveEventMatchDireTideStompTypeQueryBuilder : GraphQlQueryBuilder<LiveEventMatchDireTideStompTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LiveEventMatchDireTideStompType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventMatchDireTideStompTypeQueryBuilder WithMatch(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventMatchDireTideStompTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }
    }

    public partial class LiveEventPlayerDireTideCandyScoredTypeQueryBuilder : GraphQlQueryBuilder<LiveEventPlayerDireTideCandyScoredTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "match", IsComplex = true, QueryBuilderType = typeof(DireTideCustomGameMatchTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "heroId" },
                new GraphQlFieldMetadata { Name = "candyScored" }
            };

        protected override string TypeName { get { return "LiveEventPlayerDireTideCandyScoredType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder WithMatch(DireTideCustomGameMatchTypeQueryBuilder direTideCustomGameMatchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("match", alias, direTideCustomGameMatchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder ExceptMatch()
        {
            return ExceptField("match");
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder WithCandyScored(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("candyScored", alias, new GraphQlDirective[] { include, skip });
        }

        public LiveEventPlayerDireTideCandyScoredTypeQueryBuilder ExceptCandyScored()
        {
            return ExceptField("candyScored");
        }
    }
    #endregion

    #region input classes
    public partial class TeamMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _playerList;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerList?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerList?> PlayerList
        {
            get { return (QueryBuilderParameter<FindMatchPlayerList?>)_playerList.Value; }
            set { _playerList = new InputPropertyInfo { Name = "playerList", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_playerList.Name != null) yield return _playerList;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class FilterSeriesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class PlayerHeroPerformanceMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchGroupOrderBy;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _isTeam;
        private InputPropertyInfo _minDuration;
        private InputPropertyInfo _maxDuration;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _partyCounts;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withEnemySteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _withEnemyHeroIds;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterMatchGroupOrderByEnum?>))]
        #endif
        public QueryBuilderParameter<FilterMatchGroupOrderByEnum?> MatchGroupOrderBy
        {
            get { return (QueryBuilderParameter<FilterMatchGroupOrderByEnum?>)_matchGroupOrderBy.Value; }
            set { _matchGroupOrderBy = new InputPropertyInfo { Name = "matchGroupOrderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerOrderBy?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FindMatchPlayerOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTeam
        {
            get { return (QueryBuilderParameter<bool?>)_isTeam.Value; }
            set { _isTeam = new InputPropertyInfo { Name = "isTeam", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinDuration
        {
            get { return (QueryBuilderParameter<int?>)_minDuration.Value; }
            set { _minDuration = new InputPropertyInfo { Name = "minDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxDuration
        {
            get { return (QueryBuilderParameter<int?>)_maxDuration.Value; }
            set { _maxDuration = new InputPropertyInfo { Name = "maxDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> PartyCounts
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_partyCounts.Value; }
            set { _partyCounts = new InputPropertyInfo { Name = "partyCounts", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithEnemySteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withEnemySteamAccountIds.Value; }
            set { _withEnemySteamAccountIds = new InputPropertyInfo { Name = "withEnemySteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithEnemyHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withEnemyHeroIds.Value; }
            set { _withEnemyHeroIds = new InputPropertyInfo { Name = "withEnemyHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchGroupOrderBy.Name != null) yield return _matchGroupOrderBy;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_isTeam.Name != null) yield return _isTeam;
            if (_minDuration.Name != null) yield return _minDuration;
            if (_maxDuration.Name != null) yield return _maxDuration;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_partyCounts.Name != null) yield return _partyCounts;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withEnemySteamAccountIds.Name != null) yield return _withEnemySteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_withEnemyHeroIds.Name != null) yield return _withEnemyHeroIds;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class PlayerMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _teamIdSteamAccount;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _bracketIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withEnemySteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _withEnemyHeroIds;
        private InputPropertyInfo _isVictory;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _minImp;
        private InputPropertyInfo _maxImp;
        private InputPropertyInfo _playerList;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;
        private InputPropertyInfo _after;
        private InputPropertyInfo _before;
        private InputPropertyInfo _orderBy;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamIdSteamAccount
        {
            get { return (QueryBuilderParameter<int?>)_teamIdSteamAccount.Value; }
            set { _teamIdSteamAccount = new InputPropertyInfo { Name = "teamIdSteamAccount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> BracketIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_bracketIds.Value; }
            set { _bracketIds = new InputPropertyInfo { Name = "bracketIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithEnemySteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withEnemySteamAccountIds.Value; }
            set { _withEnemySteamAccountIds = new InputPropertyInfo { Name = "withEnemySteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithEnemyHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withEnemyHeroIds.Value; }
            set { _withEnemyHeroIds = new InputPropertyInfo { Name = "withEnemyHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsVictory
        {
            get { return (QueryBuilderParameter<bool?>)_isVictory.Value; }
            set { _isVictory = new InputPropertyInfo { Name = "isVictory", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinImp
        {
            get { return (QueryBuilderParameter<int?>)_minImp.Value; }
            set { _minImp = new InputPropertyInfo { Name = "minImp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxImp
        {
            get { return (QueryBuilderParameter<int?>)_maxImp.Value; }
            set { _maxImp = new InputPropertyInfo { Name = "maxImp", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerList?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerList?> PlayerList
        {
            get { return (QueryBuilderParameter<FindMatchPlayerList?>)_playerList.Value; }
            set { _playerList = new InputPropertyInfo { Name = "playerList", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> After
        {
            get { return (QueryBuilderParameter<long?>)_after.Value; }
            set { _after = new InputPropertyInfo { Name = "after", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Before
        {
            get { return (QueryBuilderParameter<long?>)_before.Value; }
            set { _before = new InputPropertyInfo { Name = "before", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerOrderBy?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FindMatchPlayerOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_teamIdSteamAccount.Name != null) yield return _teamIdSteamAccount;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_bracketIds.Name != null) yield return _bracketIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withEnemySteamAccountIds.Name != null) yield return _withEnemySteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_withEnemyHeroIds.Name != null) yield return _withEnemyHeroIds;
            if (_isVictory.Name != null) yield return _isVictory;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_minImp.Name != null) yield return _minImp;
            if (_maxImp.Name != null) yield return _maxImp;
            if (_playerList.Name != null) yield return _playerList;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
            if (_after.Name != null) yield return _after;
            if (_before.Name != null) yield return _before;
            if (_orderBy.Name != null) yield return _orderBy;
        }
    }

    public partial class PlayerMatchesGroupByRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _playerList;
        private InputPropertyInfo _groupBy;
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _bracketIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _isVictory;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withEnemySteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _withEnemyHeroIds;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerList?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerList?> PlayerList
        {
            get { return (QueryBuilderParameter<FindMatchPlayerList?>)_playerList.Value; }
            set { _playerList = new InputPropertyInfo { Name = "playerList", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerGroupBy?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerGroupBy?> GroupBy
        {
            get { return (QueryBuilderParameter<FindMatchPlayerGroupBy?>)_groupBy.Value; }
            set { _groupBy = new InputPropertyInfo { Name = "groupBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> BracketIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_bracketIds.Value; }
            set { _bracketIds = new InputPropertyInfo { Name = "bracketIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsVictory
        {
            get { return (QueryBuilderParameter<bool?>)_isVictory.Value; }
            set { _isVictory = new InputPropertyInfo { Name = "isVictory", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithEnemySteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withEnemySteamAccountIds.Value; }
            set { _withEnemySteamAccountIds = new InputPropertyInfo { Name = "withEnemySteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithEnemyHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withEnemyHeroIds.Value; }
            set { _withEnemyHeroIds = new InputPropertyInfo { Name = "withEnemyHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_playerList.Name != null) yield return _playerList;
            if (_groupBy.Name != null) yield return _groupBy;
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_bracketIds.Name != null) yield return _bracketIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_isVictory.Name != null) yield return _isVictory;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withEnemySteamAccountIds.Name != null) yield return _withEnemySteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_withEnemyHeroIds.Name != null) yield return _withEnemyHeroIds;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class HeroPickBanRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _bracketIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _after;
        private InputPropertyInfo _before;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> BracketIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_bracketIds.Value; }
            set { _bracketIds = new InputPropertyInfo { Name = "bracketIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> After
        {
            get { return (QueryBuilderParameter<long?>)_after.Value; }
            set { _after = new InputPropertyInfo { Name = "after", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Before
        {
            get { return (QueryBuilderParameter<long?>)_before.Value; }
            set { _before = new InputPropertyInfo { Name = "before", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_bracketIds.Name != null) yield return _bracketIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_after.Name != null) yield return _after;
            if (_before.Name != null) yield return _before;
        }
    }

    public partial class LeagueMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _leagueStageTypeIds;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LeagueStage>>))]
        #endif
        public QueryBuilderParameter<ICollection<LeagueStage>> LeagueStageTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<LeagueStage>>)_leagueStageTypeIds.Value; }
            set { _leagueStageTypeIds = new InputPropertyInfo { Name = "leagueStageTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_matchIds.Name != null) yield return _matchIds;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_leagueStageTypeIds.Name != null) yield return _leagueStageTypeIds;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class LeagueRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _tiers;
        private InputPropertyInfo _requireImage;
        private InputPropertyInfo _requirePrizePool;
        private InputPropertyInfo _requireStartAndEndDates;
        private InputPropertyInfo _hasLiveMatches;
        private InputPropertyInfo _leagueEnded;
        private InputPropertyInfo _isFutureLeague;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _betweenStartDateTime;
        private InputPropertyInfo _betweenEndDateTime;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LeagueTier>>))]
        #endif
        public QueryBuilderParameter<ICollection<LeagueTier>> Tiers
        {
            get { return (QueryBuilderParameter<ICollection<LeagueTier>>)_tiers.Value; }
            set { _tiers = new InputPropertyInfo { Name = "tiers", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> RequireImage
        {
            get { return (QueryBuilderParameter<bool?>)_requireImage.Value; }
            set { _requireImage = new InputPropertyInfo { Name = "requireImage", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> RequirePrizePool
        {
            get { return (QueryBuilderParameter<bool?>)_requirePrizePool.Value; }
            set { _requirePrizePool = new InputPropertyInfo { Name = "requirePrizePool", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> RequireStartAndEndDates
        {
            get { return (QueryBuilderParameter<bool?>)_requireStartAndEndDates.Value; }
            set { _requireStartAndEndDates = new InputPropertyInfo { Name = "requireStartAndEndDates", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasLiveMatches
        {
            get { return (QueryBuilderParameter<bool?>)_hasLiveMatches.Value; }
            set { _hasLiveMatches = new InputPropertyInfo { Name = "hasLiveMatches", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> LeagueEnded
        {
            get { return (QueryBuilderParameter<bool?>)_leagueEnded.Value; }
            set { _leagueEnded = new InputPropertyInfo { Name = "leagueEnded", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsFutureLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isFutureLeague.Value; }
            set { _isFutureLeague = new InputPropertyInfo { Name = "isFutureLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> BetweenStartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_betweenStartDateTime.Value; }
            set { _betweenStartDateTime = new InputPropertyInfo { Name = "betweenStartDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> BetweenEndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_betweenEndDateTime.Value; }
            set { _betweenEndDateTime = new InputPropertyInfo { Name = "betweenEndDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrderBy?>))]
        #endif
        public QueryBuilderParameter<FilterOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FilterOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_leagueId.Name != null) yield return _leagueId;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_tiers.Name != null) yield return _tiers;
            if (_requireImage.Name != null) yield return _requireImage;
            if (_requirePrizePool.Name != null) yield return _requirePrizePool;
            if (_requireStartAndEndDates.Name != null) yield return _requireStartAndEndDates;
            if (_hasLiveMatches.Name != null) yield return _hasLiveMatches;
            if (_leagueEnded.Name != null) yield return _leagueEnded;
            if (_isFutureLeague.Name != null) yield return _isFutureLeague;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_betweenStartDateTime.Name != null) yield return _betweenStartDateTime;
            if (_betweenEndDateTime.Name != null) yield return _betweenEndDateTime;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class FilterMatchReplayUploadRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _withEnemySteamAccount;
        private InputPropertyInfo _withFriendHeroId;
        private InputPropertyInfo _withEnemyHeroId;
        private InputPropertyInfo _withFriendBannedHeroId;
        private InputPropertyInfo _withEnemyBannedHeroId;
        private InputPropertyInfo _byMatchId;
        private InputPropertyInfo _byMatchIds;
        private InputPropertyInfo _byMatchUploadFileName;
        private InputPropertyInfo _byMatchUploadUploaderCaptainJackId;
        private InputPropertyInfo _bySteamAccountId;
        private InputPropertyInfo _bySteamAccountIds;
        private InputPropertyInfo _byHeroId;
        private InputPropertyInfo _byLeagueId;
        private InputPropertyInfo _bySeriesId;
        private InputPropertyInfo _bySeriesIds;
        private InputPropertyInfo _byTeamId;
        private InputPropertyInfo _byGameMode;
        private InputPropertyInfo _byLobbyType;
        private InputPropertyInfo _byGameVersion;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _isValidated;
        private InputPropertyInfo _isComplete;
        private InputPropertyInfo _isActive;
        private InputPropertyInfo _isVictory;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _filterPositionIsUs;
        private InputPropertyInfo _filterPosition;
        private InputPropertyInfo _filterPositionOrder;
        private InputPropertyInfo _isRadiantFirstPick;
        private InputPropertyInfo _firstPick;
        private InputPropertyInfo _minDuration;
        private InputPropertyInfo _maxDuration;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithEnemySteamAccount
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withEnemySteamAccount.Value; }
            set { _withEnemySteamAccount = new InputPropertyInfo { Name = "withEnemySteamAccount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> WithFriendHeroId
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_withFriendHeroId.Value; }
            set { _withFriendHeroId = new InputPropertyInfo { Name = "withFriendHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> WithEnemyHeroId
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_withEnemyHeroId.Value; }
            set { _withEnemyHeroId = new InputPropertyInfo { Name = "withEnemyHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> WithFriendBannedHeroId
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_withFriendBannedHeroId.Value; }
            set { _withFriendBannedHeroId = new InputPropertyInfo { Name = "withFriendBannedHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> WithEnemyBannedHeroId
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_withEnemyBannedHeroId.Value; }
            set { _withEnemyBannedHeroId = new InputPropertyInfo { Name = "withEnemyBannedHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ByMatchId
        {
            get { return (QueryBuilderParameter<string>)_byMatchId.Value; }
            set { _byMatchId = new InputPropertyInfo { Name = "byMatchId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> ByMatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_byMatchIds.Value; }
            set { _byMatchIds = new InputPropertyInfo { Name = "byMatchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ByMatchUploadFileName
        {
            get { return (QueryBuilderParameter<string>)_byMatchUploadFileName.Value; }
            set { _byMatchUploadFileName = new InputPropertyInfo { Name = "byMatchUploadFileName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Guid?>))]
        #endif
        public QueryBuilderParameter<Guid?> ByMatchUploadUploaderCaptainJackId
        {
            get { return (QueryBuilderParameter<Guid?>)_byMatchUploadUploaderCaptainJackId.Value; }
            set { _byMatchUploadUploaderCaptainJackId = new InputPropertyInfo { Name = "byMatchUploadUploaderCaptainJackId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> BySteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_bySteamAccountId.Value; }
            set { _bySteamAccountId = new InputPropertyInfo { Name = "bySteamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> BySteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_bySteamAccountIds.Value; }
            set { _bySteamAccountIds = new InputPropertyInfo { Name = "bySteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> ByHeroId
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_byHeroId.Value; }
            set { _byHeroId = new InputPropertyInfo { Name = "byHeroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ByLeagueId
        {
            get { return (QueryBuilderParameter<int?>)_byLeagueId.Value; }
            set { _byLeagueId = new InputPropertyInfo { Name = "byLeagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BySeriesId
        {
            get { return (QueryBuilderParameter<string>)_bySeriesId.Value; }
            set { _bySeriesId = new InputPropertyInfo { Name = "bySeriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> BySeriesIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_bySeriesIds.Value; }
            set { _bySeriesIds = new InputPropertyInfo { Name = "bySeriesIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ByTeamId
        {
            get { return (QueryBuilderParameter<int?>)_byTeamId.Value; }
            set { _byTeamId = new InputPropertyInfo { Name = "byTeamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> ByGameMode
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_byGameMode.Value; }
            set { _byGameMode = new InputPropertyInfo { Name = "byGameMode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> ByLobbyType
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_byLobbyType.Value; }
            set { _byLobbyType = new InputPropertyInfo { Name = "byLobbyType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> ByGameVersion
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_byGameVersion.Value; }
            set { _byGameVersion = new InputPropertyInfo { Name = "byGameVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsValidated
        {
            get { return (QueryBuilderParameter<bool?>)_isValidated.Value; }
            set { _isValidated = new InputPropertyInfo { Name = "isValidated", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsComplete
        {
            get { return (QueryBuilderParameter<bool?>)_isComplete.Value; }
            set { _isComplete = new InputPropertyInfo { Name = "isComplete", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsActive
        {
            get { return (QueryBuilderParameter<bool?>)_isActive.Value; }
            set { _isActive = new InputPropertyInfo { Name = "isActive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsVictory
        {
            get { return (QueryBuilderParameter<bool?>)_isVictory.Value; }
            set { _isVictory = new InputPropertyInfo { Name = "isVictory", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> FilterPositionIsUs
        {
            get { return (QueryBuilderParameter<bool?>)_filterPositionIsUs.Value; }
            set { _filterPositionIsUs = new InputPropertyInfo { Name = "filterPositionIsUs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> FilterPosition
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_filterPosition.Value; }
            set { _filterPosition = new InputPropertyInfo { Name = "filterPosition", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerTeamPickOrderType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerTeamPickOrderType>> FilterPositionOrder
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerTeamPickOrderType>>)_filterPositionOrder.Value; }
            set { _filterPositionOrder = new InputPropertyInfo { Name = "filterPositionOrder", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiantFirstPick
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiantFirstPick.Value; }
            set { _isRadiantFirstPick = new InputPropertyInfo { Name = "isRadiantFirstPick", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> FirstPick
        {
            get { return (QueryBuilderParameter<bool?>)_firstPick.Value; }
            set { _firstPick = new InputPropertyInfo { Name = "firstPick", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MinDuration
        {
            get { return (QueryBuilderParameter<string>)_minDuration.Value; }
            set { _minDuration = new InputPropertyInfo { Name = "minDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MaxDuration
        {
            get { return (QueryBuilderParameter<string>)_maxDuration.Value; }
            set { _maxDuration = new InputPropertyInfo { Name = "maxDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MinGameVersionId
        {
            get { return (QueryBuilderParameter<string>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<string>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_withEnemySteamAccount.Name != null) yield return _withEnemySteamAccount;
            if (_withFriendHeroId.Name != null) yield return _withFriendHeroId;
            if (_withEnemyHeroId.Name != null) yield return _withEnemyHeroId;
            if (_withFriendBannedHeroId.Name != null) yield return _withFriendBannedHeroId;
            if (_withEnemyBannedHeroId.Name != null) yield return _withEnemyBannedHeroId;
            if (_byMatchId.Name != null) yield return _byMatchId;
            if (_byMatchIds.Name != null) yield return _byMatchIds;
            if (_byMatchUploadFileName.Name != null) yield return _byMatchUploadFileName;
            if (_byMatchUploadUploaderCaptainJackId.Name != null) yield return _byMatchUploadUploaderCaptainJackId;
            if (_bySteamAccountId.Name != null) yield return _bySteamAccountId;
            if (_bySteamAccountIds.Name != null) yield return _bySteamAccountIds;
            if (_byHeroId.Name != null) yield return _byHeroId;
            if (_byLeagueId.Name != null) yield return _byLeagueId;
            if (_bySeriesId.Name != null) yield return _bySeriesId;
            if (_bySeriesIds.Name != null) yield return _bySeriesIds;
            if (_byTeamId.Name != null) yield return _byTeamId;
            if (_byGameMode.Name != null) yield return _byGameMode;
            if (_byLobbyType.Name != null) yield return _byLobbyType;
            if (_byGameVersion.Name != null) yield return _byGameVersion;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_isValidated.Name != null) yield return _isValidated;
            if (_isComplete.Name != null) yield return _isComplete;
            if (_isActive.Name != null) yield return _isActive;
            if (_isVictory.Name != null) yield return _isVictory;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_filterPositionIsUs.Name != null) yield return _filterPositionIsUs;
            if (_filterPosition.Name != null) yield return _filterPosition;
            if (_filterPositionOrder.Name != null) yield return _filterPositionOrder;
            if (_isRadiantFirstPick.Name != null) yield return _isRadiantFirstPick;
            if (_firstPick.Name != null) yield return _firstPick;
            if (_minDuration.Name != null) yield return _minDuration;
            if (_maxDuration.Name != null) yield return _maxDuration;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class PlusDraftRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchId;
        private InputPropertyInfo _bans;
        private InputPropertyInfo _gameMode;
        private InputPropertyInfo _players;
        private InputPropertyInfo _gameVersionId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> MatchId
        {
            get { return (QueryBuilderParameter<long?>)_matchId.Value; }
            set { _matchId = new InputPropertyInfo { Name = "matchId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> Bans
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_bans.Value; }
            set { _bans = new InputPropertyInfo { Name = "bans", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> GameMode
        {
            get { return (QueryBuilderParameter<int?>)_gameMode.Value; }
            set { _gameMode = new InputPropertyInfo { Name = "gameMode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PlusDraftPlayerRequestType>>))]
        #endif
        public QueryBuilderParameter<ICollection<PlusDraftPlayerRequestType>> Players
        {
            get { return (QueryBuilderParameter<ICollection<PlusDraftPlayerRequestType>>)_players.Value; }
            set { _players = new InputPropertyInfo { Name = "players", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> GameVersionId
        {
            get { return (QueryBuilderParameter<short?>)_gameVersionId.Value; }
            set { _gameVersionId = new InputPropertyInfo { Name = "gameVersionId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchId.Name != null) yield return _matchId;
            if (_bans.Name != null) yield return _bans;
            if (_gameMode.Name != null) yield return _gameMode;
            if (_players.Name != null) yield return _players;
            if (_gameVersionId.Name != null) yield return _gameVersionId;
        }
    }

    public partial class PlusDraftPlayerRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _slot;
        private InputPropertyInfo _heroId;
        private InputPropertyInfo _rank;
        private InputPropertyInfo _position;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Slot
        {
            get { return (QueryBuilderParameter<int?>)_slot.Value; }
            set { _slot = new InputPropertyInfo { Name = "slot", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> HeroId
        {
            get { return (QueryBuilderParameter<short?>)_heroId.Value; }
            set { _heroId = new InputPropertyInfo { Name = "heroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Rank
        {
            get { return (QueryBuilderParameter<byte?>)_rank.Value; }
            set { _rank = new InputPropertyInfo { Name = "rank", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> Position
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_slot.Name != null) yield return _slot;
            if (_heroId.Name != null) yield return _heroId;
            if (_rank.Name != null) yield return _rank;
            if (_position.Name != null) yield return _position;
        }
    }

    public partial class PlusPlayerHoverRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountIds;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _take;
        private InputPropertyInfo _shouldRadiantWin;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> SteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_steamAccountIds.Value; }
            set { _steamAccountIds = new InputPropertyInfo { Name = "steamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> ShouldRadiantWin
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_shouldRadiantWin.Value; }
            set { _shouldRadiantWin = new InputPropertyInfo { Name = "shouldRadiantWin", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountIds.Name != null) yield return _steamAccountIds;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_take.Name != null) yield return _take;
            if (_shouldRadiantWin.Name != null) yield return _shouldRadiantWin;
        }
    }

    public partial class PlusDraftMissingLetterRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _bans;
        private InputPropertyInfo _gameMode;
        private InputPropertyInfo _players;
        private InputPropertyInfo _gameVersionId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> Bans
        {
            get { return (QueryBuilderParameter<short?>)_bans.Value; }
            set { _bans = new InputPropertyInfo { Name = "bans", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> GameMode
        {
            get { return (QueryBuilderParameter<int?>)_gameMode.Value; }
            set { _gameMode = new InputPropertyInfo { Name = "gameMode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PlusDraftPlayerRequestType>>))]
        #endif
        public QueryBuilderParameter<ICollection<PlusDraftPlayerRequestType>> Players
        {
            get { return (QueryBuilderParameter<ICollection<PlusDraftPlayerRequestType>>)_players.Value; }
            set { _players = new InputPropertyInfo { Name = "players", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> GameVersionId
        {
            get { return (QueryBuilderParameter<short?>)_gameVersionId.Value; }
            set { _gameVersionId = new InputPropertyInfo { Name = "gameVersionId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_bans.Name != null) yield return _bans;
            if (_gameMode.Name != null) yield return _gameMode;
            if (_players.Name != null) yield return _players;
            if (_gameVersionId.Name != null) yield return _gameVersionId;
        }
    }

    public partial class RoshMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _isUserActionFirst;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _bracketIds;
        private InputPropertyInfo _isCompleted;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsUserActionFirst
        {
            get { return (QueryBuilderParameter<bool?>)_isUserActionFirst.Value; }
            set { _isUserActionFirst = new InputPropertyInfo { Name = "isUserActionFirst", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> BracketIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_bracketIds.Value; }
            set { _bracketIds = new InputPropertyInfo { Name = "bracketIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsCompleted
        {
            get { return (QueryBuilderParameter<bool?>)_isCompleted.Value; }
            set { _isCompleted = new InputPropertyInfo { Name = "isCompleted", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_isUserActionFirst.Name != null) yield return _isUserActionFirst;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_bracketIds.Name != null) yield return _bracketIds;
            if (_isCompleted.Name != null) yield return _isCompleted;
        }
    }

    public partial class PlayerPerformanceMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _isTeam;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _tier;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _isVictory;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTeam
        {
            get { return (QueryBuilderParameter<bool?>)_isTeam.Value; }
            set { _isTeam = new InputPropertyInfo { Name = "isTeam", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Tier
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_tier.Value; }
            set { _tier = new InputPropertyInfo { Name = "tier", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsVictory
        {
            get { return (QueryBuilderParameter<bool?>)_isVictory.Value; }
            set { _isVictory = new InputPropertyInfo { Name = "isVictory", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_isTeam.Name != null) yield return _isTeam;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_tier.Name != null) yield return _tier;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_isVictory.Name != null) yield return _isVictory;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
        }
    }

    public partial class PlayerHeroesPerformanceMatchesRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _isTeam;
        private InputPropertyInfo _minDuration;
        private InputPropertyInfo _maxDuration;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _partyCounts;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withEnemySteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _withEnemyHeroIds;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTeam
        {
            get { return (QueryBuilderParameter<bool?>)_isTeam.Value; }
            set { _isTeam = new InputPropertyInfo { Name = "isTeam", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinDuration
        {
            get { return (QueryBuilderParameter<int?>)_minDuration.Value; }
            set { _minDuration = new InputPropertyInfo { Name = "minDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxDuration
        {
            get { return (QueryBuilderParameter<int?>)_maxDuration.Value; }
            set { _maxDuration = new InputPropertyInfo { Name = "maxDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> PartyCounts
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_partyCounts.Value; }
            set { _partyCounts = new InputPropertyInfo { Name = "partyCounts", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithEnemySteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withEnemySteamAccountIds.Value; }
            set { _withEnemySteamAccountIds = new InputPropertyInfo { Name = "withEnemySteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithEnemyHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withEnemyHeroIds.Value; }
            set { _withEnemyHeroIds = new InputPropertyInfo { Name = "withEnemyHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_isTeam.Name != null) yield return _isTeam;
            if (_minDuration.Name != null) yield return _minDuration;
            if (_maxDuration.Name != null) yield return _maxDuration;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_partyCounts.Name != null) yield return _partyCounts;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withEnemySteamAccountIds.Name != null) yield return _withEnemySteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_withEnemyHeroIds.Name != null) yield return _withEnemyHeroIds;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class PlayerBreakdownRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _isTeam;
        private InputPropertyInfo _minDuration;
        private InputPropertyInfo _maxDuration;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _partyCounts;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTeam
        {
            get { return (QueryBuilderParameter<bool?>)_isTeam.Value; }
            set { _isTeam = new InputPropertyInfo { Name = "isTeam", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinDuration
        {
            get { return (QueryBuilderParameter<int?>)_minDuration.Value; }
            set { _minDuration = new InputPropertyInfo { Name = "minDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxDuration
        {
            get { return (QueryBuilderParameter<int?>)_maxDuration.Value; }
            set { _maxDuration = new InputPropertyInfo { Name = "maxDuration", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> PartyCounts
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_partyCounts.Value; }
            set { _partyCounts = new InputPropertyInfo { Name = "partyCounts", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_isTeam.Name != null) yield return _isTeam;
            if (_minDuration.Name != null) yield return _minDuration;
            if (_maxDuration.Name != null) yield return _maxDuration;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_partyCounts.Name != null) yield return _partyCounts;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
        }
    }

    public partial class PlayerTeammatesGroupByRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _playerTeammateSort;
        private InputPropertyInfo _matchGroupOrderBy;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _seriesId;
        private InputPropertyInfo _teamId;
        private InputPropertyInfo _teamIdSteamAccount;
        private InputPropertyInfo _isParsed;
        private InputPropertyInfo _startDateTime;
        private InputPropertyInfo _endDateTime;
        private InputPropertyInfo _gameModeIds;
        private InputPropertyInfo _lobbyTypeIds;
        private InputPropertyInfo _gameVersionIds;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _rankIds;
        private InputPropertyInfo _bracketIds;
        private InputPropertyInfo _isStats;
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _laneIds;
        private InputPropertyInfo _roleIds;
        private InputPropertyInfo _positionIds;
        private InputPropertyInfo _awardIds;
        private InputPropertyInfo _isParty;
        private InputPropertyInfo _hasAward;
        private InputPropertyInfo _withFriendSteamAccountIds;
        private InputPropertyInfo _withFriendHeroIds;
        private InputPropertyInfo _minGameVersionId;
        private InputPropertyInfo _maxGameVersionId;
        private InputPropertyInfo _matchLimitMin;
        private InputPropertyInfo _matchLimitMax;
        private InputPropertyInfo _onlyCasters;
        private InputPropertyInfo _onlyPros;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterPlayerTeammateEnum?>))]
        #endif
        public QueryBuilderParameter<FilterPlayerTeammateEnum?> PlayerTeammateSort
        {
            get { return (QueryBuilderParameter<FilterPlayerTeammateEnum?>)_playerTeammateSort.Value; }
            set { _playerTeammateSort = new InputPropertyInfo { Name = "playerTeammateSort", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterMatchGroupOrderByEnum?>))]
        #endif
        public QueryBuilderParameter<FilterMatchGroupOrderByEnum?> MatchGroupOrderBy
        {
            get { return (QueryBuilderParameter<FilterMatchGroupOrderByEnum?>)_matchGroupOrderBy.Value; }
            set { _matchGroupOrderBy = new InputPropertyInfo { Name = "matchGroupOrderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FindMatchPlayerOrderBy?>))]
        #endif
        public QueryBuilderParameter<FindMatchPlayerOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FindMatchPlayerOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SeriesId
        {
            get { return (QueryBuilderParameter<long?>)_seriesId.Value; }
            set { _seriesId = new InputPropertyInfo { Name = "seriesId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamIdSteamAccount
        {
            get { return (QueryBuilderParameter<int?>)_teamIdSteamAccount.Value; }
            set { _teamIdSteamAccount = new InputPropertyInfo { Name = "teamIdSteamAccount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsed
        {
            get { return (QueryBuilderParameter<bool?>)_isParsed.Value; }
            set { _isParsed = new InputPropertyInfo { Name = "isParsed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartDateTime
        {
            get { return (QueryBuilderParameter<long?>)_startDateTime.Value; }
            set { _startDateTime = new InputPropertyInfo { Name = "startDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndDateTime
        {
            get { return (QueryBuilderParameter<long?>)_endDateTime.Value; }
            set { _endDateTime = new InputPropertyInfo { Name = "endDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> GameModeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_gameModeIds.Value; }
            set { _gameModeIds = new InputPropertyInfo { Name = "gameModeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LobbyTypeIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_lobbyTypeIds.Value; }
            set { _lobbyTypeIds = new InputPropertyInfo { Name = "lobbyTypeIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> GameVersionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_gameVersionIds.Value; }
            set { _gameVersionIds = new InputPropertyInfo { Name = "gameVersionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RankIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_rankIds.Value; }
            set { _rankIds = new InputPropertyInfo { Name = "rankIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> BracketIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_bracketIds.Value; }
            set { _bracketIds = new InputPropertyInfo { Name = "bracketIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStats
        {
            get { return (QueryBuilderParameter<bool?>)_isStats.Value; }
            set { _isStats = new InputPropertyInfo { Name = "isStats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LaneIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_laneIds.Value; }
            set { _laneIds = new InputPropertyInfo { Name = "laneIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RoleIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_roleIds.Value; }
            set { _roleIds = new InputPropertyInfo { Name = "roleIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchPlayerPositionType>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchPlayerPositionType>> PositionIds
        {
            get { return (QueryBuilderParameter<ICollection<MatchPlayerPositionType>>)_positionIds.Value; }
            set { _positionIds = new InputPropertyInfo { Name = "positionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AwardIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_awardIds.Value; }
            set { _awardIds = new InputPropertyInfo { Name = "awardIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParty
        {
            get { return (QueryBuilderParameter<bool?>)_isParty.Value; }
            set { _isParty = new InputPropertyInfo { Name = "isParty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasAward
        {
            get { return (QueryBuilderParameter<bool?>)_hasAward.Value; }
            set { _hasAward = new InputPropertyInfo { Name = "hasAward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> WithFriendSteamAccountIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_withFriendSteamAccountIds.Value; }
            set { _withFriendSteamAccountIds = new InputPropertyInfo { Name = "withFriendSteamAccountIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> WithFriendHeroIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_withFriendHeroIds.Value; }
            set { _withFriendHeroIds = new InputPropertyInfo { Name = "withFriendHeroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_minGameVersionId.Value; }
            set { _minGameVersionId = new InputPropertyInfo { Name = "minGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxGameVersionId
        {
            get { return (QueryBuilderParameter<int?>)_maxGameVersionId.Value; }
            set { _maxGameVersionId = new InputPropertyInfo { Name = "maxGameVersionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MatchLimitMin
        {
            get { return (QueryBuilderParameter<int?>)_matchLimitMin.Value; }
            set { _matchLimitMin = new InputPropertyInfo { Name = "matchLimitMin", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MatchLimitMax
        {
            get { return (QueryBuilderParameter<int?>)_matchLimitMax.Value; }
            set { _matchLimitMax = new InputPropertyInfo { Name = "matchLimitMax", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> OnlyCasters
        {
            get { return (QueryBuilderParameter<bool?>)_onlyCasters.Value; }
            set { _onlyCasters = new InputPropertyInfo { Name = "onlyCasters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> OnlyPros
        {
            get { return (QueryBuilderParameter<bool?>)_onlyPros.Value; }
            set { _onlyPros = new InputPropertyInfo { Name = "onlyPros", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_playerTeammateSort.Name != null) yield return _playerTeammateSort;
            if (_matchGroupOrderBy.Name != null) yield return _matchGroupOrderBy;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_matchIds.Name != null) yield return _matchIds;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_seriesId.Name != null) yield return _seriesId;
            if (_teamId.Name != null) yield return _teamId;
            if (_teamIdSteamAccount.Name != null) yield return _teamIdSteamAccount;
            if (_isParsed.Name != null) yield return _isParsed;
            if (_startDateTime.Name != null) yield return _startDateTime;
            if (_endDateTime.Name != null) yield return _endDateTime;
            if (_gameModeIds.Name != null) yield return _gameModeIds;
            if (_lobbyTypeIds.Name != null) yield return _lobbyTypeIds;
            if (_gameVersionIds.Name != null) yield return _gameVersionIds;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_rankIds.Name != null) yield return _rankIds;
            if (_bracketIds.Name != null) yield return _bracketIds;
            if (_isStats.Name != null) yield return _isStats;
            if (_heroIds.Name != null) yield return _heroIds;
            if (_laneIds.Name != null) yield return _laneIds;
            if (_roleIds.Name != null) yield return _roleIds;
            if (_positionIds.Name != null) yield return _positionIds;
            if (_awardIds.Name != null) yield return _awardIds;
            if (_isParty.Name != null) yield return _isParty;
            if (_hasAward.Name != null) yield return _hasAward;
            if (_withFriendSteamAccountIds.Name != null) yield return _withFriendSteamAccountIds;
            if (_withFriendHeroIds.Name != null) yield return _withFriendHeroIds;
            if (_minGameVersionId.Name != null) yield return _minGameVersionId;
            if (_maxGameVersionId.Name != null) yield return _maxGameVersionId;
            if (_matchLimitMin.Name != null) yield return _matchLimitMin;
            if (_matchLimitMax.Name != null) yield return _matchLimitMax;
            if (_onlyCasters.Name != null) yield return _onlyCasters;
            if (_onlyPros.Name != null) yield return _onlyPros;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class FilterAghanimLabMatchRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchIds;
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _didWin;
        private InputPropertyInfo _depth;
        private InputPropertyInfo _difficulty;
        private InputPropertyInfo _minDepth;
        private InputPropertyInfo _regionIds;
        private InputPropertyInfo _createdBeforeDateTime;
        private InputPropertyInfo _createdAfterDateTime;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _orderDirection;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;
        private InputPropertyInfo _seasonId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long>>))]
        #endif
        public QueryBuilderParameter<ICollection<long>> MatchIds
        {
            get { return (QueryBuilderParameter<ICollection<long>>)_matchIds.Value; }
            set { _matchIds = new InputPropertyInfo { Name = "matchIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DidWin
        {
            get { return (QueryBuilderParameter<bool?>)_didWin.Value; }
            set { _didWin = new InputPropertyInfo { Name = "didWin", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Depth
        {
            get { return (QueryBuilderParameter<byte?>)_depth.Value; }
            set { _depth = new InputPropertyInfo { Name = "depth", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AghanimLabMatchDifficultyEnum?>))]
        #endif
        public QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> Difficulty
        {
            get { return (QueryBuilderParameter<AghanimLabMatchDifficultyEnum?>)_difficulty.Value; }
            set { _difficulty = new InputPropertyInfo { Name = "difficulty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> MinDepth
        {
            get { return (QueryBuilderParameter<byte?>)_minDepth.Value; }
            set { _minDepth = new InputPropertyInfo { Name = "minDepth", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> RegionIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_regionIds.Value; }
            set { _regionIds = new InputPropertyInfo { Name = "regionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> CreatedBeforeDateTime
        {
            get { return (QueryBuilderParameter<long?>)_createdBeforeDateTime.Value; }
            set { _createdBeforeDateTime = new InputPropertyInfo { Name = "createdBeforeDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> CreatedAfterDateTime
        {
            get { return (QueryBuilderParameter<long?>)_createdAfterDateTime.Value; }
            set { _createdAfterDateTime = new InputPropertyInfo { Name = "createdAfterDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterAghanimLabMatchOrderBy?>))]
        #endif
        public QueryBuilderParameter<FilterAghanimLabMatchOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FilterAghanimLabMatchOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrder?>))]
        #endif
        public QueryBuilderParameter<FilterOrder?> OrderDirection
        {
            get { return (QueryBuilderParameter<FilterOrder?>)_orderDirection.Value; }
            set { _orderDirection = new InputPropertyInfo { Name = "orderDirection", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> SeasonId
        {
            get { return (QueryBuilderParameter<byte?>)_seasonId.Value; }
            set { _seasonId = new InputPropertyInfo { Name = "seasonId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchIds.Name != null) yield return _matchIds;
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_didWin.Name != null) yield return _didWin;
            if (_depth.Name != null) yield return _depth;
            if (_difficulty.Name != null) yield return _difficulty;
            if (_minDepth.Name != null) yield return _minDepth;
            if (_regionIds.Name != null) yield return _regionIds;
            if (_createdBeforeDateTime.Name != null) yield return _createdBeforeDateTime;
            if (_createdAfterDateTime.Name != null) yield return _createdAfterDateTime;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_orderDirection.Name != null) yield return _orderDirection;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
            if (_seasonId.Name != null) yield return _seasonId;
        }
    }

    public partial class FilterAghanimLabHeroCompositionRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _difficulty;
        private InputPropertyInfo _orderDirection;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AghanimLabMatchDifficultyEnum?>))]
        #endif
        public QueryBuilderParameter<AghanimLabMatchDifficultyEnum?> Difficulty
        {
            get { return (QueryBuilderParameter<AghanimLabMatchDifficultyEnum?>)_difficulty.Value; }
            set { _difficulty = new InputPropertyInfo { Name = "difficulty", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrder?>))]
        #endif
        public QueryBuilderParameter<FilterOrder?> OrderDirection
        {
            get { return (QueryBuilderParameter<FilterOrder?>)_orderDirection.Value; }
            set { _orderDirection = new InputPropertyInfo { Name = "orderDirection", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_difficulty.Name != null) yield return _difficulty;
            if (_orderDirection.Name != null) yield return _orderDirection;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class ImpGeneratorRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _bans;
        private InputPropertyInfo _players;
        private InputPropertyInfo _isTurbo;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> Bans
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_bans.Value; }
            set { _bans = new InputPropertyInfo { Name = "bans", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ImpGeneratorPlayerRequestType>>))]
        #endif
        public QueryBuilderParameter<ICollection<ImpGeneratorPlayerRequestType>> Players
        {
            get { return (QueryBuilderParameter<ICollection<ImpGeneratorPlayerRequestType>>)_players.Value; }
            set { _players = new InputPropertyInfo { Name = "players", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTurbo
        {
            get { return (QueryBuilderParameter<bool?>)_isTurbo.Value; }
            set { _isTurbo = new InputPropertyInfo { Name = "isTurbo", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_bans.Name != null) yield return _bans;
            if (_players.Name != null) yield return _players;
            if (_isTurbo.Name != null) yield return _isTurbo;
        }
    }

    public partial class ImpGeneratorPlayerRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _heroId;
        private InputPropertyInfo _bracket;
        private InputPropertyInfo _position;
        private InputPropertyInfo _events;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> HeroId
        {
            get { return (QueryBuilderParameter<short?>)_heroId.Value; }
            set { _heroId = new InputPropertyInfo { Name = "heroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<RankBracket?>))]
        #endif
        public QueryBuilderParameter<RankBracket?> Bracket
        {
            get { return (QueryBuilderParameter<RankBracket?>)_bracket.Value; }
            set { _bracket = new InputPropertyInfo { Name = "bracket", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> Position
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ImpGeneratorPlayerEventRequestType>>))]
        #endif
        public QueryBuilderParameter<ICollection<ImpGeneratorPlayerEventRequestType>> Events
        {
            get { return (QueryBuilderParameter<ICollection<ImpGeneratorPlayerEventRequestType>>)_events.Value; }
            set { _events = new InputPropertyInfo { Name = "events", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_heroId.Name != null) yield return _heroId;
            if (_bracket.Name != null) yield return _bracket;
            if (_position.Name != null) yield return _position;
            if (_events.Name != null) yield return _events;
        }
    }

    public partial class ImpGeneratorPlayerEventRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _time;
        private InputPropertyInfo _kills;
        private InputPropertyInfo _deaths;
        private InputPropertyInfo _assists;
        private InputPropertyInfo _cs;
        private InputPropertyInfo _dn;
        private InputPropertyInfo _level;
        private InputPropertyInfo _physicalDamage;
        private InputPropertyInfo _magicalDamage;
        private InputPropertyInfo _pureDamage;
        private InputPropertyInfo _damageReceived;
        private InputPropertyInfo _healingAllies;
        private InputPropertyInfo _runePower;
        private InputPropertyInfo _neutrals;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Time
        {
            get { return (QueryBuilderParameter<byte?>)_time.Value; }
            set { _time = new InputPropertyInfo { Name = "time", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ushort?>))]
        #endif
        public QueryBuilderParameter<ushort?> Kills
        {
            get { return (QueryBuilderParameter<ushort?>)_kills.Value; }
            set { _kills = new InputPropertyInfo { Name = "kills", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ushort?>))]
        #endif
        public QueryBuilderParameter<ushort?> Deaths
        {
            get { return (QueryBuilderParameter<ushort?>)_deaths.Value; }
            set { _deaths = new InputPropertyInfo { Name = "deaths", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ushort?>))]
        #endif
        public QueryBuilderParameter<ushort?> Assists
        {
            get { return (QueryBuilderParameter<ushort?>)_assists.Value; }
            set { _assists = new InputPropertyInfo { Name = "assists", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ushort?>))]
        #endif
        public QueryBuilderParameter<ushort?> Cs
        {
            get { return (QueryBuilderParameter<ushort?>)_cs.Value; }
            set { _cs = new InputPropertyInfo { Name = "cs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ushort?>))]
        #endif
        public QueryBuilderParameter<ushort?> Dn
        {
            get { return (QueryBuilderParameter<ushort?>)_dn.Value; }
            set { _dn = new InputPropertyInfo { Name = "dn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Level
        {
            get { return (QueryBuilderParameter<byte?>)_level.Value; }
            set { _level = new InputPropertyInfo { Name = "level", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> PhysicalDamage
        {
            get { return (QueryBuilderParameter<int?>)_physicalDamage.Value; }
            set { _physicalDamage = new InputPropertyInfo { Name = "physicalDamage", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MagicalDamage
        {
            get { return (QueryBuilderParameter<int?>)_magicalDamage.Value; }
            set { _magicalDamage = new InputPropertyInfo { Name = "magicalDamage", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> PureDamage
        {
            get { return (QueryBuilderParameter<int?>)_pureDamage.Value; }
            set { _pureDamage = new InputPropertyInfo { Name = "pureDamage", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> DamageReceived
        {
            get { return (QueryBuilderParameter<int?>)_damageReceived.Value; }
            set { _damageReceived = new InputPropertyInfo { Name = "damageReceived", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> HealingAllies
        {
            get { return (QueryBuilderParameter<int?>)_healingAllies.Value; }
            set { _healingAllies = new InputPropertyInfo { Name = "healingAllies", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> RunePower
        {
            get { return (QueryBuilderParameter<int?>)_runePower.Value; }
            set { _runePower = new InputPropertyInfo { Name = "runePower", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Neutrals
        {
            get { return (QueryBuilderParameter<int?>)_neutrals.Value; }
            set { _neutrals = new InputPropertyInfo { Name = "neutrals", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_time.Name != null) yield return _time;
            if (_kills.Name != null) yield return _kills;
            if (_deaths.Name != null) yield return _deaths;
            if (_assists.Name != null) yield return _assists;
            if (_cs.Name != null) yield return _cs;
            if (_dn.Name != null) yield return _dn;
            if (_level.Name != null) yield return _level;
            if (_physicalDamage.Name != null) yield return _physicalDamage;
            if (_magicalDamage.Name != null) yield return _magicalDamage;
            if (_pureDamage.Name != null) yield return _pureDamage;
            if (_damageReceived.Name != null) yield return _damageReceived;
            if (_healingAllies.Name != null) yield return _healingAllies;
            if (_runePower.Name != null) yield return _runePower;
            if (_neutrals.Name != null) yield return _neutrals;
        }
    }

    public partial class FilterDireTideCustomMatchRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _orderDirection;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterDireTide2020CustomGameMatchOrderBy?>))]
        #endif
        public QueryBuilderParameter<FilterDireTide2020CustomGameMatchOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FilterDireTide2020CustomGameMatchOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrder?>))]
        #endif
        public QueryBuilderParameter<FilterOrder?> OrderDirection
        {
            get { return (QueryBuilderParameter<FilterOrder?>)_orderDirection.Value; }
            set { _orderDirection = new InputPropertyInfo { Name = "orderDirection", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_orderDirection.Name != null) yield return _orderDirection;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class FilterSearchRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _query;
        private InputPropertyInfo _searchType;
        private InputPropertyInfo _minimumRank;
        private InputPropertyInfo _maximumRank;
        private InputPropertyInfo _lastMatchPlayedAgo;
        private InputPropertyInfo _leaderboardRegionIds;
        private InputPropertyInfo _leagueTierIds;
        private InputPropertyInfo _teamIsPro;
        private InputPropertyInfo _take;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Query
        {
            get { return (QueryBuilderParameter<string>)_query.Value; }
            set { _query = new InputPropertyInfo { Name = "query", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<Search>>))]
        #endif
        public QueryBuilderParameter<ICollection<Search>> SearchType
        {
            get { return (QueryBuilderParameter<ICollection<Search>>)_searchType.Value; }
            set { _searchType = new InputPropertyInfo { Name = "searchType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MinimumRank
        {
            get { return (QueryBuilderParameter<int?>)_minimumRank.Value; }
            set { _minimumRank = new InputPropertyInfo { Name = "minimumRank", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaximumRank
        {
            get { return (QueryBuilderParameter<int?>)_maximumRank.Value; }
            set { _maximumRank = new InputPropertyInfo { Name = "maximumRank", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> LastMatchPlayedAgo
        {
            get { return (QueryBuilderParameter<long?>)_lastMatchPlayedAgo.Value; }
            set { _lastMatchPlayedAgo = new InputPropertyInfo { Name = "lastMatchPlayedAgo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<byte>>))]
        #endif
        public QueryBuilderParameter<ICollection<byte>> LeaderboardRegionIds
        {
            get { return (QueryBuilderParameter<ICollection<byte>>)_leaderboardRegionIds.Value; }
            set { _leaderboardRegionIds = new InputPropertyInfo { Name = "leaderboardRegionIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LeagueTier>>))]
        #endif
        public QueryBuilderParameter<ICollection<LeagueTier>> LeagueTierIds
        {
            get { return (QueryBuilderParameter<ICollection<LeagueTier>>)_leagueTierIds.Value; }
            set { _leagueTierIds = new InputPropertyInfo { Name = "leagueTierIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> TeamIsPro
        {
            get { return (QueryBuilderParameter<bool?>)_teamIsPro.Value; }
            set { _teamIsPro = new InputPropertyInfo { Name = "teamIsPro", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_query.Name != null) yield return _query;
            if (_searchType.Name != null) yield return _searchType;
            if (_minimumRank.Name != null) yield return _minimumRank;
            if (_maximumRank.Name != null) yield return _maximumRank;
            if (_lastMatchPlayedAgo.Name != null) yield return _lastMatchPlayedAgo;
            if (_leaderboardRegionIds.Name != null) yield return _leaderboardRegionIds;
            if (_leagueTierIds.Name != null) yield return _leagueTierIds;
            if (_teamIsPro.Name != null) yield return _teamIsPro;
            if (_take.Name != null) yield return _take;
        }
    }

    public partial class FilterHeroRampageType : IGraphQlInputObject
    {
        private InputPropertyInfo _heroId;
        private InputPropertyInfo _bracketBasicIds;
        private InputPropertyInfo _take;
        private InputPropertyInfo _after;
        private InputPropertyInfo _before;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> HeroId
        {
            get { return (QueryBuilderParameter<short?>)_heroId.Value; }
            set { _heroId = new InputPropertyInfo { Name = "heroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RankBracketBasicEnum>>))]
        #endif
        public QueryBuilderParameter<ICollection<RankBracketBasicEnum>> BracketBasicIds
        {
            get { return (QueryBuilderParameter<ICollection<RankBracketBasicEnum>>)_bracketBasicIds.Value; }
            set { _bracketBasicIds = new InputPropertyInfo { Name = "bracketBasicIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> After
        {
            get { return (QueryBuilderParameter<long?>)_after.Value; }
            set { _after = new InputPropertyInfo { Name = "after", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Before
        {
            get { return (QueryBuilderParameter<long?>)_before.Value; }
            set { _before = new InputPropertyInfo { Name = "before", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_heroId.Name != null) yield return _heroId;
            if (_bracketBasicIds.Name != null) yield return _bracketBasicIds;
            if (_take.Name != null) yield return _take;
            if (_after.Name != null) yield return _after;
            if (_before.Name != null) yield return _before;
        }
    }

    public partial class FilterSeasonLeaderboardRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _query;
        private InputPropertyInfo _leaderBoardDivision;
        private InputPropertyInfo _heroId;
        private InputPropertyInfo _position;
        private InputPropertyInfo _countryCode;
        private InputPropertyInfo _teamId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Query
        {
            get { return (QueryBuilderParameter<string>)_query.Value; }
            set { _query = new InputPropertyInfo { Name = "query", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LeaderboardDivision?>))]
        #endif
        public QueryBuilderParameter<LeaderboardDivision?> LeaderBoardDivision
        {
            get { return (QueryBuilderParameter<LeaderboardDivision?>)_leaderBoardDivision.Value; }
            set { _leaderBoardDivision = new InputPropertyInfo { Name = "leaderBoardDivision", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> HeroId
        {
            get { return (QueryBuilderParameter<short?>)_heroId.Value; }
            set { _heroId = new InputPropertyInfo { Name = "heroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> Position
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CountryCode
        {
            get { return (QueryBuilderParameter<string>)_countryCode.Value; }
            set { _countryCode = new InputPropertyInfo { Name = "countryCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TeamId
        {
            get { return (QueryBuilderParameter<int?>)_teamId.Value; }
            set { _teamId = new InputPropertyInfo { Name = "teamId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_query.Name != null) yield return _query;
            if (_leaderBoardDivision.Name != null) yield return _leaderBoardDivision;
            if (_heroId.Name != null) yield return _heroId;
            if (_position.Name != null) yield return _position;
            if (_countryCode.Name != null) yield return _countryCode;
            if (_teamId.Name != null) yield return _teamId;
        }
    }

    public partial class FilterLeaderboardGuildRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _order;
        private InputPropertyInfo _region;
        private InputPropertyInfo _isFull;
        private InputPropertyInfo _isUnlocked;
        private InputPropertyInfo _minMemberCount;
        private InputPropertyInfo _maxMemberCount;
        private InputPropertyInfo _memberCount;
        private InputPropertyInfo _language;
        private InputPropertyInfo _createdBeforeDateTime;
        private InputPropertyInfo _createdAfterDateTime;
        private InputPropertyInfo _minRequiredRank;
        private InputPropertyInfo _maxRequiredRank;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterLeaderboardGuildOrderBy?>))]
        #endif
        public QueryBuilderParameter<FilterLeaderboardGuildOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<FilterLeaderboardGuildOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterOrder?>))]
        #endif
        public QueryBuilderParameter<FilterOrder?> Order
        {
            get { return (QueryBuilderParameter<FilterOrder?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Region
        {
            get { return (QueryBuilderParameter<byte?>)_region.Value; }
            set { _region = new InputPropertyInfo { Name = "region", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsFull
        {
            get { return (QueryBuilderParameter<bool?>)_isFull.Value; }
            set { _isFull = new InputPropertyInfo { Name = "isFull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsUnlocked
        {
            get { return (QueryBuilderParameter<bool?>)_isUnlocked.Value; }
            set { _isUnlocked = new InputPropertyInfo { Name = "isUnlocked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> MinMemberCount
        {
            get { return (QueryBuilderParameter<byte?>)_minMemberCount.Value; }
            set { _minMemberCount = new InputPropertyInfo { Name = "minMemberCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> MaxMemberCount
        {
            get { return (QueryBuilderParameter<byte?>)_maxMemberCount.Value; }
            set { _maxMemberCount = new InputPropertyInfo { Name = "maxMemberCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> MemberCount
        {
            get { return (QueryBuilderParameter<byte?>)_memberCount.Value; }
            set { _memberCount = new InputPropertyInfo { Name = "memberCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Language
        {
            get { return (QueryBuilderParameter<byte?>)_language.Value; }
            set { _language = new InputPropertyInfo { Name = "language", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> CreatedBeforeDateTime
        {
            get { return (QueryBuilderParameter<long?>)_createdBeforeDateTime.Value; }
            set { _createdBeforeDateTime = new InputPropertyInfo { Name = "createdBeforeDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> CreatedAfterDateTime
        {
            get { return (QueryBuilderParameter<long?>)_createdAfterDateTime.Value; }
            set { _createdAfterDateTime = new InputPropertyInfo { Name = "createdAfterDateTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> MinRequiredRank
        {
            get { return (QueryBuilderParameter<long?>)_minRequiredRank.Value; }
            set { _minRequiredRank = new InputPropertyInfo { Name = "minRequiredRank", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> MaxRequiredRank
        {
            get { return (QueryBuilderParameter<long?>)_maxRequiredRank.Value; }
            set { _maxRequiredRank = new InputPropertyInfo { Name = "maxRequiredRank", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_orderBy.Name != null) yield return _orderBy;
            if (_order.Name != null) yield return _order;
            if (_region.Name != null) yield return _region;
            if (_isFull.Name != null) yield return _isFull;
            if (_isUnlocked.Name != null) yield return _isUnlocked;
            if (_minMemberCount.Name != null) yield return _minMemberCount;
            if (_maxMemberCount.Name != null) yield return _maxMemberCount;
            if (_memberCount.Name != null) yield return _memberCount;
            if (_language.Name != null) yield return _language;
            if (_createdBeforeDateTime.Name != null) yield return _createdBeforeDateTime;
            if (_createdAfterDateTime.Name != null) yield return _createdAfterDateTime;
            if (_minRequiredRank.Name != null) yield return _minRequiredRank;
            if (_maxRequiredRank.Name != null) yield return _maxRequiredRank;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class FilterLeaderboardHeroRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _heroIds;
        private InputPropertyInfo _bracketIds;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<short>>))]
        #endif
        public QueryBuilderParameter<ICollection<short>> HeroIds
        {
            get { return (QueryBuilderParameter<ICollection<short>>)_heroIds.Value; }
            set { _heroIds = new InputPropertyInfo { Name = "heroIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<RankBracket>>))]
        #endif
        public QueryBuilderParameter<ICollection<RankBracket>> BracketIds
        {
            get { return (QueryBuilderParameter<ICollection<RankBracket>>)_bracketIds.Value; }
            set { _bracketIds = new InputPropertyInfo { Name = "bracketIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_heroIds.Name != null) yield return _heroIds;
            if (_bracketIds.Name != null) yield return _bracketIds;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class MatchLiveRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _heroId;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _isParsing;
        private InputPropertyInfo _isCompleted;
        private InputPropertyInfo _leagueIds;
        private InputPropertyInfo _gameStates;
        private InputPropertyInfo _tiers;
        private InputPropertyInfo _lastPlaybackEventOnly;
        private InputPropertyInfo _orderBy;
        private InputPropertyInfo _isLeague;
        private InputPropertyInfo _take;
        private InputPropertyInfo _skip;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> HeroId
        {
            get { return (QueryBuilderParameter<short?>)_heroId.Value; }
            set { _heroId = new InputPropertyInfo { Name = "heroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LeagueId
        {
            get { return (QueryBuilderParameter<int?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsParsing
        {
            get { return (QueryBuilderParameter<bool?>)_isParsing.Value; }
            set { _isParsing = new InputPropertyInfo { Name = "isParsing", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsCompleted
        {
            get { return (QueryBuilderParameter<bool?>)_isCompleted.Value; }
            set { _isCompleted = new InputPropertyInfo { Name = "isCompleted", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> LeagueIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_leagueIds.Value; }
            set { _leagueIds = new InputPropertyInfo { Name = "leagueIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MatchLiveGameState>>))]
        #endif
        public QueryBuilderParameter<ICollection<MatchLiveGameState>> GameStates
        {
            get { return (QueryBuilderParameter<ICollection<MatchLiveGameState>>)_gameStates.Value; }
            set { _gameStates = new InputPropertyInfo { Name = "gameStates", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LeagueTier>>))]
        #endif
        public QueryBuilderParameter<ICollection<LeagueTier>> Tiers
        {
            get { return (QueryBuilderParameter<ICollection<LeagueTier>>)_tiers.Value; }
            set { _tiers = new InputPropertyInfo { Name = "tiers", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> LastPlaybackEventOnly
        {
            get { return (QueryBuilderParameter<bool?>)_lastPlaybackEventOnly.Value; }
            set { _lastPlaybackEventOnly = new InputPropertyInfo { Name = "lastPlaybackEventOnly", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchLiveRequestOrderBy?>))]
        #endif
        public QueryBuilderParameter<MatchLiveRequestOrderBy?> OrderBy
        {
            get { return (QueryBuilderParameter<MatchLiveRequestOrderBy?>)_orderBy.Value; }
            set { _orderBy = new InputPropertyInfo { Name = "orderBy", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLeague
        {
            get { return (QueryBuilderParameter<bool?>)_isLeague.Value; }
            set { _isLeague = new InputPropertyInfo { Name = "isLeague", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Take
        {
            get { return (QueryBuilderParameter<int?>)_take.Value; }
            set { _take = new InputPropertyInfo { Name = "take", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Skip
        {
            get { return (QueryBuilderParameter<int?>)_skip.Value; }
            set { _skip = new InputPropertyInfo { Name = "skip", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_heroId.Name != null) yield return _heroId;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_isParsing.Name != null) yield return _isParsing;
            if (_isCompleted.Name != null) yield return _isCompleted;
            if (_leagueIds.Name != null) yield return _leagueIds;
            if (_gameStates.Name != null) yield return _gameStates;
            if (_tiers.Name != null) yield return _tiers;
            if (_lastPlaybackEventOnly.Name != null) yield return _lastPlaybackEventOnly;
            if (_orderBy.Name != null) yield return _orderBy;
            if (_isLeague.Name != null) yield return _isLeague;
            if (_take.Name != null) yield return _take;
            if (_skip.Name != null) yield return _skip;
        }
    }

    public partial class UpdateMatchReplayUploadObjectType : IGraphQlInputObject
    {
        private InputPropertyInfo _matchReplayUploadTeamId;
        private InputPropertyInfo _matchId;
        private InputPropertyInfo _leagueId;
        private InputPropertyInfo _radiantTeamId;
        private InputPropertyInfo _direTeamId;
        private InputPropertyInfo _isActive;
        private InputPropertyInfo _notes;
        private InputPropertyInfo _players;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> MatchReplayUploadTeamId
        {
            get { return (QueryBuilderParameter<long?>)_matchReplayUploadTeamId.Value; }
            set { _matchReplayUploadTeamId = new InputPropertyInfo { Name = "matchReplayUploadTeamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> MatchId
        {
            get { return (QueryBuilderParameter<long?>)_matchId.Value; }
            set { _matchId = new InputPropertyInfo { Name = "matchId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> LeagueId
        {
            get { return (QueryBuilderParameter<long?>)_leagueId.Value; }
            set { _leagueId = new InputPropertyInfo { Name = "leagueId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> RadiantTeamId
        {
            get { return (QueryBuilderParameter<long?>)_radiantTeamId.Value; }
            set { _radiantTeamId = new InputPropertyInfo { Name = "radiantTeamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> DireTeamId
        {
            get { return (QueryBuilderParameter<long?>)_direTeamId.Value; }
            set { _direTeamId = new InputPropertyInfo { Name = "direTeamId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsActive
        {
            get { return (QueryBuilderParameter<bool?>)_isActive.Value; }
            set { _isActive = new InputPropertyInfo { Name = "isActive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Notes
        {
            get { return (QueryBuilderParameter<string>)_notes.Value; }
            set { _notes = new InputPropertyInfo { Name = "notes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UpdateMatchReplayMatchUploadPlayerObjectType>>))]
        #endif
        public QueryBuilderParameter<ICollection<UpdateMatchReplayMatchUploadPlayerObjectType>> Players
        {
            get { return (QueryBuilderParameter<ICollection<UpdateMatchReplayMatchUploadPlayerObjectType>>)_players.Value; }
            set { _players = new InputPropertyInfo { Name = "players", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_matchReplayUploadTeamId.Name != null) yield return _matchReplayUploadTeamId;
            if (_matchId.Name != null) yield return _matchId;
            if (_leagueId.Name != null) yield return _leagueId;
            if (_radiantTeamId.Name != null) yield return _radiantTeamId;
            if (_direTeamId.Name != null) yield return _direTeamId;
            if (_isActive.Name != null) yield return _isActive;
            if (_notes.Name != null) yield return _notes;
            if (_players.Name != null) yield return _players;
        }
    }

    public partial class UpdateMatchReplayMatchUploadPlayerObjectType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _position;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MatchPlayerPositionType?>))]
        #endif
        public QueryBuilderParameter<MatchPlayerPositionType?> Position
        {
            get { return (QueryBuilderParameter<MatchPlayerPositionType?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_position.Name != null) yield return _position;
        }
    }

    public partial class ImportPickBanType : IGraphQlInputObject
    {
        private InputPropertyInfo _playerSlot;
        private InputPropertyInfo _isPick;
        private InputPropertyInfo _heroId;
        private InputPropertyInfo _time;
        private InputPropertyInfo _isRadiant;
        private InputPropertyInfo _order;
        private InputPropertyInfo _wasBannedSuccessfully;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> PlayerSlot
        {
            get { return (QueryBuilderParameter<byte?>)_playerSlot.Value; }
            set { _playerSlot = new InputPropertyInfo { Name = "playerSlot", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsPick
        {
            get { return (QueryBuilderParameter<bool?>)_isPick.Value; }
            set { _isPick = new InputPropertyInfo { Name = "isPick", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<short?>))]
        #endif
        public QueryBuilderParameter<short?> HeroId
        {
            get { return (QueryBuilderParameter<short?>)_heroId.Value; }
            set { _heroId = new InputPropertyInfo { Name = "heroId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Time
        {
            get { return (QueryBuilderParameter<byte?>)_time.Value; }
            set { _time = new InputPropertyInfo { Name = "time", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRadiant
        {
            get { return (QueryBuilderParameter<bool?>)_isRadiant.Value; }
            set { _isRadiant = new InputPropertyInfo { Name = "isRadiant", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> Order
        {
            get { return (QueryBuilderParameter<byte?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> WasBannedSuccessfully
        {
            get { return (QueryBuilderParameter<bool?>)_wasBannedSuccessfully.Value; }
            set { _wasBannedSuccessfully = new InputPropertyInfo { Name = "wasBannedSuccessfully", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_playerSlot.Name != null) yield return _playerSlot;
            if (_isPick.Name != null) yield return _isPick;
            if (_heroId.Name != null) yield return _heroId;
            if (_time.Name != null) yield return _time;
            if (_isRadiant.Name != null) yield return _isRadiant;
            if (_order.Name != null) yield return _order;
            if (_wasBannedSuccessfully.Name != null) yield return _wasBannedSuccessfully;
        }
    }

    public partial class CaptainJackIdentityProfileUpdateRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _feedLevel;
        private InputPropertyInfo _emailLevel;
        private InputPropertyInfo _dailyEmail;
        private InputPropertyInfo _weeklyEmail;
        private InputPropertyInfo _monthlyEmail;
        private InputPropertyInfo _proCircuitFeedLevel;
        private InputPropertyInfo _proCircuitEmailLevel;
        private InputPropertyInfo _themeType;
        private InputPropertyInfo _language;
        private InputPropertyInfo _emailHour;
        private InputPropertyInfo _isStratzPublic;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> FeedLevel
        {
            get { return (QueryBuilderParameter<byte?>)_feedLevel.Value; }
            set { _feedLevel = new InputPropertyInfo { Name = "feedLevel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> EmailLevel
        {
            get { return (QueryBuilderParameter<byte?>)_emailLevel.Value; }
            set { _emailLevel = new InputPropertyInfo { Name = "emailLevel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DailyEmail
        {
            get { return (QueryBuilderParameter<bool?>)_dailyEmail.Value; }
            set { _dailyEmail = new InputPropertyInfo { Name = "dailyEmail", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> WeeklyEmail
        {
            get { return (QueryBuilderParameter<bool?>)_weeklyEmail.Value; }
            set { _weeklyEmail = new InputPropertyInfo { Name = "weeklyEmail", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> MonthlyEmail
        {
            get { return (QueryBuilderParameter<bool?>)_monthlyEmail.Value; }
            set { _monthlyEmail = new InputPropertyInfo { Name = "monthlyEmail", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> ProCircuitFeedLevel
        {
            get { return (QueryBuilderParameter<byte?>)_proCircuitFeedLevel.Value; }
            set { _proCircuitFeedLevel = new InputPropertyInfo { Name = "proCircuitFeedLevel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> ProCircuitEmailLevel
        {
            get { return (QueryBuilderParameter<byte?>)_proCircuitEmailLevel.Value; }
            set { _proCircuitEmailLevel = new InputPropertyInfo { Name = "proCircuitEmailLevel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> ThemeType
        {
            get { return (QueryBuilderParameter<byte?>)_themeType.Value; }
            set { _themeType = new InputPropertyInfo { Name = "themeType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<Language?>))]
        #endif
        public QueryBuilderParameter<Language?> Language
        {
            get { return (QueryBuilderParameter<Language?>)_language.Value; }
            set { _language = new InputPropertyInfo { Name = "language", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> EmailHour
        {
            get { return (QueryBuilderParameter<byte?>)_emailHour.Value; }
            set { _emailHour = new InputPropertyInfo { Name = "emailHour", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsStratzPublic
        {
            get { return (QueryBuilderParameter<bool?>)_isStratzPublic.Value; }
            set { _isStratzPublic = new InputPropertyInfo { Name = "isStratzPublic", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_feedLevel.Name != null) yield return _feedLevel;
            if (_emailLevel.Name != null) yield return _emailLevel;
            if (_dailyEmail.Name != null) yield return _dailyEmail;
            if (_weeklyEmail.Name != null) yield return _weeklyEmail;
            if (_monthlyEmail.Name != null) yield return _monthlyEmail;
            if (_proCircuitFeedLevel.Name != null) yield return _proCircuitFeedLevel;
            if (_proCircuitEmailLevel.Name != null) yield return _proCircuitEmailLevel;
            if (_themeType.Name != null) yield return _themeType;
            if (_language.Name != null) yield return _language;
            if (_emailHour.Name != null) yield return _emailHour;
            if (_isStratzPublic.Name != null) yield return _isStratzPublic;
        }
    }

    public partial class UpdateFollowerRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _feedLevel;
        private InputPropertyInfo _emailLevel;
        private InputPropertyInfo _dailyEmail;
        private InputPropertyInfo _weeklyEmail;
        private InputPropertyInfo _monthlyEmail;
        private InputPropertyInfo _overrideAllUsers;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> FeedLevel
        {
            get { return (QueryBuilderParameter<byte?>)_feedLevel.Value; }
            set { _feedLevel = new InputPropertyInfo { Name = "feedLevel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<byte?>))]
        #endif
        public QueryBuilderParameter<byte?> EmailLevel
        {
            get { return (QueryBuilderParameter<byte?>)_emailLevel.Value; }
            set { _emailLevel = new InputPropertyInfo { Name = "emailLevel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DailyEmail
        {
            get { return (QueryBuilderParameter<bool?>)_dailyEmail.Value; }
            set { _dailyEmail = new InputPropertyInfo { Name = "dailyEmail", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> WeeklyEmail
        {
            get { return (QueryBuilderParameter<bool?>)_weeklyEmail.Value; }
            set { _weeklyEmail = new InputPropertyInfo { Name = "weeklyEmail", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> MonthlyEmail
        {
            get { return (QueryBuilderParameter<bool?>)_monthlyEmail.Value; }
            set { _monthlyEmail = new InputPropertyInfo { Name = "monthlyEmail", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> OverrideAllUsers
        {
            get { return (QueryBuilderParameter<bool?>)_overrideAllUsers.Value; }
            set { _overrideAllUsers = new InputPropertyInfo { Name = "overrideAllUsers", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_feedLevel.Name != null) yield return _feedLevel;
            if (_emailLevel.Name != null) yield return _emailLevel;
            if (_dailyEmail.Name != null) yield return _dailyEmail;
            if (_weeklyEmail.Name != null) yield return _weeklyEmail;
            if (_monthlyEmail.Name != null) yield return _monthlyEmail;
            if (_overrideAllUsers.Name != null) yield return _overrideAllUsers;
        }
    }

    public partial class MergeProSteamAccountRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _realName;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RealName
        {
            get { return (QueryBuilderParameter<string>)_realName.Value; }
            set { _realName = new InputPropertyInfo { Name = "realName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_name.Name != null) yield return _name;
            if (_realName.Name != null) yield return _realName;
        }
    }

    public partial class DeleteProSteamAccountRequestType : IGraphQlInputObject
    {
        private InputPropertyInfo _steamAccountId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _realName;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SteamAccountId
        {
            get { return (QueryBuilderParameter<long?>)_steamAccountId.Value; }
            set { _steamAccountId = new InputPropertyInfo { Name = "steamAccountId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RealName
        {
            get { return (QueryBuilderParameter<string>)_realName.Value; }
            set { _realName = new InputPropertyInfo { Name = "realName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_steamAccountId.Name != null) yield return _steamAccountId;
            if (_name.Name != null) yield return _name;
            if (_realName.Name != null) yield return _realName;
        }
    }
    #endregion

    #region data classes
    public partial class DotaQuery
    {
        public MatchType Match { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        public PlayerType Player { get; set; }
        public ICollection<PlayerType> Players { get; set; }
        public TeamType Team { get; set; }
        public ICollection<TeamType> Teams { get; set; }
        public LeagueType League { get; set; }
        public ICollection<LeagueType> Leagues { get; set; }
        public GuildType Guild { get; set; }
        public YogurtQuery Yogurt { get; set; }
        public PlusQuery Plus { get; set; }
        public StratzQuery Stratz { get; set; }
        public HeroStatsQuery HeroStats { get; set; }
        public ConstantQuery Constants { get; set; }
        public LeaderboardQuery Leaderboard { get; set; }
        public LiveQuery Live { get; set; }
        public VendorQuery Vendor { get; set; }
    }

    public partial class MatchType
    {
        public long? Id { get; set; }
        public bool? DidRadiantWin { get; set; }
        public int? DurationSeconds { get; set; }
        public long? StartDateTime { get; set; }
        public long? EndDateTime { get; set; }
        public int? TowerStatusRadiant { get; set; }
        public int? TowerStatusDire { get; set; }
        public short? BarracksStatusRadiant { get; set; }
        public short? BarracksStatusDire { get; set; }
        public int? ClusterId { get; set; }
        public int? FirstBloodTime { get; set; }
        public LobbyTypeEnum? LobbyType { get; set; }
        public int? NumHumanPlayers { get; set; }
        public GameModeEnumType? GameMode { get; set; }
        public long? ReplaySalt { get; set; }
        public bool? IsStats { get; set; }
        public int? TournamentId { get; set; }
        public short? TournamentRound { get; set; }
        public short? ActualRank { get; set; }
        public short? AverageRank { get; set; }
        public short? AverageImp { get; set; }
        public long? ParsedDateTime { get; set; }
        public long? StatsDateTime { get; set; }
        public int? LeagueId { get; set; }
        public LeagueType League { get; set; }
        public int? RadiantTeamId { get; set; }
        public TeamType RadiantTeam { get; set; }
        public int? DireTeamId { get; set; }
        public TeamType DireTeam { get; set; }
        public long? SeriesId { get; set; }
        public SeriesType Series { get; set; }
        public short? GameVersionId { get; set; }
        public byte? RegionId { get; set; }
        public long? SequenceNum { get; set; }
        public int? Rank { get; set; }
        public byte? Bracket { get; set; }
        public MatchAnalysisOutcomeType? AnalysisOutcome { get; set; }
        public byte? PredictedOutcomeWeight { get; set; }
        public ICollection<MatchPlayerType> Players { get; set; }
        public ICollection<int> RadiantNetworthLeads { get; set; }
        public ICollection<int> RadiantExperienceLeads { get; set; }
        public ICollection<int> RadiantKills { get; set; }
        public ICollection<int> DireKills { get; set; }
        public ICollection<MatchStatsPickBanType> PickBans { get; set; }
        public ICollection<MatchStatsTowerReportType> TowerStatus { get; set; }
        public MatchStatsLaneReportType LaneReport { get; set; }
        public ICollection<double> WinRates { get; set; }
        public ICollection<double> PredictedWinRates { get; set; }
        public ICollection<MatchStatsChatEventType> ChatEvents { get; set; }
        public ICollection<MatchStatsTowerDeathType> TowerDeaths { get; set; }
        public MatchPlaybackDataType PlaybackData { get; set; }
        public ICollection<MatchPlayerSpectatorType> Spectators { get; set; }
        public LaneOutcomeEnums? BottomLaneOutcome { get; set; }
        public LaneOutcomeEnums? MidLaneOutcome { get; set; }
        public LaneOutcomeEnums? TopLaneOutcome { get; set; }
        public bool? DidRequestDownload { get; set; }
    }

    public partial class LeagueType
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string Banner { get; set; }
        public int? BasePrizePool { get; set; }
        public DateTime? StopSalesTime { get; set; }
        public LeagueTier? Tier { get; set; }
        public LeagueRegion? Region { get; set; }
        public bool? Private { get; set; }
        public bool? FreeToSpectate { get; set; }
        public long? StartDateTime { get; set; }
        public long? EndDateTime { get; set; }
        public string TournamentUrl { get; set; }
        public long? LastMatchDate { get; set; }
        public bool? HasLiveMatches { get; set; }
        public int? PrizePool { get; set; }
        public string ImageUri { get; set; }
        public string DisplayName { get; set; }
        public string Description { get; set; }
        public string Country { get; set; }
        public string Venue { get; set; }
        public bool? IsFollowed { get; set; }
        public ICollection<LeagueNodeGroupType> NodeGroups { get; set; }
        public ICollection<MatchLiveType> LiveMatches { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IMatchGroupByType> MatchesGroupBy { get; set; }
        public ICollection<SeriesType> Series { get; set; }
        public LeagueTableType Tables { get; set; }
        public LeagueBattlePassType BattlePass { get; set; }
        public LeagueStatType Stats { get; set; }
        public ICollection<LeaguePrizePoolPercentageType> PrizePoolPercentages { get; set; }
        public ICollection<TeamPrizeType> Standings { get; set; }
        public ICollection<LeagueStreamType> Streams { get; set; }
    }

    public partial class LeagueNodeGroupType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public short? ParentNodeGroupId { get; set; }
        public short? AdvancingNodeGroupId { get; set; }
        public byte? AdvancingTeamCount { get; set; }
        public byte? TeamCount { get; set; }
        public LeagueNodeDefaultGroupEnum? DefaultNodeType { get; set; }
        public LeagueNodeGroupTypeEnum? NodeGroupType { get; set; }
        public byte? Round { get; set; }
        public byte? MaxRounds { get; set; }
        public bool? IsTieBreaker { get; set; }
        public bool? IsFinalGroup { get; set; }
        public bool? IsCompleted { get; set; }
        public byte? Phase { get; set; }
        public byte? Region { get; set; }
        public long? StartDate { get; set; }
        public long? EndDate { get; set; }
        public short? SecondaryAdvancingNodeGroupId { get; set; }
        public byte? SecondaryAdvancingTeamCount { get; set; }
        public short? TertiaryAdvancingNodeGroupId { get; set; }
        public byte? TertiaryAdvancingTeamCount { get; set; }
        public int? EliminationDpcPoints { get; set; }
        public ICollection<LeagueNodeType> Nodes { get; set; }
    }

    public partial class LeagueNodeType
    {
        public short? NodeGroupId { get; set; }
        public short? Id { get; set; }
        public string Name { get; set; }
        public short? WinningNodeId { get; set; }
        public short? LosingNodeId { get; set; }
        public LeagueNodeDefaultGroupEnum? NodeType { get; set; }
        public long? ScheduledTime { get; set; }
        public long? ActualTime { get; set; }
        public long? SeriesId { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        public int? TeamOneId { get; set; }
        public TeamType TeamOne { get; set; }
        public int? TeamTwoId { get; set; }
        public TeamType TeamTwo { get; set; }
        public byte? TeamOneWins { get; set; }
        public byte? TeamTwoWins { get; set; }
        public bool? HasStarted { get; set; }
        public bool? IsCompleted { get; set; }
        public ICollection<int> StreamIds { get; set; }
        public ICollection<LeagueStreamType> Streams { get; set; }
    }

    public partial class TeamType
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string Tag { get; set; }
        public long? DateCreated { get; set; }
        public bool? IsPro { get; set; }
        public bool? IsLocked { get; set; }
        public string CountryCode { get; set; }
        public string Url { get; set; }
        public string Logo { get; set; }
        public string BaseLogo { get; set; }
        public string BannerLogo { get; set; }
        public int? WinCount { get; set; }
        public int? LossCount { get; set; }
        public long? LastMatchDateTime { get; set; }
        public string CountryName { get; set; }
        public long? CoachSteamAccountId { get; set; }
        public SteamAccountType CoachSteamAccount { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        public ICollection<SeriesType> Series { get; set; }
        public ICollection<SteamAccountTeamMemberType> Members { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IMatchGroupByType> MatchesGroupBy { get; set; }
        public ICollection<MatchPickBanGroupByType> HeroPickBan { get; set; }
        public ICollection<LeagueType> Leagues { get; set; }
    }

    public partial class SteamAccountType
    {
        public long? Id { get; set; }
        public string ProfileUri { get; set; }
        public string RealName { get; set; }
        public long? TimeCreated { get; set; }
        public string CountryCode { get; set; }
        public string StateCode { get; set; }
        public int? CityId { get; set; }
        public int? CommunityVisibleState { get; set; }
        public string Name { get; set; }
        public long? LastLogOff { get; set; }
        public string Avatar { get; set; }
        public long? PrimaryClanId { get; set; }
        public bool? IsDotaPlusSubscriber { get; set; }
        public short? DotaAccountLevel { get; set; }
        public short? RankShift { get; set; }
        public bool? IsAnonymous { get; set; }
        public bool? IsStratzPublic { get; set; }
        public byte? SeasonRank { get; set; }
        public short? SeasonLeaderboardRank { get; set; }
        public byte? SeasonLeaderboardDivisionId { get; set; }
        public ProSteamAccountType ProSteamAccount { get; set; }
        public PlayerActivitySummaryType Activity { get; set; }
        public byte? SmurfFlag { get; set; }
        public long? LastMatchDateTime { get; set; }
        public byte? LastMatchRegionId { get; set; }
        public ICollection<SteamAccountBattlePassType> Battlepass { get; set; }
        public GuildMemberType Guild { get; set; }
        public bool? IsCaster { get; set; }
    }

    public partial class ProSteamAccountType
    {
        public long? Id { get; set; }
        public string Name { get; set; }
        public string RealName { get; set; }
        public byte? FantasyRole { get; set; }
        public int? TeamId { get; set; }
        public string Sponsor { get; set; }
        public bool? IsLocked { get; set; }
        public bool? IsPro { get; set; }
        public int? TotalEarnings { get; set; }
        public long? Birthday { get; set; }
        public string RomanizedRealName { get; set; }
        public short? Roles { get; set; }
        public ICollection<string> Aliases { get; set; }
        public byte? Statuses { get; set; }
        public string TwitterLink { get; set; }
        public string TwitchLink { get; set; }
        public string InstagramLink { get; set; }
        public string VkLink { get; set; }
        public string YouTubeLink { get; set; }
        public string FacebookLink { get; set; }
        public string WeiboLink { get; set; }
        public ICollection<string> SignatureHeroes { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public ICollection<string> Countries { get; set; }
        public TeamType Team { get; set; }
    }

    public partial class PlayerActivitySummaryType
    {
        public PlayerBehaviorActivity? Activity { get; set; }
    }

    public partial class SteamAccountBattlePassType
    {
        public long? SteamAccountId { get; set; }
        public byte? EventId { get; set; }
        public int? Level { get; set; }
    }

    public partial class GuildMemberType
    {
        public int? GuildId { get; set; }
        public int? SteamAccountId { get; set; }
        public long? JoinDateTime { get; set; }
        public GuildType Guild { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? Imp { get; set; }
    }

    public partial class GuildType
    {
        public int? Id { get; set; }
        public string Motd { get; set; }
        public string Name { get; set; }
        public string Tag { get; set; }
        public long? CreatedDateTime { get; set; }
        public byte? Language { get; set; }
        public int? Flags { get; set; }
        public string Logo { get; set; }
        public byte? Region { get; set; }
        public string Description { get; set; }
        public byte? RequiredRank { get; set; }
        public byte? PrimaryColor { get; set; }
        public byte? SecondaryColor { get; set; }
        public byte? Pattern { get; set; }
        public int? Points { get; set; }
        public int? PastWeeklyRank { get; set; }
        public byte? PastWeeklyPercentile { get; set; }
        public byte? CurrentPercentile { get; set; }
        public long? LastUpdateDateTime { get; set; }
        public ICollection<GuildMemberType> Members { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        public byte? MemberCount { get; set; }
        public int? TotalBattlePassLevels { get; set; }
        public byte? Rank { get; set; }
    }

    public partial class SeriesType
    {
        public long? Id { get; set; }
        public Series? Type { get; set; }
        public int? TeamOneId { get; set; }
        public int? TeamTwoId { get; set; }
        public int? LeagueId { get; set; }
        public short? TeamOneWinCount { get; set; }
        public short? TeamTwoWinCount { get; set; }
        public int? WinningTeamId { get; set; }
        public long? LastMatchDateTime { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        public TeamType TeamOne { get; set; }
        public TeamType TeamTwo { get; set; }
        public LeagueType League { get; set; }
        public LeagueNodeType Node { get; set; }
    }

    public partial class SteamAccountTeamMemberType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public PlayerType Player { get; set; }
        public int? TeamId { get; set; }
        public long? FirstMatchId { get; set; }
        public long? FirstMatchDateTime { get; set; }
        public long? LastMatchId { get; set; }
        public long? LastMatchDateTime { get; set; }
        public TeamType Team { get; set; }
    }

    public partial class PlayerType
    {
        public long? SteamAccountId { get; set; }
        public CaptainJackIdentityPublicProfileType Identity { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? Imp { get; set; }
        public long? FirstMatchDate { get; set; }
        public long? LastMatchDate { get; set; }
        public byte? LastMatchRegionId { get; set; }
        public ICollection<SteamAccountSeasonRankType> Ranks { get; set; }
        public ICollection<SteamAccountSeasonLeaderBoardRankType> LeaderboardRanks { get; set; }
        public ICollection<PlayerBadgeType> Badges { get; set; }
        public ICollection<SteamAccountNameType> Names { get; set; }
        public short? BehaviorScore { get; set; }
        public SteamAccountTeamMemberType Team { get; set; }
        public GuildMemberType GuildMember { get; set; }
        public PlayerActivitySummaryType Activity { get; set; }
        public bool? IsFollowed { get; set; }
        public PlayerCardHoverType SimpleSummary { get; set; }
        public PlayerPerformanceType Performance { get; set; }
        public PlayerPerformanceType HeroPerformance { get; set; }
        public ICollection<PlayerHeroesPerformanceType> HeroesPerformance { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IMatchGroupByType> MatchesGroupBy { get; set; }
        public ICollection<HeroDotaPlusLeaderboardRankType> DotaPlus { get; set; }
        public ICollection<PlayerHeroPerformanceLongestStreakType> HeroStreaks { get; set; }
        public ICollection<FeatType> Feats { get; set; }
    }

    public partial class CaptainJackIdentityPublicProfileType
    {
        public Guid? CaptainJackIdentityId { get; set; }
        public string Name { get; set; }
        public string Twitter { get; set; }
        public string Facebook { get; set; }
        public string Twitch { get; set; }
        public string YouTube { get; set; }
        public bool? IsAdmin { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class SteamAccountSeasonRankType
    {
        public byte? SeasonRankId { get; set; }
        public long? AsOfDateTime { get; set; }
        public bool? IsCore { get; set; }
        public byte? Rank { get; set; }
    }

    public partial class SteamAccountSeasonLeaderBoardRankType
    {
        public long? SteamAccountId { get; set; }
        public byte? SeasonRankId { get; set; }
        public long? AsOfDateTime { get; set; }
        public LeaderboardDivision? SeasonLeaderBoardDivisionId { get; set; }
        public short? Rank { get; set; }
    }

    public partial class PlayerBadgeType
    {
        public byte? BadgeId { get; set; }
        public byte? Slot { get; set; }
        public long? CreatedDateTime { get; set; }
    }

    public partial class SteamAccountNameType
    {
        public string Name { get; set; }
        public long? LastSeenDateTime { get; set; }
    }

    public partial class PlayerCardHoverType
    {
        public SteamAccountType SteamAccount { get; set; }
        public long? LastUpdateDateTime { get; set; }
        public int? MatchCount { get; set; }
        public int? CoreCount { get; set; }
        public int? SupportCount { get; set; }
        public int? Imp { get; set; }
        public ICollection<PlayerCardHoverHeroType> Heroes { get; set; }
        public byte? Activity { get; set; }
    }

    public partial class PlayerCardHoverHeroType
    {
        public int? HeroId { get; set; }
        public int? WinCount { get; set; }
        public int? LossCount { get; set; }
    }

    public partial class PlayerPerformanceType
    {
        public ICollection<short> HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? Streak { get; set; }
        public int? MaxStreak { get; set; }
        public int? Imp { get; set; }
        public int? Rank { get; set; }
        public int? MmrTier { get; set; }
        public int? MmrBracket { get; set; }
        public int? AwardMatchCount { get; set; }
        public int? MvpCount { get; set; }
        public int? TopCoreCount { get; set; }
        public int? TopSupportCount { get; set; }
        public int? Kills { get; set; }
        public double? KillsAverage { get; set; }
        public int? Deaths { get; set; }
        public double? DeathsAverage { get; set; }
        public int? Assists { get; set; }
        public double? AssistsAverage { get; set; }
        public int? Cs { get; set; }
        public double? CsAverage { get; set; }
        public int? Gpm { get; set; }
        public double? GpmAverage { get; set; }
        public int? Xpm { get; set; }
        public double? XpmAverage { get; set; }
        public PlayerPerformanceCompositionType Composition { get; set; }
        public ICollection<PlayerPerformancePositionType> Position { get; set; }
        public ICollection<int> PickOrder { get; set; }
    }

    public partial class PlayerPerformanceCompositionType
    {
        public ICollection<PlayerPerformanceCompositionHeroType> Allies { get; set; }
        public ICollection<PlayerPerformanceCompositionHeroType> Foes { get; set; }
    }

    public partial class PlayerPerformanceCompositionHeroType
    {
        public short? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
    }

    public partial class PlayerPerformancePositionType
    {
        public MatchPlayerRoleType? RoleType { get; set; }
        public int? RoleMatchCount { get; set; }
        public int? RoleWinCount { get; set; }
        public ICollection<PlayerPerformancePositionObjectType> Lanes { get; set; }
    }

    public partial class PlayerPerformancePositionObjectType
    {
        public byte? LaneType { get; set; }
        public int? LaneMatchCount { get; set; }
        public int? LaneWinCount { get; set; }
    }

    public partial class PlayerHeroesPerformanceType
    {
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? WinCount { get; set; }
        public decimal? Kda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public int? Duration { get; set; }
        public int? Imp { get; set; }
        public decimal? Best { get; set; }
        public int? MatchCount { get; set; }
        public int? GoldPerMinute { get; set; }
        public int? ExperiencePerMinute { get; set; }
        public ICollection<PlayerHeroesPerformanceScoreType> PositionScore { get; set; }
        public long? LastPlayedDateTime { get; set; }
    }

    public partial class HeroType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public string DisplayName { get; set; }
        public string ShortName { get; set; }
        public ICollection<string> Aliases { get; set; }
        public short? GameVersionId { get; set; }
        public ICollection<HeroAbilityType> Abilities { get; set; }
        public ICollection<HeroRoleType> Roles { get; set; }
        public HeroLanguageType Language { get; set; }
        public ICollection<HeroTalentType> Talents { get; set; }
        public HeroStatType Stats { get; set; }
    }

    public partial class HeroAbilityType
    {
        public byte? Slot { get; set; }
        public short? GameVersionId { get; set; }
        public short? AbilityId { get; set; }
        public AbilityType Ability { get; set; }
    }

    public partial class AbilityType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public string Uri { get; set; }
        public AbilityLanguageType Language { get; set; }
        public AbilityStatType Stat { get; set; }
        public ICollection<AbilityAttributeType> Attributes { get; set; }
        public bool? IsTalent { get; set; }
    }

    public partial class AbilityLanguageType
    {
        public string DisplayName { get; set; }
        public ICollection<string> Description { get; set; }
        public ICollection<string> Attributes { get; set; }
        public string Lore { get; set; }
        public string AghanimDescription { get; set; }
        public string ShardDescription { get; set; }
        public ICollection<string> Notes { get; set; }
    }

    public partial class AbilityStatType
    {
        public short? AbilityId { get; set; }
        public int? Type { get; set; }
        public long? Behavior { get; set; }
        public long? UnitTargetType { get; set; }
        public int? UnitTargetTeam { get; set; }
        public long? UnitTargetFlags { get; set; }
        public int? UnitDamageType { get; set; }
        public int? SpellImmunity { get; set; }
        public decimal? ModifierSupportValue { get; set; }
        public short? ModifierSupportBonus { get; set; }
        public bool? IsOnCastbar { get; set; }
        public bool? IsOnLearnbar { get; set; }
        public short? FightRecapLevel { get; set; }
        public bool? IsGrantedByScepter { get; set; }
        public bool? HasScepterUpgrade { get; set; }
        public byte? MaxLevel { get; set; }
        public byte? LevelsBetweenUpgrades { get; set; }
        public byte? RequiredLevel { get; set; }
        public string HotKeyOverride { get; set; }
        public bool? DisplayAdditionalHeroes { get; set; }
        public ICollection<int> CastRange { get; set; }
        public ICollection<int> CastRangeBuffer { get; set; }
        public ICollection<decimal> CastPoint { get; set; }
        public ICollection<decimal> ChannelTime { get; set; }
        public ICollection<decimal> Cooldown { get; set; }
        public ICollection<decimal> Damage { get; set; }
        public ICollection<decimal> ManaCost { get; set; }
        public bool? IsUltimate { get; set; }
        public string Duration { get; set; }
        public string Charges { get; set; }
        public string ChargeRestoreTime { get; set; }
        public bool? HasShardUpgrade { get; set; }
        public bool? IsGrantedByShard { get; set; }
        public AbilityDispellEnum? Dispellable { get; set; }
        public short? LinkedAbilityId { get; set; }
    }

    public partial class AbilityAttributeType
    {
        public string Name { get; set; }
        public string Value { get; set; }
        public short? LinkedSpecialBonusAbilityId { get; set; }
        public bool? RequiresScepter { get; set; }
    }

    public partial class HeroRoleType
    {
        public HeroRoleEnum? RoleId { get; set; }
        public short? Level { get; set; }
    }

    public partial class HeroLanguageType
    {
        public string DisplayName { get; set; }
        public string Lore { get; set; }
        public string Hype { get; set; }
    }

    public partial class HeroTalentType
    {
        public short? AbilityId { get; set; }
        public byte? Slot { get; set; }
    }

    public partial class HeroStatType
    {
        public bool? Enabled { get; set; }
        public decimal? HeroUnlockOrder { get; set; }
        public bool? Team { get; set; }
        public bool? CmEnabled { get; set; }
        public bool? NewPlayerEnabled { get; set; }
        public string AttackType { get; set; }
        public decimal? StartingArmor { get; set; }
        public decimal? StartingMagicArmor { get; set; }
        public decimal? StartingDamageMin { get; set; }
        public decimal? StartingDamageMax { get; set; }
        public decimal? AttackRate { get; set; }
        public decimal? AttackAnimationPoint { get; set; }
        public decimal? AttackAcquisitionRange { get; set; }
        public decimal? AttackRange { get; set; }
        public string PrimaryAttribute { get; set; }
        public decimal? StrengthBase { get; set; }
        public decimal? StrengthGain { get; set; }
        public decimal? IntelligenceBase { get; set; }
        public decimal? IntelligenceGain { get; set; }
        public decimal? AgilityBase { get; set; }
        public decimal? AgilityGain { get; set; }
        public decimal? HpRegen { get; set; }
        public decimal? MpRegen { get; set; }
        public decimal? MoveSpeed { get; set; }
        public decimal? MoveTurnRate { get; set; }
        public decimal? HpBarOffset { get; set; }
        public decimal? VisionDaytimeRange { get; set; }
        public decimal? VisionNighttimeRange { get; set; }
        public byte? Complexity { get; set; }
        public HeroPrimaryAttributeType? PrimaryAttributeEnum { get; set; }
    }

    public partial class PlayerHeroesPerformanceScoreType
    {
        public MatchPlayerPositionType? Id { get; set; }
        public decimal? Score { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? Imp { get; set; }
    }

    public partial interface IMatchGroupByType
    {
    }

    public partial class MatchGroupByHeroType : IMatchGroupByType
    {
        public long? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByFactionType : IMatchGroupByType
    {
        public bool? IsRadiant { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByKillsType : IMatchGroupByType
    {
        public long? KillCount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByDeathsType : IMatchGroupByType
    {
        public long? DeathCount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByAssistsType : IMatchGroupByType
    {
        public long? AssistCount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsLeaverType : IMatchGroupByType
    {
        public bool? IsLeaver { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByLevelType : IMatchGroupByType
    {
        public long? Level { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsPartyType : IMatchGroupByType
    {
        public bool? IsParty { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsRandomType : IMatchGroupByType
    {
        public bool? IsRandom { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByLaneType : IMatchGroupByType
    {
        public MatchLaneType? Lane { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByRoleType : IMatchGroupByType
    {
        public MatchPlayerRoleType? Role { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsIntentionalFeedingType : IMatchGroupByType
    {
        public bool? IsIntentionalFeeding { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByAwardType : IMatchGroupByType
    {
        public MatchPlayerAward? Award { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByRoamLaneType : IMatchGroupByType
    {
        public MatchPlayerAward? RoamLane { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsVictoryType : IMatchGroupByType
    {
        public bool? IsVictory { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByDurationMinutesType : IMatchGroupByType
    {
        public long? DurationMinutes { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByClusterType : IMatchGroupByType
    {
        public long? Cluster { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByRegionType : IMatchGroupByType
    {
        public long? Region { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByLobbyTypeType : IMatchGroupByType
    {
        public long? LobbyType { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsLeagueType : IMatchGroupByType
    {
        public bool? IsLeague { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsSeriesType : IMatchGroupByType
    {
        public bool? IsSeries { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByGameModeType : IMatchGroupByType
    {
        public long? GameMode { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByIsStatsType : IMatchGroupByType
    {
        public bool? IsStats { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByGameVersionType : IMatchGroupByType
    {
        public long? GameVersion { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByTeamType : IMatchGroupByType
    {
        public long? TeamId { get; set; }
        public TeamType Team { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByHeroPerformanceType : IMatchGroupByType
    {
        public short? HeroId { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupBySteamAccountIdType : IMatchGroupByType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupBySteamAccountIdHeroIdType : IMatchGroupByType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupBySteamAccountIdWithTeamType : IMatchGroupByType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupBySteamAccountIdHeroIdWithTeamType : IMatchGroupByType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupBySteamAccountIdAgainstTeamType : IMatchGroupByType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupBySteamAccountIdHeroIdAgainstTeamType : IMatchGroupByType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByLeagueIdType : IMatchGroupByType
    {
        public long? LeagueId { get; set; }
        public LeagueType League { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByPositionType : IMatchGroupByType
    {
        public MatchPlayerPositionType? Position { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByDateDayType : IMatchGroupByType
    {
        public long? DateDay { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByDateDayHeroType : IMatchGroupByType
    {
        public long? DateDay { get; set; }
        public long? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByTotalKillsType : IMatchGroupByType
    {
        public long? TotalKills { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByGoldPerMinuteType : IMatchGroupByType
    {
        public long? GoldPerMinute { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class MatchGroupByHourType : IMatchGroupByType
    {
        public short? Hour { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class HeroDotaPlusLeaderboardRankType
    {
        public short? HeroId { get; set; }
        public long? SteamAccountId { get; set; }
        public byte? Level { get; set; }
        public long? TotalActions { get; set; }
        public long? CreatedDateTime { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class PlayerHeroPerformanceLongestStreakType
    {
        public short? HeroId { get; set; }
        public int? LongestStreak { get; set; }
        public int? CurrentStreak { get; set; }
    }

    public partial class FeatType
    {
        public Feat? Type { get; set; }
        public int? Value { get; set; }
        public int? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public long? MatchId { get; set; }
        public MatchType Match { get; set; }
    }

    public partial class MatchPickBanGroupByType
    {
        public short? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? PickCount { get; set; }
        public int? BanCount { get; set; }
    }

    public partial class LeagueStreamType
    {
        public int? Id { get; set; }
        public Language? LanguageId { get; set; }
        public string Name { get; set; }
        public byte? BroadcastProvider { get; set; }
        public string StreamUrl { get; set; }
        public string VodUrl { get; set; }
    }

    public partial class MatchLiveType
    {
        public long? MatchId { get; set; }
        public byte? RadiantScore { get; set; }
        public byte? DireScore { get; set; }
        public int? LeagueId { get; set; }
        public LeagueType League { get; set; }
        public short? Delay { get; set; }
        public int? Spectators { get; set; }
        public int? AverageRank { get; set; }
        public long? BuildingState { get; set; }
        public int? RadiantLead { get; set; }
        public long? LobbyId { get; set; }
        public LobbyTypeEnum? LobbyType { get; set; }
        public long? ServerSteamId { get; set; }
        public int? GameTime { get; set; }
        public bool? Completed { get; set; }
        public bool? IsUpdating { get; set; }
        public bool? IsParsing { get; set; }
        public int? RadiantTeamId { get; set; }
        public int? DireTeamId { get; set; }
        public TeamType RadiantTeam { get; set; }
        public TeamType DireTeam { get; set; }
        public int? ParseBeginGameTime { get; set; }
        public byte? NumHumanPlayers { get; set; }
        public GameModeEnumType? GameMode { get; set; }
        public MatchLivePlaybackDataType PlaybackData { get; set; }
        public MatchLiveGameState? GameState { get; set; }
        public short? GameMinute { get; set; }
        public ICollection<MatchLivePlayerType> Players { get; set; }
        public long? CreatedDateTime { get; set; }
        public long? ModifiedDateTime { get; set; }
        public MatchLiveInsightType Insight { get; set; }
        public ICollection<decimal> WinRateValues { get; set; }
        public ICollection<decimal> DurationValues { get; set; }
        public ICollection<MatchLiveWinRateDetailType> LiveWinRateValues { get; set; }
    }

    public partial class MatchLivePlaybackDataType
    {
        public ICollection<MatchLiveRoshanDetailType> RoshanEvents { get; set; }
        public ICollection<MatchLiveBuildingDetailType> BuildingEvents { get; set; }
        public ICollection<MatchLivePickBanType> PickBans { get; set; }
        public ICollection<MatchLiveTeamScoreDetailType> RadiantScore { get; set; }
        public ICollection<MatchLiveTeamScoreDetailType> DireScore { get; set; }
    }

    public partial class MatchLiveRoshanDetailType
    {
        public int? Time { get; set; }
        public bool? IsAlive { get; set; }
        public int? RespawnTimer { get; set; }
    }

    public partial class MatchLiveBuildingDetailType
    {
        public int? Time { get; set; }
        public int? IndexId { get; set; }
        public BuildingType? Type { get; set; }
        public bool? IsAlive { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public bool? IsRadiant { get; set; }
        public int? NpcId { get; set; }
    }

    public partial class MatchLivePickBanType
    {
        public bool? IsPick { get; set; }
        public short? HeroId { get; set; }
        public int? Order { get; set; }
        public short? BannedHeroId { get; set; }
        public bool? IsRadiant { get; set; }
        public decimal? BaseWinRate { get; set; }
        public decimal? AdjustedWinRate { get; set; }
        public PlusLetterType? Letter { get; set; }
        public ICollection<decimal> PositionValues { get; set; }
        public ICollection<decimal> WinRateValues { get; set; }
        public ICollection<decimal> DurationValues { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
    }

    public partial class MatchLiveTeamScoreDetailType
    {
        public int? Time { get; set; }
        public short? Score { get; set; }
    }

    public partial class MatchLivePlayerType
    {
        public long? MatchId { get; set; }
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public string Name { get; set; }
        public byte? PlayerSlot { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public bool? IsRadiant { get; set; }
        public byte? NumKills { get; set; }
        public byte? NumDeaths { get; set; }
        public byte? NumAssists { get; set; }
        public byte? LeaverStatus { get; set; }
        public ushort? NumLastHits { get; set; }
        public ushort? NumDenies { get; set; }
        public ushort? GoldPerMinute { get; set; }
        public ushort? ExperiencePerMinute { get; set; }
        public byte? Level { get; set; }
        public int? Gold { get; set; }
        public int? GoldSpent { get; set; }
        public int? HeroDamage { get; set; }
        public int? TowerDamage { get; set; }
        public short? ItemId0 { get; set; }
        public short? ItemId1 { get; set; }
        public short? ItemId2 { get; set; }
        public short? ItemId3 { get; set; }
        public short? ItemId4 { get; set; }
        public short? ItemId5 { get; set; }
        public short? BackpackId0 { get; set; }
        public short? BackpackId1 { get; set; }
        public short? BackpackId2 { get; set; }
        public MatchPlayerLivePlaybackDataType PlaybackData { get; set; }
        public int? Networth { get; set; }
        public short? RespawnTimer { get; set; }
        public short? UltimateCooldown { get; set; }
        public short? UltimateState { get; set; }
        public ICollection<MatchLivePlayerImpDetailType> ImpPerMinute { get; set; }
        public short? GameVersionId { get; set; }
        public decimal? BaseWinRateValue { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
    }

    public partial class MatchPlayerLivePlaybackDataType
    {
        public ICollection<MatchLivePlayerPositionDetailType> PositionEvents { get; set; }
        public ICollection<MatchLivePlayerGoldDetailType> GoldEvents { get; set; }
        public ICollection<MatchLivePlayerLevelDetailType> LevelEvents { get; set; }
        public ICollection<MatchLivePlayerKillDetailType> KillEvents { get; set; }
        public ICollection<MatchLivePlayerDeathDetailType> DeathEvents { get; set; }
        public ICollection<MatchLivePlayerAssistDetailType> AssistEvents { get; set; }
        public ICollection<MatchLivePlayerLastHitDetailType> CsEvents { get; set; }
        public ICollection<MatchLivePlayerDenyDetailType> DenyEvents { get; set; }
        public ICollection<MatchLivePlayerExperienceDetailType> ExperienceEvents { get; set; }
        public ICollection<MatchLivePlayerInventoryDetailType> InventoryEvents { get; set; }
    }

    public partial class MatchLivePlayerPositionDetailType
    {
        public int? Time { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
    }

    public partial class MatchLivePlayerGoldDetailType
    {
        public int? Time { get; set; }
        public int? Gold { get; set; }
        public int? Networth { get; set; }
        public int? NetworthDifference { get; set; }
        public int? GoldPerMinute { get; set; }
    }

    public partial class MatchLivePlayerLevelDetailType
    {
        public int? Time { get; set; }
        public int? Level { get; set; }
    }

    public partial class MatchLivePlayerKillDetailType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchLivePlayerDeathDetailType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchLivePlayerAssistDetailType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchLivePlayerLastHitDetailType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchLivePlayerDenyDetailType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchLivePlayerExperienceDetailType
    {
        public int? Time { get; set; }
        public int? ExpPerMinute { get; set; }
    }

    public partial class MatchLivePlayerInventoryDetailType
    {
        public int? Time { get; set; }
        public short? ItemId0 { get; set; }
        public short? ItemId1 { get; set; }
        public short? ItemId2 { get; set; }
        public short? ItemId3 { get; set; }
        public short? ItemId4 { get; set; }
        public short? ItemId5 { get; set; }
        public short? BackpackId0 { get; set; }
        public short? BackpackId1 { get; set; }
        public short? BackpackId2 { get; set; }
    }

    public partial class MatchLivePlayerImpDetailType
    {
        public int? Time { get; set; }
        public short? Imp { get; set; }
    }

    public partial class MatchLiveInsightType
    {
        public int? TeamOneVsWinCount { get; set; }
        public int? TeamTwoVsWinCount { get; set; }
        public int? TeamOneLeagueWinCount { get; set; }
        public int? TeamOneLeagueMatchCount { get; set; }
        public int? TeamTwoLeagueWinCount { get; set; }
        public int? TeamTwoLeagueMatchCount { get; set; }
        public ICollection<SeriesType> LastSeries { get; set; }
    }

    public partial class MatchLiveWinRateDetailType
    {
        public int? Time { get; set; }
        public decimal? WinRate { get; set; }
    }

    public partial class LeagueTableType
    {
        public int? LeagueId { get; set; }
        public ICollection<LeagueTableTeamType> TableTeams { get; set; }
        public ICollection<LeagueTableHeroType> TableHeroes { get; set; }
        public ICollection<LeagueTablePlayerType> TablePlayers { get; set; }
    }

    public partial class LeagueTableTeamType
    {
        public int? TeamId { get; set; }
        public TeamType Team { get; set; }
        public ICollection<LeagueRegisteredPlayerType> Members { get; set; }
        public LeagueTableTeamOverviewType Overview { get; set; }
        public LeagueTableTeamStatsType Stats { get; set; }
        public ICollection<LeagueTableTeamHeroesObjectType> Heroes { get; set; }
        public ICollection<LeagueTableTeamLanesObjectType> Lanes { get; set; }
    }

    public partial class LeagueRegisteredPlayerType
    {
        public int? LeagueId { get; set; }
        public LeagueType League { get; set; }
        public int? TeamId { get; set; }
        public TeamType RadiantTeam { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class LeagueTableTeamOverviewType
    {
        public decimal? Points { get; set; }
        public decimal? Earnings { get; set; }
        public int? SeriesCount { get; set; }
        public int? SeriesWins { get; set; }
        public int? SeriesDraws { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
        public decimal? Tmp { get; set; }
    }

    public partial class LeagueTableTeamStatsType
    {
        public decimal? Kills { get; set; }
        public decimal? Deaths { get; set; }
        public decimal? Assists { get; set; }
        public decimal? Cs { get; set; }
        public decimal? Gpm { get; set; }
        public decimal? Xpm { get; set; }
        public decimal? Heal { get; set; }
        public decimal? HeroDamage { get; set; }
        public decimal? TowerDamage { get; set; }
        public decimal? Duration { get; set; }
    }

    public partial class LeagueTableTeamHeroesObjectType
    {
        public int? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
        public double? Imp { get; set; }
        public int? BanCount { get; set; }
    }

    public partial class LeagueTableTeamLanesObjectType
    {
        public byte? Id { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
    }

    public partial class LeagueTableHeroType
    {
        public short? HeroId { get; set; }
        public LeagueTableHeroOverviewType Overview { get; set; }
        public LeagueTableHeroStatsType Stats { get; set; }
        public ICollection<LeagueTableHeroPlayersObjectType> Heroes { get; set; }
        public ICollection<LeagueTableHeroLanesObjectType> Lanes { get; set; }
    }

    public partial class LeagueTableHeroOverviewType
    {
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
        public int? PickPhaseOne { get; set; }
        public int? PickPhaseTwo { get; set; }
        public int? PickPhaseThree { get; set; }
        public int? BanCount { get; set; }
        public int? BanPhaseOne { get; set; }
        public int? BanPhaseTwo { get; set; }
        public int? BanPhaseThree { get; set; }
    }

    public partial class LeagueTableHeroStatsType
    {
        public decimal? Kills { get; set; }
        public decimal? Deaths { get; set; }
        public decimal? Assists { get; set; }
        public decimal? Cs { get; set; }
        public decimal? Gpm { get; set; }
        public decimal? Xpm { get; set; }
        public decimal? Heal { get; set; }
        public decimal? HeroDamage { get; set; }
        public decimal? TowerDamage { get; set; }
        public decimal? KillContribution { get; set; }
    }

    public partial class LeagueTableHeroPlayersObjectType
    {
        public long? SteamId { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
        public decimal? Imp { get; set; }
        public decimal? Kills { get; set; }
        public decimal? Deaths { get; set; }
        public decimal? Assists { get; set; }
        public decimal? Cs { get; set; }
        public decimal? Gpm { get; set; }
        public decimal? Xpm { get; set; }
        public decimal? Heal { get; set; }
        public decimal? HeroDamage { get; set; }
        public decimal? TowerDamage { get; set; }
        public decimal? KillContribution { get; set; }
    }

    public partial class LeagueTableHeroLanesObjectType
    {
        public byte? Id { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
    }

    public partial class LeagueTablePlayerType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public LeagueTablePlayerOverviewType Overview { get; set; }
        public LeagueTablePlayerStatsType Stats { get; set; }
        public ICollection<LeagueTablePlayerHeroesObjectType> Heroes { get; set; }
        public ICollection<LeagueTablePlayerLanesObjectType> Lanes { get; set; }
    }

    public partial class LeagueTablePlayerOverviewType
    {
        public decimal? Points { get; set; }
        public decimal? Earnings { get; set; }
        public int? SeriesCount { get; set; }
        public int? SeriesWins { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
        public int? Imp { get; set; }
    }

    public partial class LeagueTablePlayerStatsType
    {
        public decimal? Kills { get; set; }
        public decimal? Deaths { get; set; }
        public decimal? Assists { get; set; }
        public decimal? Cs { get; set; }
        public decimal? Gpm { get; set; }
        public decimal? Xpm { get; set; }
        public decimal? Heal { get; set; }
        public decimal? HeroDamage { get; set; }
        public decimal? TowerDamage { get; set; }
        public decimal? KillContribution { get; set; }
    }

    public partial class LeagueTablePlayerHeroesObjectType
    {
        public int? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
        public int? Imp { get; set; }
    }

    public partial class LeagueTablePlayerLanesObjectType
    {
        public byte? Id { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchWins { get; set; }
    }

    public partial class LeagueBattlePassType
    {
        public int? Count { get; set; }
        public int? Average { get; set; }
    }

    public partial class LeagueStatType
    {
        public int? MatchCount { get; set; }
        public int? RadiantWinMatchCount { get; set; }
        public int? AverageMatchDurationSeconds { get; set; }
    }

    public partial class LeaguePrizePoolPercentageType
    {
        public int? LeagueId { get; set; }
        public byte? Index { get; set; }
        public int? Percentage { get; set; }
    }

    public partial class TeamPrizeType
    {
        public int? LeagueId { get; set; }
        public LeagueType League { get; set; }
        public int? TeamId { get; set; }
        public TeamType Team { get; set; }
        public int? Standing { get; set; }
        public decimal? PrizeAmount { get; set; }
    }

    public partial class MatchPlayerType
    {
        public long? MatchId { get; set; }
        public MatchType Match { get; set; }
        public byte? PlayerSlot { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public bool? IsRadiant { get; set; }
        public bool? IsVictory { get; set; }
        public short? HeroId { get; set; }
        public short? GameVersionId { get; set; }
        public HeroType Hero { get; set; }
        public byte? Kills { get; set; }
        public byte? Deaths { get; set; }
        public byte? Assists { get; set; }
        public LeaverStatusEnum? LeaverStatus { get; set; }
        public short? NumLastHits { get; set; }
        public short? NumDenies { get; set; }
        public short? GoldPerMinute { get; set; }
        public int? Networth { get; set; }
        public short? ExperiencePerMinute { get; set; }
        public byte? Level { get; set; }
        public int? Gold { get; set; }
        public int? GoldSpent { get; set; }
        public int? HeroDamage { get; set; }
        public int? TowerDamage { get; set; }
        public int? HeroHealing { get; set; }
        public byte? PartyId { get; set; }
        public bool? IsRandom { get; set; }
        public MatchLaneType? Lane { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public short? StreakPrediction { get; set; }
        public bool? IntentionalFeeding { get; set; }
        public MatchPlayerRoleType? Role { get; set; }
        public MatchPlayerRoleType? RoleBasic { get; set; }
        public short? Imp { get; set; }
        public MatchPlayerAward? Award { get; set; }
        public short? Item0Id { get; set; }
        public short? Item1Id { get; set; }
        public short? Item2Id { get; set; }
        public short? Item3Id { get; set; }
        public short? Item4Id { get; set; }
        public short? Item5Id { get; set; }
        public short? Backpack0Id { get; set; }
        public short? Backpack1Id { get; set; }
        public short? Backpack2Id { get; set; }
        public short? Neutral0Id { get; set; }
        public short? Behavior { get; set; }
        public MatchPlayerStatsType Stats { get; set; }
        public MatchPlayerPlaybackDataType PlaybackData { get; set; }
        public ICollection<HeroPositionTimeDetailType> HeroAverage { get; set; }
        public MatchPlayerAdditionalUnitType AdditionalUnit { get; set; }
        public HeroDotaPlusLeaderboardRankType DotaPlus { get; set; }
        public ICollection<PlayerAbilityType> Abilities { get; set; }
        public int? InvisibleSeconds { get; set; }
        public int? DotaPlusHeroXp { get; set; }
    }

    public partial class MatchPlayerStatsType
    {
        public long? MatchId { get; set; }
        public long? SteamAccountId { get; set; }
        public short? GameVersionId { get; set; }
        public ICollection<int> Level { get; set; }
        public ICollection<MatchPlayerStatsKillEventType> KillEvents { get; set; }
        public ICollection<MatchPlayerStatsDeathEventType> DeathEvents { get; set; }
        public ICollection<MatchPlayerStatsAssistEventType> AssistEvents { get; set; }
        public ICollection<int> LastHitsPerMinute { get; set; }
        public ICollection<int> GoldPerMinute { get; set; }
        public ICollection<int> ExperiencePerMinute { get; set; }
        public ICollection<int> HealPerMinute { get; set; }
        public ICollection<int> HeroDamagePerMinute { get; set; }
        public ICollection<int> TowerDamagePerMinute { get; set; }
        public ICollection<MatchPlayerStatsTowerDamageReportType> TowerDamageReport { get; set; }
        public ICollection<MatchPlayerStatsCourierKillEventType> CourierKills { get; set; }
        public ICollection<MatchPlayerStatsWardEventType> Wards { get; set; }
        public ICollection<MatchPlayerItemPurchaseEventType> ItemPurchases { get; set; }
        public ICollection<MatchPlayerStatsItemUsedEventType> ItemUsed { get; set; }
        public ICollection<MatchPlayerStatsAllTalkEventType> AllTalks { get; set; }
        public ICollection<MatchPlayerStatsChatWheelEventType> ChatWheels { get; set; }
        public ICollection<int> ActionsPerMinute { get; set; }
        public MatchPlayerStatsActionReportType ActionReport { get; set; }
        public ICollection<MatchPlayerStatsLocationReportType> LocationReport { get; set; }
        public MatchPlayerStatsFarmDistributionReportType FarmDistributionReport { get; set; }
        public ICollection<MatchPlayerStatsRuneEventType> Runes { get; set; }
        public ICollection<MatchPlayerStatsAbilityCastReportType> AbilityCastReport { get; set; }
        public MatchPlayerStatsHeroDamageReportType HeroDamageReport { get; set; }
        public ICollection<MatchPlayerInventoryType> InventoryReport { get; set; }
        public ICollection<int> NetworthPerMinute { get; set; }
        public ICollection<int> CampStack { get; set; }
        public ICollection<MatchPlayerStatsBuffEventType> MatchPlayerBuffEvent { get; set; }
        public ICollection<int> DeniesPerMinute { get; set; }
        public ICollection<int> ImpPerMinute { get; set; }
        public ICollection<int> TripsFountainPerMinute { get; set; }
        public ICollection<MatchPlayerSpiritBearInventoryType> SpiritBearInventoryReport { get; set; }
        public ICollection<int> HeroDamageReceivedPerMinute { get; set; }
        public ICollection<MatchPlayerWardDestuctionObjectType> WardDestruction { get; set; }
    }

    public partial class MatchPlayerStatsKillEventType
    {
        public int? Time { get; set; }
        public int? Target { get; set; }
        public int? ByAbility { get; set; }
        public int? ByItem { get; set; }
        public int? Gold { get; set; }
        public int? Xp { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public ICollection<int> Assist { get; set; }
        public bool? IsSolo { get; set; }
        public bool? IsGank { get; set; }
        public bool? IsInvisible { get; set; }
        public bool? IsSmoke { get; set; }
        public bool? IsTpRecently { get; set; }
    }

    public partial class MatchPlayerStatsDeathEventType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public int? Target { get; set; }
        public int? ByAbility { get; set; }
        public int? ByItem { get; set; }
        public int? GoldFed { get; set; }
        public int? XpFed { get; set; }
        public int? TimeDead { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public int? GoldLost { get; set; }
        public ICollection<short> Assist { get; set; }
        public bool? IsWardWalkThrough { get; set; }
        public bool? IsAttemptTpOut { get; set; }
        public bool? IsDieBack { get; set; }
        public bool? IsBurst { get; set; }
        public bool? IsEngagedOnDeath { get; set; }
        public bool? HasHealAvailable { get; set; }
        public bool? IsTracked { get; set; }
    }

    public partial class MatchPlayerStatsAssistEventType
    {
        public int? Time { get; set; }
        public int? Target { get; set; }
        public int? Gold { get; set; }
        public int? Xp { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchPlayerStatsTowerDamageReportType
    {
        public int? NpcId { get; set; }
        public int? Damage { get; set; }
        public int? DamageCreeps { get; set; }
        public int? DamageFromAbility { get; set; }
    }

    public partial class MatchPlayerStatsCourierKillEventType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchPlayerStatsWardEventType
    {
        public int? Time { get; set; }
        public int? Type { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchPlayerItemPurchaseEventType
    {
        public int? Time { get; set; }
        public int? ItemId { get; set; }
    }

    public partial class MatchPlayerStatsItemUsedEventType
    {
        public int? ItemId { get; set; }
        public int? Count { get; set; }
    }

    public partial class MatchPlayerStatsAllTalkEventType
    {
        public int? Time { get; set; }
        public string Message { get; set; }
        public int? PausedTick { get; set; }
    }

    public partial class MatchPlayerStatsChatWheelEventType
    {
        public int? Time { get; set; }
        public short? ChatWheelId { get; set; }
        public int? PauseTick { get; set; }
    }

    public partial class MatchPlayerStatsActionReportType
    {
        public int? MoveToPosition { get; set; }
        public int? MoveToTarget { get; set; }
        public int? AttackPosition { get; set; }
        public int? AttackTarget { get; set; }
        public int? CastPosition { get; set; }
        public int? CastTarget { get; set; }
        public int? CastNoTarget { get; set; }
        public int? HeldPosition { get; set; }
        public int? GlyphCast { get; set; }
        public int? ScanUsed { get; set; }
        public int? PingUsed { get; set; }
    }

    public partial class MatchPlayerStatsLocationReportType
    {
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchPlayerStatsFarmDistributionReportType
    {
        public ICollection<MatchPlayerStatsFarmDistributionObjectType> CreepType { get; set; }
        public ICollection<MatchPlayerStatsFarmDistributionObjectType> CreepLocation { get; set; }
        public ICollection<MatchPlayerStatsFarmDistributionObjectType> NeutralLocation { get; set; }
        public ICollection<MatchPlayerStatsFarmDistributionObjectType> AncientLocation { get; set; }
        public ICollection<MatchPlayerStatsFarmDistributionObjectType> Buildings { get; set; }
        public int? BuyBackGold { get; set; }
        public int? AbandonGold { get; set; }
        public MatchPlayerStatsFarmDistributionObjectType BountyGold { get; set; }
        public ICollection<MatchPlayerStatsFarmDistributionObjectType> Other { get; set; }
    }

    public partial class MatchPlayerStatsFarmDistributionObjectType
    {
        public int? Id { get; set; }
        public int? Count { get; set; }
        public int? Gold { get; set; }
        public int? Xp { get; set; }
    }

    public partial class MatchPlayerStatsRuneEventType
    {
        public int? Time { get; set; }
        public RuneEnums? Rune { get; set; }
        public RuneAction? Action { get; set; }
        public int? Gold { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class MatchPlayerStatsAbilityCastReportType
    {
        public int? AbilityId { get; set; }
        public int? Count { get; set; }
        public ICollection<MatchPlayerStatsAbilityCastObjectType> Targets { get; set; }
    }

    public partial class MatchPlayerStatsAbilityCastObjectType
    {
        public int? Target { get; set; }
        public int? Count { get; set; }
        public int? Damage { get; set; }
        public int? Duration { get; set; }
    }

    public partial class MatchPlayerStatsHeroDamageReportType
    {
        public MatchPlayerHeroDamageTotalReportObjectType DealtTotal { get; set; }
        public MatchPlayerHeroDamageTotalRecievedReportObjectType ReceivedTotal { get; set; }
        public ICollection<MatchPlayerHeroDamageTargetReportObjectType> DealtTargets { get; set; }
        public ICollection<MatchPlayerHeroDamageTargetReportObjectType> ReceivedTargets { get; set; }
        public ICollection<MatchPlayerHeroDamageSourceAbilityReportObjectType> DealtSourceAbility { get; set; }
        public ICollection<MatchPlayerHeroDamageSourceAbilityReportObjectType> ReceivedSourceAbility { get; set; }
        public ICollection<MatchPlayerHeroDamageSourceItemReportObjectType> DealtSourceItem { get; set; }
        public ICollection<MatchPlayerHeroDamageSourceItemReportObjectType> ReceivedSourceItem { get; set; }
    }

    public partial class MatchPlayerHeroDamageTotalReportObjectType
    {
        public int? PhysicalDamage { get; set; }
        public int? MagicalDamage { get; set; }
        public int? PureDamage { get; set; }
        public int? SelfHeal { get; set; }
        public int? AllyHeal { get; set; }
        public int? StunCount { get; set; }
        public int? StunDuration { get; set; }
        public int? DisableCount { get; set; }
        public int? DisableDuration { get; set; }
        public int? SlowCount { get; set; }
        public int? SlowDuration { get; set; }
    }

    public partial class MatchPlayerHeroDamageTotalRecievedReportObjectType
    {
        public int? PhysicalDamage { get; set; }
        public int? MagicalDamage { get; set; }
        public int? PureDamage { get; set; }
        public int? Heal { get; set; }
        public int? StunCount { get; set; }
        public int? StunDuration { get; set; }
        public int? DisableCount { get; set; }
        public int? DisableDuration { get; set; }
        public int? SlowCount { get; set; }
        public int? SlowDuration { get; set; }
    }

    public partial class MatchPlayerHeroDamageTargetReportObjectType
    {
        public int? Target { get; set; }
        public int? Amount { get; set; }
    }

    public partial class MatchPlayerHeroDamageSourceAbilityReportObjectType
    {
        public int? AbilityId { get; set; }
        public int? Count { get; set; }
        public int? Amount { get; set; }
    }

    public partial class MatchPlayerHeroDamageSourceItemReportObjectType
    {
        public int? ItemId { get; set; }
        public int? Count { get; set; }
        public int? Amount { get; set; }
    }

    public partial class MatchPlayerInventoryType
    {
        public MatchPlayerInventoryObjectType Item0 { get; set; }
        public MatchPlayerInventoryObjectType Item1 { get; set; }
        public MatchPlayerInventoryObjectType Item2 { get; set; }
        public MatchPlayerInventoryObjectType Item3 { get; set; }
        public MatchPlayerInventoryObjectType Item4 { get; set; }
        public MatchPlayerInventoryObjectType Item5 { get; set; }
        public MatchPlayerInventoryObjectType BackPack0 { get; set; }
        public MatchPlayerInventoryObjectType BackPack1 { get; set; }
        public MatchPlayerInventoryObjectType BackPack2 { get; set; }
        public MatchPlayerInventoryObjectType Neutral0 { get; set; }
    }

    public partial class MatchPlayerInventoryObjectType
    {
        public int? ItemId { get; set; }
        public int? Charges { get; set; }
        public int? SecondaryCharges { get; set; }
    }

    public partial class MatchPlayerStatsBuffEventType
    {
        public int? Time { get; set; }
        public int? AbilityId { get; set; }
        public int? ItemId { get; set; }
        public int? StackCount { get; set; }
    }

    public partial class MatchPlayerSpiritBearInventoryType
    {
        public int? Item0Id { get; set; }
        public int? Item1Id { get; set; }
        public int? Item2Id { get; set; }
        public int? Item3Id { get; set; }
        public int? Item4Id { get; set; }
        public int? Item5Id { get; set; }
        public int? BackPack0Id { get; set; }
        public int? BackPack1Id { get; set; }
        public int? BackPack2Id { get; set; }
        public int? Neutral0Id { get; set; }
    }

    public partial class MatchPlayerWardDestuctionObjectType
    {
        public int? Time { get; set; }
        public int? Gold { get; set; }
        public int? Experience { get; set; }
        public bool? IsWard { get; set; }
    }

    public partial class MatchPlayerPlaybackDataType
    {
        public ICollection<AbilityLearnEventsType> AbilityLearnEvents { get; set; }
        public ICollection<AbilityUsedEventsType> AbilityUsedEvents { get; set; }
        public ICollection<AbilityActiveListType> AbilityActiveLists { get; set; }
        public ICollection<ItemUsedEventType> ItemUsedEvents { get; set; }
        public ICollection<PlayerUpdatePositionDetailType> PlayerUpdatePositionEvents { get; set; }
        public ICollection<PlayerUpdateGoldDetailType> PlayerUpdateGoldEvents { get; set; }
        public ICollection<PlayerUpdateAttributeDetailType> PlayerUpdateAttributeEvents { get; set; }
        public ICollection<PlayerUpdateLevelDetailType> PlayerUpdateLevelEvents { get; set; }
        public ICollection<PlayerUpdateHealthDetailType> PlayerUpdateHealthEvents { get; set; }
        public ICollection<PlayerUpdateBattleDetailType> PlayerUpdateBattleEvents { get; set; }
        public ICollection<KillDetailType> KillEvents { get; set; }
        public ICollection<DeathDetailType> DeathEvents { get; set; }
        public ICollection<AssistDetailType> AssistEvents { get; set; }
        public ICollection<LastHitDetailType> CsEvents { get; set; }
        public ICollection<GoldDetailType> GoldEvents { get; set; }
        public ICollection<ExperienceDetailType> ExperienceEvents { get; set; }
        public ICollection<HealDetailType> HealEvents { get; set; }
        public ICollection<HeroDamageDetailType> HeroDamageEvents { get; set; }
        public ICollection<TowerDamageDetailType> TowerDamageEvents { get; set; }
        public ICollection<InventoryType> InventoryEvents { get; set; }
        public ICollection<ItemPurchaseType> PurchaseEvents { get; set; }
        public ICollection<BuyBackDetailType> BuyBackEvents { get; set; }
        public ICollection<StreakEventType> StreakEvents { get; set; }
        public ICollection<PlayerRuneDetailType> RuneEvents { get; set; }
        public ICollection<SpiritBearInventoryType> SpiritBearInventoryEvents { get; set; }
    }

    public partial class AbilityLearnEventsType
    {
        public int? Time { get; set; }
        public short? AbilityId { get; set; }
        public int? LevelObtained { get; set; }
        public int? Level { get; set; }
        public bool? IsUltimate { get; set; }
        public bool? IsTalent { get; set; }
        public bool? IsMaxLevel { get; set; }
    }

    public partial class AbilityUsedEventsType
    {
        public int? Time { get; set; }
        public short? AbilityId { get; set; }
        public short? Attacker { get; set; }
        public short? Target { get; set; }
    }

    public partial class AbilityActiveListType
    {
        public int? Time { get; set; }
        public short? Ability0 { get; set; }
        public short? Ability1 { get; set; }
        public short? Ability2 { get; set; }
        public short? Ability3 { get; set; }
        public short? Ability4 { get; set; }
        public short? Ability5 { get; set; }
        public short? Ability6 { get; set; }
        public short? Ability7 { get; set; }
    }

    public partial class ItemUsedEventType
    {
        public int? Time { get; set; }
        public short? ItemId { get; set; }
        public short? Attacker { get; set; }
        public short? Target { get; set; }
    }

    public partial class PlayerUpdatePositionDetailType
    {
        public int? Time { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
    }

    public partial class PlayerUpdateGoldDetailType
    {
        public int? Time { get; set; }
        public int? Gold { get; set; }
        public int? UnreliableGold { get; set; }
        public int? Networth { get; set; }
        public int? NetworthDifference { get; set; }
    }

    public partial class PlayerUpdateAttributeDetailType
    {
        public int? Time { get; set; }
        public int? Agi { get; set; }
        public int? Int { get; set; }
        public int? Str { get; set; }
    }

    public partial class PlayerUpdateLevelDetailType
    {
        public int? Time { get; set; }
        public int? Level { get; set; }
    }

    public partial class PlayerUpdateHealthDetailType
    {
        public int? Time { get; set; }
        public int? Hp { get; set; }
        public int? MaxHp { get; set; }
        public int? Mp { get; set; }
        public int? MaxMp { get; set; }
    }

    public partial class PlayerUpdateBattleDetailType
    {
        public int? Time { get; set; }
        public int? DamageMinMax { get; set; }
        public int? DamageBonus { get; set; }
        public int? HpRegen { get; set; }
        public int? MpRegen { get; set; }
    }

    public partial class KillDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public bool? IsFromIllusion { get; set; }
        public short? Target { get; set; }
        public short? ByAbility { get; set; }
        public short? ByItem { get; set; }
        public int? Gold { get; set; }
        public int? Xp { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public ICollection<int> Assist { get; set; }
        public bool? IsSolo { get; set; }
        public bool? IsGank { get; set; }
        public bool? IsInvisible { get; set; }
        public bool? IsSmoke { get; set; }
        public bool? IsTpRecently { get; set; }
        public bool? IsRuneEffected { get; set; }
    }

    public partial class DeathDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public bool? IsFromIllusion { get; set; }
        public short? Target { get; set; }
        public short? ByAbility { get; set; }
        public short? ByItem { get; set; }
        public int? GoldFed { get; set; }
        public int? XpFed { get; set; }
        public int? TimeDead { get; set; }
        public int? ReliableGold { get; set; }
        public int? UnreliableGold { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public int? GoldLost { get; set; }
        public ICollection<int> Assist { get; set; }
        public bool? IsWardWalkThrough { get; set; }
        public bool? IsAttemptTpOut { get; set; }
        public bool? IsDieBack { get; set; }
        public bool? IsBurst { get; set; }
        public bool? IsEngagedOnDeath { get; set; }
        public bool? HasHealAvailable { get; set; }
        public bool? IsTracked { get; set; }
        public bool? IsFeed { get; set; }
    }

    public partial class AssistDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public short? Target { get; set; }
        public int? Gold { get; set; }
        public int? Xp { get; set; }
        public int? SubTime { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class LastHitDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public bool? IsFromIllusion { get; set; }
        public short? NpcId { get; set; }
        public short? ByAbility { get; set; }
        public short? ByItem { get; set; }
        public int? Gold { get; set; }
        public int? Xp { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public bool? IsCreep { get; set; }
        public bool? IsNeutral { get; set; }
        public bool? IsAncient { get; set; }
        public MapLocationEnums? MapLocation { get; set; }
    }

    public partial class GoldDetailType
    {
        public int? Time { get; set; }
        public int? Amount { get; set; }
        public GoldReason? Reason { get; set; }
        public int? NpcId { get; set; }
        public bool? IsValidForStats { get; set; }
    }

    public partial class ExperienceDetailType
    {
        public int? Time { get; set; }
        public int? Amount { get; set; }
        public XpReason? Reason { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class HealDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public short? Target { get; set; }
        public int? Value { get; set; }
        public short? ByAbility { get; set; }
        public short? ByItem { get; set; }
    }

    public partial class HeroDamageDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public short? Target { get; set; }
        public int? Value { get; set; }
        public short? ByAbility { get; set; }
        public short? ByItem { get; set; }
        public Damage? DamageType { get; set; }
        public short? FromNpc { get; set; }
        public short? ToNpc { get; set; }
        public bool? FromIllusion { get; set; }
        public bool? ToIllusion { get; set; }
        public bool? IsPhysicalAttack { get; set; }
        public bool? IsSourceMainHero { get; set; }
        public bool? IsTargetMainHero { get; set; }
    }

    public partial class TowerDamageDetailType
    {
        public int? Time { get; set; }
        public short? Attacker { get; set; }
        public short? NpcId { get; set; }
        public int? Damage { get; set; }
        public short? ByAbility { get; set; }
        public short? ByItem { get; set; }
        public short? FromNpc { get; set; }
    }

    public partial class InventoryType
    {
        public int? Time { get; set; }
        public InventoryObjectType Item0 { get; set; }
        public InventoryObjectType Item1 { get; set; }
        public InventoryObjectType Item2 { get; set; }
        public InventoryObjectType Item3 { get; set; }
        public InventoryObjectType Item4 { get; set; }
        public InventoryObjectType Item5 { get; set; }
        public InventoryObjectType BackPack0 { get; set; }
        public InventoryObjectType BackPack1 { get; set; }
        public InventoryObjectType BackPack2 { get; set; }
        public InventoryObjectType Teleport0 { get; set; }
        public InventoryObjectType Neutral0 { get; set; }
    }

    public partial class InventoryObjectType
    {
        public short? ItemId { get; set; }
        public int? Charges { get; set; }
        public int? SecondaryCharges { get; set; }
    }

    public partial class ItemPurchaseType
    {
        public int? Time { get; set; }
        public short? ItemId { get; set; }
    }

    public partial class BuyBackDetailType
    {
        public int? Time { get; set; }
        public short? HeroId { get; set; }
        public int? DeathTimeRemaining { get; set; }
        public int? Cost { get; set; }
    }

    public partial class StreakEventType
    {
        public int? Time { get; set; }
        public short? HeroId { get; set; }
        public Streak? Type { get; set; }
        public int? Value { get; set; }
    }

    public partial class PlayerRuneDetailType
    {
        public int? Time { get; set; }
        public RuneEnums? Rune { get; set; }
        public RuneAction? Action { get; set; }
        public int? Gold { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
    }

    public partial class SpiritBearInventoryType
    {
        public int? Time { get; set; }
        public SpiritBearInventoryObjectType Item0 { get; set; }
        public SpiritBearInventoryObjectType Item1 { get; set; }
        public SpiritBearInventoryObjectType Item2 { get; set; }
        public SpiritBearInventoryObjectType Item3 { get; set; }
        public SpiritBearInventoryObjectType Item4 { get; set; }
        public SpiritBearInventoryObjectType Item5 { get; set; }
        public SpiritBearInventoryObjectType BackPack0 { get; set; }
        public SpiritBearInventoryObjectType BackPack1 { get; set; }
        public SpiritBearInventoryObjectType BackPack2 { get; set; }
        public SpiritBearInventoryObjectType Teleport0 { get; set; }
        public SpiritBearInventoryObjectType Neutral0 { get; set; }
    }

    public partial class SpiritBearInventoryObjectType
    {
        public short? ItemId { get; set; }
    }

    public partial class HeroPositionTimeDetailType
    {
        public short? HeroId { get; set; }
        public int? Week { get; set; }
        public int? Time { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public long? MatchCount { get; set; }
        public long? RemainingMatchCount { get; set; }
        public long? WinCount { get; set; }
        public double? Mvp { get; set; }
        public double? TopCore { get; set; }
        public double? TopSupport { get; set; }
        public double? CourierKills { get; set; }
        public double? Apm { get; set; }
        public double? Casts { get; set; }
        public double? AbilityCasts { get; set; }
        public double? Kills { get; set; }
        public double? Deaths { get; set; }
        public double? Assists { get; set; }
        public double? Networth { get; set; }
        public double? Xp { get; set; }
        public double? Cs { get; set; }
        public double? Dn { get; set; }
        public double? Neutrals { get; set; }
        public double? HeroDamage { get; set; }
        public double? TowerDamage { get; set; }
        public double? PhysicalDamage { get; set; }
        public double? MagicalDamage { get; set; }
        public double? PhysicalDamageReceived { get; set; }
        public double? MagicalDamageReceived { get; set; }
        public double? TripleKill { get; set; }
        public double? UltraKill { get; set; }
        public double? Rampage { get; set; }
        public double? GodLike { get; set; }
        public double? GoldPerMinute { get; set; }
        public double? DisableCount { get; set; }
        public double? DisableDuration { get; set; }
        public double? StunCount { get; set; }
        public double? StunDuration { get; set; }
        public double? SlowCount { get; set; }
        public double? SlowDuration { get; set; }
        public double? HealingSelf { get; set; }
        public double? HealingAllies { get; set; }
        public double? InvisibleCount { get; set; }
        public double? RunePower { get; set; }
        public double? RuneBounty { get; set; }
        public double? Level { get; set; }
        public double? CampsStacked { get; set; }
        public double? SupportGold { get; set; }
        public double? PurgeModifiers { get; set; }
        public double? Ancients { get; set; }
        public double? TeamKills { get; set; }
        public double? GoldLost { get; set; }
        public double? GoldFed { get; set; }
        public double? BuybackCount { get; set; }
        public double? WeakenCount { get; set; }
        public double? WeakenDuration { get; set; }
        public double? PhysicalItemDamage { get; set; }
        public double? MagicalItemDamage { get; set; }
        public double? HealingItemSelf { get; set; }
        public double? HealingItemAllies { get; set; }
        public double? XpFed { get; set; }
        public double? PureDamageReceived { get; set; }
        public double? AttackDamage { get; set; }
        public double? AttackCount { get; set; }
        public double? CastDamage { get; set; }
        public double? DamageReceived { get; set; }
        public double? Damage { get; set; }
        public double? PureDamage { get; set; }
        public double? KdaAverage { get; set; }
        public double? KillContributionAverage { get; set; }
        public double? StompWon { get; set; }
        public double? StompLost { get; set; }
        public double? ComeBackWon { get; set; }
        public double? ComeBackLost { get; set; }
    }

    public partial class MatchPlayerAdditionalUnitType
    {
        public short? Item0Id { get; set; }
        public short? Item1Id { get; set; }
        public short? Item2Id { get; set; }
        public short? Item3Id { get; set; }
        public short? Item4Id { get; set; }
        public short? Item5Id { get; set; }
        public short? Backpack0Id { get; set; }
        public short? Backpack1Id { get; set; }
        public short? Backpack2Id { get; set; }
        public short? Neutral0Id { get; set; }
    }

    public partial class PlayerAbilityType
    {
        public int? AbilityId { get; set; }
        public int? Time { get; set; }
        public int? Level { get; set; }
        public short? GameVersionId { get; set; }
        public AbilityType AbilityType { get; set; }
        public bool? IsTalent { get; set; }
    }

    public partial class MatchStatsPickBanType
    {
        public bool? IsPick { get; set; }
        public short? HeroId { get; set; }
        public int? Order { get; set; }
        public short? BannedHeroId { get; set; }
        public bool? IsRadiant { get; set; }
        public int? PlayerIndex { get; set; }
        public bool? WasBannedSuccessfully { get; set; }
        public bool? IsCaptain { get; set; }
        public byte? BaseWinRate { get; set; }
        public byte? AdjustedWinRate { get; set; }
        public int? Letter { get; set; }
    }

    public partial class MatchStatsTowerReportType
    {
        public ICollection<MatchStatsTowerReportObjectType> Towers { get; set; }
        public ICollection<MatchStatsOutpostReportObjectType> Outposts { get; set; }
    }

    public partial class MatchStatsTowerReportObjectType
    {
        public int? NpcId { get; set; }
        public int? Hp { get; set; }
    }

    public partial class MatchStatsOutpostReportObjectType
    {
        public int? NpcId { get; set; }
        public bool? IsControlledByRadiant { get; set; }
        public bool? IsRadiantSide { get; set; }
    }

    public partial class MatchStatsLaneReportType
    {
        public ICollection<MatchStatsLaneReportFactionObjectType> Radiant { get; set; }
        public ICollection<MatchStatsLaneReportFactionObjectType> Dire { get; set; }
    }

    public partial class MatchStatsLaneReportFactionObjectType
    {
        public MatchStatsLaneReportFactionLaneObject MidLane { get; set; }
        public MatchStatsLaneReportFactionLaneObject OffLane { get; set; }
        public MatchStatsLaneReportFactionLaneObject SafeLane { get; set; }
    }

    public partial class MatchStatsLaneReportFactionLaneObject
    {
        public int? MeleeCount { get; set; }
        public int? RangeCount { get; set; }
        public int? SiegeCount { get; set; }
        public int? DenyCount { get; set; }
        public int? NeutralCount { get; set; }
    }

    public partial class MatchStatsChatEventType
    {
        public int? Time { get; set; }
        public int? Type { get; set; }
        public short? FromHeroId { get; set; }
        public short? ToHeroId { get; set; }
        public short? Value { get; set; }
        public int? PausedTick { get; set; }
        public bool? IsRadiant { get; set; }
    }

    public partial class MatchStatsTowerDeathType
    {
        public int? Time { get; set; }
        public short? NpcId { get; set; }
        public bool? IsRadiant { get; set; }
        public short? Attacker { get; set; }
    }

    public partial class MatchPlaybackDataType
    {
        public ICollection<MatchPlaybackDataCourierEventType> CourierEvents { get; set; }
        public ICollection<MatchPlaybackDataRuneEventType> RuneEvents { get; set; }
        public ICollection<MatchPlaybackDataWardEventType> WardEvents { get; set; }
        public ICollection<MatchPlaybackDataBuildingEventType> BuildingEvents { get; set; }
        public ICollection<MatchPlaybackDataTowerDeathEventType> TowerDeathEvents { get; set; }
        public ICollection<MatchPlaybackDataRoshanEventType> RoshanEvents { get; set; }
        public long? RadiantCaptainHeroId { get; set; }
        public long? DireCaptainHeroId { get; set; }
    }

    public partial class MatchPlaybackDataCourierEventType
    {
        public int? Id { get; set; }
        public int? OwnerHero { get; set; }
        public bool? IsRadiant { get; set; }
        public ICollection<MatchplaybackDataCourierEventObjectType> Events { get; set; }
    }

    public partial class MatchplaybackDataCourierEventObjectType
    {
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public int? Hp { get; set; }
        public bool? IsFlying { get; set; }
        public int? RespawnTime { get; set; }
        public bool? DidCastBoost { get; set; }
        public int? Item0Id { get; set; }
        public int? Item1Id { get; set; }
        public int? Item2Id { get; set; }
        public int? Item3Id { get; set; }
        public int? Item4Id { get; set; }
        public int? Item5Id { get; set; }
    }

    public partial class MatchPlaybackDataRuneEventType
    {
        public int? IndexId { get; set; }
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public int? Location { get; set; }
        public int? Rune { get; set; }
        public int? Action { get; set; }
    }

    public partial class MatchPlaybackDataWardEventType
    {
        public int? IndexId { get; set; }
        public int? Time { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public int? FromPlayer { get; set; }
        public WardType? WardType { get; set; }
        public SpawnActionType? Action { get; set; }
        public int? PlayerDestroyed { get; set; }
    }

    public partial class MatchPlaybackDataBuildingEventType
    {
        public int? Time { get; set; }
        public int? IndexId { get; set; }
        public BuildingType? Type { get; set; }
        public int? Hp { get; set; }
        public int? MaxHp { get; set; }
        public int? PositionX { get; set; }
        public int? PositionY { get; set; }
        public bool? IsRadiant { get; set; }
        public int? NpcId { get; set; }
        public bool? DidShrineActivate { get; set; }
    }

    public partial class MatchPlaybackDataTowerDeathEventType
    {
        public int? Time { get; set; }
        public int? Radiant { get; set; }
        public int? Dire { get; set; }
    }

    public partial class MatchPlaybackDataRoshanEventType
    {
        public int? Time { get; set; }
        public int? Hp { get; set; }
        public int? MaxHp { get; set; }
        public int? CreateTime { get; set; }
        public int? X { get; set; }
        public int? Y { get; set; }
        public int? TotalDamageTaken { get; set; }
        public int? Item0 { get; set; }
        public int? Item1 { get; set; }
        public int? Item2 { get; set; }
        public int? Item3 { get; set; }
        public int? Item4 { get; set; }
        public int? Item5 { get; set; }
    }

    public partial class MatchPlayerSpectatorType
    {
        public long? SteamId { get; set; }
        public bool? IsRadiantCoach { get; set; }
        public bool? IsVictory { get; set; }
    }

    public partial class YogurtQuery
    {
        public MatchReplayUploadTeamType Team { get; set; }
        public ICollection<MatchReplayUploadTeamType> Teams { get; set; }
        public MatchReplayUploadTeamType DefaultTeam { get; set; }
        public ICollection<MatchReplayUploadTeamMemberType> TeamMembers { get; set; }
        public MatchReplayUploadOverviewType Overview { get; set; }
        public ICollection<MatchReplayUploadHeroSummaryType> HeroSummary { get; set; }
    }

    public partial class MatchReplayUploadTeamType
    {
        public long? Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public int? TeamId { get; set; }
        public Guid? CreatorCaptainJackIdentityId { get; set; }
        public TeamType Team { get; set; }
        public ICollection<MatchReplayUploadTeamMemberType> Members { get; set; }
        public bool? IsDefault { get; set; }
    }

    public partial class MatchReplayUploadTeamMemberType
    {
        public Guid? CaptainJackIdentityId { get; set; }
        public long? MatchUploadTeamId { get; set; }
        public bool? IsAdmin { get; set; }
        public bool? IsDefaultTeam { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class MatchReplayUploadOverviewType
    {
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public ICollection<MatchReplayUploadMatchType> Matches { get; set; }
    }

    public partial class MatchReplayUploadMatchType
    {
        public long? MatchUploadTeamId { get; set; }
        public long? Id { get; set; }
        public string FileName { get; set; }
        public Guid? UploaderCaptainJackIdentityId { get; set; }
        public bool? IsValidated { get; set; }
        public bool? IsComplete { get; set; }
        public bool? IsActive { get; set; }
        public bool? DidRadiantWin { get; set; }
        public short? DurationSeconds { get; set; }
        public int? DurationMinutes { get; set; }
        public DateTime? StartDateTime { get; set; }
        public DateTime? EndDateTime { get; set; }
        public byte? LobbyType { get; set; }
        public byte? NumHumanPlayers { get; set; }
        public byte? NumHumanSpectators { get; set; }
        public int? LeagueId { get; set; }
        public long? SeriesId { get; set; }
        public byte? GameMode { get; set; }
        public int? RadiantTeamId { get; set; }
        public byte? RadiantKills { get; set; }
        public int? DireTeamId { get; set; }
        public byte? DireKills { get; set; }
        public bool? IsRadiantFirstPick { get; set; }
        public int? GameVersionId { get; set; }
        public string Notes { get; set; }
        public ICollection<MatchReplayUploadPlayerType> Players { get; set; }
        public ICollection<long> Spectators { get; set; }
        public ICollection<MatchReplayUploadPickBanType> PickBans { get; set; }
        public TeamType RadiantTeam { get; set; }
        public TeamType DireTeam { get; set; }
        public LeagueType League { get; set; }
    }

    public partial class MatchReplayUploadPlayerType
    {
        public long? MatchId { get; set; }
        public byte? PlayerSlot { get; set; }
        public long? MatchUploadTeamId { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public bool? IsRadiant { get; set; }
        public bool? IsDire { get; set; }
        public byte? TeamSlot { get; set; }
        public short? HeroId { get; set; }
        public byte? Kills { get; set; }
        public byte? Deaths { get; set; }
        public byte? Assists { get; set; }
        public int? Networth { get; set; }
        public short? LastHits { get; set; }
        public short? Denies { get; set; }
        public short? GoldPerMinute { get; set; }
        public short? ExperiencePerMinute { get; set; }
        public int? TotalGoldSpent { get; set; }
        public int? GoldSpentOnBuybacks { get; set; }
        public int? GoldSpentOnConsumables { get; set; }
        public int? GoldSpentOnItems { get; set; }
        public int? GoldSpentOnSupport { get; set; }
        public int? HeroDamage { get; set; }
        public int? TowerDamage { get; set; }
        public short? TowerKills { get; set; }
        public int? HeroHealing { get; set; }
        public byte? Level { get; set; }
        public short? Item0Id { get; set; }
        public short? Item1Id { get; set; }
        public short? Item2Id { get; set; }
        public short? Item3Id { get; set; }
        public short? Item4Id { get; set; }
        public short? Item5Id { get; set; }
        public short? Backpack0Id { get; set; }
        public short? Backpack1Id { get; set; }
        public short? Backpack2Id { get; set; }
        public MatchLaneType? Lane { get; set; }
        public MatchPlayerRoleType? Role { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public byte? PickOrder { get; set; }
        public MatchPlayerTeamPickOrderType? TeamPickOrder { get; set; }
        public bool? IsVictory { get; set; }
        public ICollection<int> KillsList { get; set; }
        public ICollection<int> AssistsList { get; set; }
        public ICollection<int> DeathsList { get; set; }
        public ICollection<int> StreakList { get; set; }
        public ICollection<int> LevelList { get; set; }
        public ICollection<int> TotalEarnedGoldList { get; set; }
        public ICollection<int> ReliableGoldList { get; set; }
        public ICollection<int> UnreliableGoldList { get; set; }
        public ICollection<int> TotalEarnedXpList { get; set; }
        public ICollection<int> SharedGoldList { get; set; }
        public ICollection<int> HeroKillGoldList { get; set; }
        public ICollection<int> CreepKillGoldList { get; set; }
        public ICollection<int> IncomeGoldList { get; set; }
        public ICollection<int> NetworthList { get; set; }
        public ICollection<int> DenyCountList { get; set; }
        public ICollection<int> LastHitCountList { get; set; }
        public ICollection<int> LastHitStreakList { get; set; }
        public ICollection<int> LastHitMultiKillList { get; set; }
        public ICollection<int> NearbyCreepDeathCountList { get; set; }
        public ICollection<int> ClaimedDenyCountList { get; set; }
        public ICollection<int> ClaimedMissCountList { get; set; }
        public ICollection<int> MissCountList { get; set; }
        public ICollection<int> StunsList { get; set; }
        public ICollection<int> HeroHealingList { get; set; }
        public ICollection<int> TowerKillsList { get; set; }
        public ICollection<int> RoshanKillsList { get; set; }
        public ICollection<int> ObserverWardsPlacedList { get; set; }
        public ICollection<int> SentryWardsPlacedList { get; set; }
        public ICollection<int> CreepStackList { get; set; }
        public ICollection<int> CampStackList { get; set; }
        public ICollection<int> RunePicksupList { get; set; }
        public ICollection<int> GoldSpentOnSupportList { get; set; }
        public ICollection<int> HeroDamageList { get; set; }
        public ICollection<int> WardsPurchasedList { get; set; }
        public ICollection<int> WardsDestroyedList { get; set; }
        public ICollection<int> CommandsIssuedList { get; set; }
        public ICollection<int> GoldSpentOnConsumablesList { get; set; }
        public ICollection<int> GoldSpentOnItemsList { get; set; }
        public ICollection<int> GoldSpentOnBuybacksList { get; set; }
        public ICollection<int> GoldLostToDeathList { get; set; }
        public ICollection<int> MaxHealthList { get; set; }
        public ICollection<int> MaxManaList { get; set; }
        public ICollection<int> BkbChargesUsedList { get; set; }
        public ICollection<int> DamageMinList { get; set; }
        public ICollection<int> DamageMaxList { get; set; }
        public ICollection<int> DamageBonusList { get; set; }
        public ICollection<int> StrengthTotalList { get; set; }
        public ICollection<int> AgilityTotalList { get; set; }
        public ICollection<int> IntellectTotalList { get; set; }
        public ICollection<int> TowerDamageList { get; set; }
        public MatchReplayUploadPlayerStatsItemsType Items { get; set; }
    }

    public partial class MatchReplayUploadPlayerStatsItemsType
    {
        public ICollection<byte> Item0IdList { get; set; }
        public ICollection<byte> Item1IdList { get; set; }
        public ICollection<byte> Item2IdList { get; set; }
        public ICollection<byte> Item3IdList { get; set; }
        public ICollection<byte> Item4IdList { get; set; }
        public ICollection<byte> Item5IdList { get; set; }
        public ICollection<byte> Backpack0IdList { get; set; }
        public ICollection<byte> Backpack1IdList { get; set; }
        public ICollection<byte> Backpack2IdList { get; set; }
    }

    public partial class MatchReplayUploadPickBanType
    {
        public byte? PlayerSlot { get; set; }
        public bool? IsPick { get; set; }
        public short? HeroId { get; set; }
        public short? BannedHeroId { get; set; }
        public byte? Time { get; set; }
        public bool? IsRadiant { get; set; }
        public byte? Order { get; set; }
        public bool? WasBannedSuccessfully { get; set; }
    }

    public partial class MatchReplayUploadHeroSummaryType
    {
        public short? HeroId { get; set; }
        public int? WinCountWith { get; set; }
        public int? WinCountAgainst { get; set; }
        public int? MatchCountWith { get; set; }
        public int? MatchCountAgainst { get; set; }
        public int? BanCountWith { get; set; }
        public int? BanCountAgainst { get; set; }
        public ICollection<MatchReplayUploadHeroDuoSummaryType> Duos { get; set; }
    }

    public partial class MatchReplayUploadHeroDuoSummaryType
    {
        public short? HeroId { get; set; }
        public int? WinCountWith { get; set; }
        public int? WinCountAgainst { get; set; }
        public int? MatchCountWith { get; set; }
        public int? MatchCountAgainst { get; set; }
    }

    public partial class PlusQuery
    {
        public PlusDraftType Draft { get; set; }
        public PlusHoverType PlayerMatchHistory { get; set; }
        public PlayerDraftHeroHighlightType PlayerHeroHighlight { get; set; }
        public ICollection<PlusHeroTeamStatusDetailType> TeamHeroStatus { get; set; }
        public PlusLetterType? DraftMissingLetter { get; set; }
    }

    public partial class PlusDraftType
    {
        public double? MidOutcome { get; set; }
        public double? SafeOutcome { get; set; }
        public double? OffOutcome { get; set; }
        public ICollection<double> WinValues { get; set; }
        public ICollection<double> DurationValues { get; set; }
        public ICollection<PlusDraftPlayerType> Players { get; set; }
    }

    public partial class PlusDraftPlayerType
    {
        public byte? Slot { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public ICollection<double> PositionValues { get; set; }
        public ICollection<PlusDraftPlayerHeroObjectType> Heroes { get; set; }
    }

    public partial class PlusDraftPlayerHeroObjectType
    {
        public short? HeroId { get; set; }
        public double? PickValue { get; set; }
        public ICollection<double> WinValues { get; set; }
        public decimal? Score { get; set; }
        public PlusLetterType? Letter { get; set; }
    }

    public partial class PlusHoverType
    {
        public ICollection<PlusPlayerHoverType> Players { get; set; }
        public ICollection<PlusHoverBanType> Bans { get; set; }
    }

    public partial class PlusPlayerHoverType
    {
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? CoreCount { get; set; }
        public int? SupportCount { get; set; }
        public int? Imp { get; set; }
        public ICollection<PlusPlayerHoverHeroType> Heroes { get; set; }
        public byte? Activity { get; set; }
        public ICollection<string> LanguageCode { get; set; }
        public ICollection<PlusPlayerHoverPlayerType> Friends { get; set; }
        public ICollection<PlusPlayerHoverPlayerType> Enemies { get; set; }
        public long? LastMatchDateTime { get; set; }
        public ICollection<short> HeroesExperience { get; set; }
        public short? BehaviorScore { get; set; }
    }

    public partial class PlusPlayerHoverHeroType
    {
        public short? HeroId { get; set; }
        public int? WinCount { get; set; }
        public int? LossCount { get; set; }
    }

    public partial class PlusPlayerHoverPlayerType
    {
        public long? SteamAccountId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public long? LastMatchDateTime { get; set; }
    }

    public partial class PlusHoverBanType
    {
        public short? HeroId { get; set; }
        public double? Score { get; set; }
        public byte? Flags { get; set; }
    }

    public partial class PlayerDraftHeroHighlightType
    {
        public long? LastPlayed { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
        public int? ImpAllTime { get; set; }
        public int? MvpCountLastMonth { get; set; }
        public int? TopCoreCountLastMonth { get; set; }
        public int? TopSupportCountLastMonth { get; set; }
        public int? WinCountLastMonth { get; set; }
        public int? MatchCountLastMonth { get; set; }
        public int? ImpLastMonth { get; set; }
        public int? WinCountLastSixMonths { get; set; }
        public int? MatchCountLastSixMonths { get; set; }
        public int? ImpLastSixMonths { get; set; }
    }

    public partial class PlusHeroTeamStatusDetailType
    {
        public int? HeroId { get; set; }
        public RankBracketBasicEnum? BasicBracket { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public PlusHeroTeamStatusAveragesType Averages { get; set; }
    }

    public partial class PlusHeroTeamStatusAveragesType
    {
        public double? Cs { get; set; }
        public double? Deaths { get; set; }
        public double? TowerDamage { get; set; }
        public double? PhysicalDamage { get; set; }
        public double? MagicalDamage { get; set; }
        public double? PhysicalDamageReceived { get; set; }
        public double? MagicalDamageReceived { get; set; }
        public double? DisableCount { get; set; }
        public double? DisableDuration { get; set; }
        public double? StunCount { get; set; }
        public double? StunDuration { get; set; }
        public double? SlowCount { get; set; }
        public double? SlowDuration { get; set; }
        public double? HealingAllies { get; set; }
        public double? PurgeModifiers { get; set; }
        public double? WeakenCount { get; set; }
        public double? WeakenDuration { get; set; }
        public double? PureDamageReceived { get; set; }
        public double? PureDamage { get; set; }
    }

    public partial class StratzQuery
    {
        public AdminQuery Admin { get; set; }
        public UserQuery User { get; set; }
        public PageQuery Page { get; set; }
        public ICollection<BlogType> Blogs { get; set; }
        public ICollection<NewsItemType> News { get; set; }
        public ICollection<int> Ticker { get; set; }
        public ServerStatusType Status { get; set; }
        public ICollection<LanguageType> Languages { get; set; }
        public bool? MatchRetry { get; set; }
        public SearchType Search { get; set; }
    }

    public partial class AdminQuery
    {
        public ICollection<string> ApiMemoryReport { get; set; }
    }

    public partial class UserQuery
    {
        public UserType Profile { get; set; }
        public UserHomepageType Homepage { get; set; }
        public ICollection<FollowerType> Followers { get; set; }
        public ICollection<FollowerType> Following { get; set; }
        public FeedResponseType Feed { get; set; }
    }

    public partial class UserType
    {
        public CaptainJackIdentityPrivateProfileType Profile { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public MatchType RecentMatch { get; set; }
        public int? FollowingCount { get; set; }
        public int? FollowerCount { get; set; }
        public int? FollowingLeagueCount { get; set; }
        public int? FollowingTeamCount { get; set; }
        public ICollection<CaptainJackIdentityApiApplicationType> StratzApiApplications { get; set; }
    }

    public partial class CaptainJackIdentityPrivateProfileType
    {
        public Guid? CaptainJackIdentityId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Twitter { get; set; }
        public string Facebook { get; set; }
        public string Twitch { get; set; }
        public string YouTube { get; set; }
        public long? PremiumEndDate { get; set; }
        public bool? IsAdmin { get; set; }
        public byte? FeedLevel { get; set; }
        public byte? EmailLevel { get; set; }
        public bool? DailyEmail { get; set; }
        public bool? WeeklyEmail { get; set; }
        public bool? MonthlyEmail { get; set; }
        public byte? ProCircuitFeedLevel { get; set; }
        public byte? ProCircuitEmailLevel { get; set; }
        public byte? ThemeType { get; set; }
        public byte? LanguageId { get; set; }
        public string EmailValidationCode { get; set; }
        public bool? IsEmailValidated { get; set; }
        public byte? EmailHour { get; set; }
        public long? LastReadFeedTime { get; set; }
        public long? LastDailyEmail { get; set; }
        public long? LastWeeklyEmail { get; set; }
        public long? LastMonthlyEmail { get; set; }
        public long? LastLeagueDailyEmail { get; set; }
        public long? LastTeamDailyEmail { get; set; }
        public long? LastProCircuitDailyEmail { get; set; }
        public string UnsubscribeCode { get; set; }
        public long? LastSeen { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public ICollection<RoshCaptainJackIdentityStatDifficultyType> Rosh { get; set; }
    }

    public partial class RoshCaptainJackIdentityStatDifficultyType
    {
        public RoshDifficultyEnum? Difficulty { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public decimal? MaxScore { get; set; }
    }

    public partial class CaptainJackIdentityApiApplicationType
    {
        public Guid? CaptainJackIdentityId { get; set; }
        public StratzApiType? TokenType { get; set; }
        public string EmailAddress { get; set; }
        public string DiscordAddress { get; set; }
        public string WebsiteAddress { get; set; }
        public string Description { get; set; }
        public bool? IsApproved { get; set; }
        public string ApiKey { get; set; }
        public string SecretKey { get; set; }
        public string Issuer { get; set; }
        public string MatomoReferenceToken { get; set; }
    }

    public partial class UserHomepageType
    {
        public ICollection<BlogType> Blogs { get; set; }
        public ICollection<LeagueType> UpcomingLeagues { get; set; }
        public ICollection<LeagueType> InProgressLeagues { get; set; }
        public ICollection<LeagueMetaType> LeagueMetas { get; set; }
        public ICollection<ProPlayerFollowType> TopProPlayers { get; set; }
        public ICollection<TopPlayersByHeroType> TopPlayersByHeroType { get; set; }
        public ICollection<HomepageHeroSynergyType> TopSynergiesByHero { get; set; }
        public ICollection<HomepageHeroSynergyType> MatchAwards { get; set; }
        public ICollection<HomepageHeroSynergyType> RecentRampages { get; set; }
        public ICollection<HomepageHeroSynergyType> RecentWinStreaks { get; set; }
        public ICollection<HomepageHeroSynergyType> RecentHighImps { get; set; }
        public ICollection<HomepageHeroSynergyType> RecentMatches { get; set; }
        public ICollection<HomepageHeroSynergyType> ActiveLeagueGames { get; set; }
        public ICollection<HomepageHeroSynergyType> TopLiveGames { get; set; }
        public int? TotalComponents { get; set; }
    }

    public partial class BlogType
    {
        public byte? Id { get; set; }
        public Guid? CaptainJackIdentityId { get; set; }
        public string Title { get; set; }
        public string BannerImageUrl { get; set; }
        public string Data { get; set; }
        public DateTime? LiveDateTime { get; set; }
        public string Link { get; set; }
    }

    public partial class LeagueMetaType
    {
        public int? LeagueId { get; set; }
        public LeagueMetaDetailType BestRecord { get; set; }
        public LeagueMetaDetailType MostPicked { get; set; }
        public LeagueMetaDetailType MostBanned { get; set; }
        public int? MissingMatchCount { get; set; }
        public int? TotalMatchCount { get; set; }
        public LeagueType League { get; set; }
    }

    public partial class LeagueMetaDetailType
    {
        public short? HeroId { get; set; }
        public int? WinCount { get; set; }
        public int? LossCount { get; set; }
        public double? WinRate { get; set; }
        public double? PickRate { get; set; }
        public int? PickCount { get; set; }
        public double? BanRate { get; set; }
        public int? BanCount { get; set; }
    }

    public partial class ProPlayerFollowType
    {
        public long? SteamAccountId { get; set; }
        public int? Activity { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class TopPlayersByHeroType
    {
        public short? HeroId { get; set; }
        public ICollection<PlayerLeaderBoardByHeroType> Players { get; set; }
    }

    public partial class PlayerLeaderBoardByHeroType
    {
        public short? HeroId { get; set; }
        public byte? SeasonBracket { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public byte? ImpAverage { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public byte? Wins { get; set; }
        public byte? Losses { get; set; }
        public byte? WinStreak { get; set; }
        public byte? RegionId { get; set; }
        public short? ChangeInRanking { get; set; }
        public long? CreatedDateTime { get; set; }
    }

    public partial class HomepageHeroSynergyType
    {
        public short? MainHeroId { get; set; }
        public double? MainHeroBaseWinRate { get; set; }
        public ICollection<HomepageHeroDryadType> HeroDryads { get; set; }
    }

    public partial class HomepageHeroDryadType
    {
        public short? MainHeroId { get; set; }
        public short? ComparisonHeroId { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
        public double? Synergy { get; set; }
        public double? WinsAverage { get; set; }
        public double? ComparisonHeroBaseWinRate { get; set; }
    }

    public partial class FollowerType
    {
        public Guid? CaptainJackIdentityId { get; set; }
        public CaptainJackIdentityPublicProfileType CaptainJackIdentityProfile { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public byte? FeedLevel { get; set; }
        public byte? EmailLevel { get; set; }
        public bool? DailyEmail { get; set; }
        public bool? WeeklyEmail { get; set; }
        public bool? MonthlyEmail { get; set; }
        public bool? IsFavorite { get; set; }
        public long? LastEmail { get; set; }
        public bool? DidManualUpdate { get; set; }
    }

    public partial class FeedResponseType
    {
        public ICollection<FeedType> Data { get; set; }
        public int? Count { get; set; }
        public DateTime? AttackAnimationPoint { get; set; }
    }

    public partial class FeedType
    {
        public SteamAccountType SteamAccount { get; set; }
        public LeagueType League { get; set; }
        public long? TargetSteamAccountId { get; set; }
        public byte? Type { get; set; }
        public long? MatchId { get; set; }
        public int? HeroId { get; set; }
        public long? Date { get; set; }
        public int? Value { get; set; }
        public bool? DidWin { get; set; }
    }

    public partial class PageQuery
    {
        public PagePlayerQuery Player { get; set; }
        public PagePlayersQuery Players { get; set; }
        public PageMatchesQuery Matches { get; set; }
        public PageLeaguesQuery Leagues { get; set; }
        public PageAghanimQuery Aghanim { get; set; }
        public ImpQuery Imp { get; set; }
        public PageDireTideQuery DireTide { get; set; }
        public PageBattlepassQuery BattlePass { get; set; }
        public RoshQuery Rosh { get; set; }
    }

    public partial class PagePlayerQuery
    {
        public PlayerConductResponseType Conduct { get; set; }
        public PlayerCardHoverType SimpleSummary { get; set; }
        public PlayerPerformanceType Performance { get; set; }
        public PlayerPerformanceType HeroPerformance { get; set; }
        public ICollection<PlayerHeroesPerformanceType> HeroesPerformance { get; set; }
        public PlayerPlayedWithProType PlayedWithPro { get; set; }
        public PlayerBreakdownType Breakdown { get; set; }
        public ICollection<PlayerTeammateType> Peers { get; set; }
    }

    public partial class PlayerConductResponseType
    {
        public long? LastIncidentDateTime { get; set; }
        public long? LastIncidentMatchId { get; set; }
        public ICollection<short> RecentMatchIncidents { get; set; }
        public short? BehaviorScore { get; set; }
    }

    public partial class PlayerPlayedWithProType
    {
        public int? PlayedCount { get; set; }
        public int? TotalCount { get; set; }
        public ICollection<PlayerPlayedWithProPlayerType> Casters { get; set; }
        public ICollection<PlayerPlayedWithProTeamType> Teams { get; set; }
        public ICollection<PlayerPlayedWithProTeamType> InternationalWinners { get; set; }
    }

    public partial class PlayerPlayedWithProPlayerType
    {
        public long? SteamId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public PlayerPlayedWithProPlayerMatchType With { get; set; }
        public PlayerPlayedWithProPlayerMatchType Vs { get; set; }
    }

    public partial class PlayerPlayedWithProPlayerMatchType
    {
        public long? MatchId { get; set; }
        public MatchType Match { get; set; }
    }

    public partial class PlayerPlayedWithProTeamType
    {
        public int? TeamId { get; set; }
        public string TeamLogo { get; set; }
        public string TeamName { get; set; }
        public ICollection<PlayerPlayedWithProPlayerType> Players { get; set; }
    }

    public partial class PlayerBreakdownType
    {
        public PlayerBreakdownObjectType Matches { get; set; }
        public ICollection<PlayerBreakdownObjectType> IsStatsMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> RankMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> LobbyMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> GameModeMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> FactionMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> RegionMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> LaneMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> RoleMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> PartyMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> ImpMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> DurationMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> HeroAttributeMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> DayOfWeekMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> TimeOfDayMatches { get; set; }
        public ICollection<PlayerBreakdownObjectType> WeekEndMatches { get; set; }
    }

    public partial class PlayerBreakdownObjectType
    {
        public int? Id { get; set; }
        public int? MatchCount { get; set; }
        public int? Win { get; set; }
        public int? Imp { get; set; }
        public long? LastSeenDateTime { get; set; }
    }

    public partial class PlayerTeammateType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? AvgImp { get; set; }
        public int? AvgGoldPerMinute { get; set; }
        public int? AvgExperiencePerMinute { get; set; }
        public decimal? AvgKda { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
        public long? LastMatchDateTime { get; set; }
        public long? FirstMatchDateTime { get; set; }
    }

    public partial class PagePlayersQuery
    {
        public ICollection<SteamAccountByRankType> SteamAccountByRank { get; set; }
    }

    public partial class SteamAccountByRankType
    {
        public short? Rank { get; set; }
        public int? PlayerCount { get; set; }
    }

    public partial class PageMatchesQuery
    {
        public ICollection<MatchesHourType> MatchesStatsHour { get; set; }
        public ICollection<MatchesDayType> MatchesStatsDay { get; set; }
        public ICollection<MatchesWeekType> MatchesStatsWeek { get; set; }
        public ICollection<MatchesMonthType> MatchesStatsMonth { get; set; }
        public ICollection<MatchesGameVersionType> MatchesStatsGameVersion { get; set; }
        public ICollection<MatchmakingStatsType> MatchmakingStats { get; set; }
    }

    public partial class MatchesHourType
    {
        public long? Hour { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class MatchesDayType
    {
        public long? Day { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class MatchesWeekType
    {
        public long? Week { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class MatchesMonthType
    {
        public long? Month { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class MatchesGameVersionType
    {
        public short? GameVersionId { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class MatchmakingStatsType
    {
        public long? Time { get; set; }
        public int? UsWest { get; set; }
        public int? UsEast { get; set; }
        public int? Europe { get; set; }
        public int? Singapore { get; set; }
        public int? Brazil { get; set; }
        public int? Stockholm { get; set; }
        public int? Austria { get; set; }
        public int? Australia { get; set; }
        public int? SouthAfrica { get; set; }
        public int? PerfectWorldTelecom { get; set; }
        public int? PerfectWorldUnicom { get; set; }
        public int? Dubai { get; set; }
        public int? Chile { get; set; }
        public int? Peru { get; set; }
        public int? India { get; set; }
        public int? PerfectWorldTelecomGuangdong { get; set; }
        public int? PerfectWorldTelecomZhejiang { get; set; }
        public int? Japan { get; set; }
        public int? PerfectWorldTelecomWuhan { get; set; }
        public int? Taiwan { get; set; }
        public int? PerfectWorldUnicomTianjin { get; set; }
    }

    public partial class PageLeaguesQuery
    {
        public ICollection<LeagueDpcPositionStatObjectType> DpcPositionStats { get; set; }
    }

    public partial class LeagueDpcPositionStatObjectType
    {
        public MatchPlayerPositionType? Position { get; set; }
        public int? MatchCount { get; set; }
        public decimal? AvgKills { get; set; }
        public decimal? AvgDeaths { get; set; }
        public decimal? AvgAssists { get; set; }
    }

    public partial class PageAghanimQuery
    {
        public AghanimLabMatchType Match { get; set; }
        public ICollection<AghanimLabMatchType> Matches { get; set; }
        public ICollection<AghanimLabHeroCompositionType> HeroCompositions { get; set; }
        public AghanimLabHeroCompositionType HeroComposition { get; set; }
        public AghanimLabHeroWinRateType WinRate { get; set; }
        public ICollection<AghanimLabHeroAbilityType> HeroAbility { get; set; }
        public ICollection<AghanimLabRoomType> Room { get; set; }
        public ICollection<Ti2020CustomGameRoomModifierType> RoomModifier { get; set; }
    }

    public partial class AghanimLabMatchType
    {
        public long? Id { get; set; }
        public bool? DidWin { get; set; }
        public short? DurationSeconds { get; set; }
        public long? StartDateTime { get; set; }
        public long? EndDateTime { get; set; }
        public short? ClusterId { get; set; }
        public byte? LobbyType { get; set; }
        public short? NumKills { get; set; }
        public short? NumDeaths { get; set; }
        public byte? NumHumanPlayers { get; set; }
        public byte? GameMode { get; set; }
        public long? ReplaySalt { get; set; }
        public AghanimLabMatchDifficultyEnum? Difficulty { get; set; }
        public byte? Depth { get; set; }
        public int? Seed { get; set; }
        public short? BattlePoints { get; set; }
        public int? Score { get; set; }
        public short? ArcaneFragments { get; set; }
        public short? GoldBags { get; set; }
        public byte? RegionId { get; set; }
        public ICollection<AghanimLabPlayerSeasonOneType> Players { get; set; }
        public ICollection<AghanimLabMatchDepthListType> DepthList { get; set; }
    }

    public partial class AghanimLabPlayerSeasonOneType
    {
        public long? MatchId { get; set; }
        public byte? PlayerSlot { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public bool? IsVictory { get; set; }
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public long? Deaths { get; set; }
        public byte? LeaverStatus { get; set; }
        public short? NumLastHits { get; set; }
        public short? GoldPerMinute { get; set; }
        public int? Networth { get; set; }
        public short? ExperiencePerMinute { get; set; }
        public byte? Level { get; set; }
        public int? GoldSpent { get; set; }
        public byte? PartyId { get; set; }
        public short? Item0Id { get; set; }
        public short? Item1Id { get; set; }
        public short? Item2Id { get; set; }
        public short? Item3Id { get; set; }
        public short? Item4Id { get; set; }
        public short? Item5Id { get; set; }
        public long? Neutral0Id { get; set; }
        public short? ArcaneFragments { get; set; }
        public short? BonusArcaneFragments { get; set; }
        public short? GoldBags { get; set; }
        public short? NeutralItemId { get; set; }
        public ICollection<AghanimLabPlayerDepthListType> PlayerDepthList { get; set; }
        public ICollection<AghanimLabPlayerBlessingObjectType> Blessings { get; set; }
    }

    public partial class AghanimLabPlayerDepthListType
    {
        public short? NumDeaths { get; set; }
        public short? GoldBags { get; set; }
        public short? Kills { get; set; }
        public byte? Level { get; set; }
        public int? Networth { get; set; }
        public byte? Rarity { get; set; }
        public short? SelectedRewardAbilityId { get; set; }
        public AbilityCustomGameType SelectedRewardAbility { get; set; }
        public short? UnSelectedRewardAbilityId1 { get; set; }
        public AbilityCustomGameType UnSelectedRewardAbility1 { get; set; }
        public short? UnSelectedRewardAbilityId2 { get; set; }
        public AbilityCustomGameType UnSelectedRewardAbility2 { get; set; }
        public short? SelectedRewardImageAbilityId { get; set; }
    }

    public partial class AbilityCustomGameType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public string AbilityName { get; set; }
        public AbilityCustomGameLanguageType Language { get; set; }
    }

    public partial class AbilityCustomGameLanguageType
    {
        public string DisplayName { get; set; }
        public string Description { get; set; }
    }

    public partial class AghanimLabPlayerBlessingObjectType
    {
        public AghanimLabPlayerBlessingEnum? Type { get; set; }
        public short? Value { get; set; }
    }

    public partial class AghanimLabMatchDepthListType
    {
        public bool? SelectedElite { get; set; }
        public AghanimLabDepthListEncounterEnum? SelectedEncounter { get; set; }
        public byte? SelectedEncounterEnum { get; set; }
        public bool? SelectedHidden { get; set; }
        public AghanimLabDepthListRewardEnum? SelectedReward { get; set; }
        public bool? UnselectedElite { get; set; }
        public AghanimLabDepthListEncounterEnum? UnselectedEncounter { get; set; }
        public bool? UnselectedHidden { get; set; }
        public AghanimLabDepthListRewardEnum? UnselectedReward { get; set; }
        public ICollection<AghanimLabDepthListAscensionAbilitiesObjectType> AscensionAbilities { get; set; }
    }

    public partial class AghanimLabDepthListAscensionAbilitiesObjectType
    {
        public AghanimLabDepthListAscensionAbilitiesEnum? Type { get; set; }
        public short? AbilityId { get; set; }
        public short? ModifierId { get; set; }
    }

    public partial class AghanimLabHeroCompositionType
    {
        public AghanimLabMatchDifficultyEnum? Difficulty { get; set; }
        public short? HeroId1 { get; set; }
        public short? HeroId2 { get; set; }
        public short? HeroId3 { get; set; }
        public short? HeroId4 { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? Duration { get; set; }
        public double? WilsonScore { get; set; }
    }

    public partial class AghanimLabHeroWinRateType
    {
        public AghanimLabMatchDifficultyEnum? Difficulty { get; set; }
        public short? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
    }

    public partial class AghanimLabHeroAbilityType
    {
        public AghanimLabMatchDifficultyEnum? Difficulty { get; set; }
        public short? HeroId { get; set; }
        public short? CustomAbilityId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? PickCount { get; set; }
    }

    public partial class AghanimLabRoomType
    {
        public AghanimLabMatchDifficultyEnum? Difficulty { get; set; }
        public AghanimLabDepthListEncounterEnum? EncounterId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? PickCount { get; set; }
        public int? DeathCount { get; set; }
        public int? EliteMatchCount { get; set; }
        public int? EliteWinCount { get; set; }
        public int? ElitePickCount { get; set; }
        public int? EliteDeathCount { get; set; }
    }

    public partial class Ti2020CustomGameRoomModifierType
    {
        public AghanimLabMatchDifficultyEnum? Difficulty { get; set; }
        public short? ModifierId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public int? DeathCount { get; set; }
        public int? EliteMatchCount { get; set; }
        public int? EliteWinCount { get; set; }
        public int? EliteDeathCount { get; set; }
    }

    public partial class ImpQuery
    {
        public ImpGeneratorMatchPlayerType MatchGenerator { get; set; }
        public ImpGeneratorPlayerType PlayerGenerator { get; set; }
    }

    public partial class ImpGeneratorMatchPlayerType
    {
        public ICollection<decimal> WinChance { get; set; }
        public ICollection<ICollection<decimal>> WinRateByPlayerMinuteValues { get; set; }
        public ICollection<ICollection<ImpGeneratorPlayerEventType>> Events { get; set; }
        public ICollection<ICollection<int>> ImpValues { get; set; }
    }

    public partial class ImpGeneratorPlayerEventType
    {
        public byte? Time { get; set; }
        public ushort? Kills { get; set; }
        public ushort? Deaths { get; set; }
        public ushort? Assists { get; set; }
        public ushort? Cs { get; set; }
        public ushort? Dn { get; set; }
        public byte? Level { get; set; }
        public int? PhysicalDamage { get; set; }
        public int? MagicalDamage { get; set; }
        public int? PureDamage { get; set; }
        public int? DamageReceived { get; set; }
        public int? HealingAllies { get; set; }
        public int? RunePower { get; set; }
        public int? Neutrals { get; set; }
    }

    public partial class ImpGeneratorPlayerType
    {
        public ICollection<decimal> WinChance { get; set; }
        public ICollection<ICollection<decimal>> WinRateByPlayerMinuteValues { get; set; }
        public ICollection<ImpGeneratorPlayerEventType> Events { get; set; }
        public ICollection<ICollection<int>> ImpValues { get; set; }
    }

    public partial class PageDireTideQuery
    {
        public DireTideCustomGameMatchType Match { get; set; }
        public ICollection<DireTideCustomGameMatchType> Matches { get; set; }
        public ICollection<DireTideCustomGameHeroWinDayType> WinDay { get; set; }
    }

    public partial class DireTideCustomGameMatchType
    {
        public long? Id { get; set; }
        public bool? DidRadiantWin { get; set; }
        public short? DurationSeconds { get; set; }
        public long? StartDateTime { get; set; }
        public long? EndDateTime { get; set; }
        public short? ClusterId { get; set; }
        public long? ReplaySalt { get; set; }
        public short? CandyLost { get; set; }
        public short? CandyPickedUp { get; set; }
        public short? CandyScored { get; set; }
        public short? RadiantCandyScored { get; set; }
        public short? DireCandyScored { get; set; }
        public ICollection<DireTideCustomGamePlayerType> Players { get; set; }
    }

    public partial class DireTideCustomGamePlayerType
    {
        public long? MatchId { get; set; }
        public byte? PlayerSlot { get; set; }
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public bool? IsVictory { get; set; }
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public byte? Kills { get; set; }
        public byte? Deaths { get; set; }
        public byte? Assists { get; set; }
        public byte? LeaverStatus { get; set; }
        public short? NumLastHits { get; set; }
        public short? GoldPerMinute { get; set; }
        public int? GoldSpent { get; set; }
        public byte? Level { get; set; }
        public int? HeroDamage { get; set; }
        public int? HeroHealing { get; set; }
        public int? Networth { get; set; }
        public short? Item0Id { get; set; }
        public short? Item1Id { get; set; }
        public short? Item2Id { get; set; }
        public short? Item3Id { get; set; }
        public short? Item4Id { get; set; }
        public short? Item5Id { get; set; }
        public short? Backpack0Id { get; set; }
        public short? Backpack1Id { get; set; }
        public short? Backpack2Id { get; set; }
        public short? Neutral0Id { get; set; }
        public byte? PartyId { get; set; }
        public short? CandyLost { get; set; }
        public short? CandyPickedUp { get; set; }
        public short? CandyScored { get; set; }
    }

    public partial class DireTideCustomGameHeroWinDayType
    {
        public long? Day { get; set; }
        public short? HeroId { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
        public int? CandyScored { get; set; }
    }

    public partial class PageBattlepassQuery
    {
        public ICollection<BattlepassPredictionHeroType> PredictionsHero { get; set; }
        public ICollection<BattlepassPredictionTeamType> PredictionsTeams { get; set; }
        public ICollection<BattlepassPredictionPlayerType> PredictionsPlayers { get; set; }
        public BattlepassPredictionTournamentType PredictionsTournament { get; set; }
    }

    public partial class BattlepassPredictionHeroType
    {
        public short? HeroId { get; set; }
        public HeroType Hero { get; set; }
        public int? MatchCount { get; set; }
        public int? MatchCountBanned { get; set; }
        public decimal? WinRate { get; set; }
        public decimal? KillAvg { get; set; }
        public decimal? AssistAvg { get; set; }
        public decimal? DeathAvg { get; set; }
        public decimal? LastHitAvg { get; set; }
        public decimal? ExperiencePerMinuteAvg { get; set; }
        public int? MostKills { get; set; }
        public int? MostDeaths { get; set; }
        public int? MostAssists { get; set; }
        public int? MostLastHits { get; set; }
    }

    public partial class BattlepassPredictionTeamType
    {
        public int? TeamId { get; set; }
        public TeamType Team { get; set; }
        public int? MatchCount { get; set; }
        public decimal? MostKills { get; set; }
        public decimal? KillAvg { get; set; }
        public decimal? LeastDeaths { get; set; }
        public decimal? MostAssists { get; set; }
        public int? LongestGameSeconds { get; set; }
        public int? ShortestGameSeconds { get; set; }
        public decimal? GameSecondsAvg { get; set; }
        public int? HeroCount { get; set; }
    }

    public partial class BattlepassPredictionPlayerType
    {
        public int? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? MatchCount { get; set; }
        public decimal? KillAvg { get; set; }
        public int? MostKills { get; set; }
        public decimal? DeathAvg { get; set; }
        public decimal? AssistAvg { get; set; }
        public int? MostAssists { get; set; }
        public decimal? LastHitAvg { get; set; }
        public int? MostLastHits { get; set; }
        public int? MostGoldPerMinute { get; set; }
        public int? GoldPerMinuteAvg { get; set; }
        public int? HeroCount { get; set; }
    }

    public partial class BattlepassPredictionTournamentType
    {
        public ICollection<BattlepassPredictionIdValueType> HeroesPicked { get; set; }
        public ICollection<BattlepassPredictionIdValueType> HeroesBanned { get; set; }
        public ICollection<BattlepassPredictionIdValueType> TotalKills { get; set; }
        public ICollection<BattlepassPredictionIdValueType> LongestGame { get; set; }
        public ICollection<BattlepassPredictionIdValueType> SoloKills { get; set; }
        public ICollection<BattlepassPredictionIdValueType> SoloDeaths { get; set; }
        public ICollection<BattlepassPredictionIdValueType> SoloAssists { get; set; }
        public ICollection<BattlepassPredictionIdValueType> SoloGoldPerMinute { get; set; }
    }

    public partial class BattlepassPredictionIdValueType
    {
        public long? Id { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class RoshQuery
    {
        public ICollection<RoshGlobalStatType> Stats { get; set; }
    }

    public partial class RoshGlobalStatType
    {
        public RoshDifficultyEnum? Difficulty { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public decimal? MaxScore { get; set; }
    }

    public partial class NewsItemType
    {
        public long? Id { get; set; }
        public string Title { get; set; }
        public string Uri { get; set; }
        public string Author { get; set; }
        public string Contents { get; set; }
        public string FeedLabel { get; set; }
        public long? Date { get; set; }
        public string FeedName { get; set; }
    }

    public partial class ServerStatusType
    {
        public bool? IsRedisOnline { get; set; }
        public SteamApiDetailType SteamApiDetail { get; set; }
        public RabbitDetailType RabbitDetail { get; set; }
    }

    public partial class SteamApiDetailType
    {
        public bool? IsOnline { get; set; }
        public ICollection<SteamApiDetailOutageType> Outages { get; set; }
    }

    public partial class SteamApiDetailOutageType
    {
        public int? SecondsOffline { get; set; }
        public long? DateTime { get; set; }
    }

    public partial class RabbitDetailType
    {
        public long? LastUpdated { get; set; }
        public bool? IsOnline { get; set; }
        public RabbitQueueDetailType MatchHistory { get; set; }
        public RabbitQueueDetailType MatchDetail { get; set; }
        public RabbitQueueDetailType MatchDetailDelay { get; set; }
        public RabbitQueueDetailType MatchStats { get; set; }
        public RabbitQueueDetailType SteamAccount { get; set; }
        public RabbitQueueDetailType MatchLive { get; set; }
    }

    public partial class RabbitQueueDetailType
    {
        public int? QueueCount { get; set; }
        public double? QueueInRate { get; set; }
        public double? QueueOutRate { get; set; }
    }

    public partial class LanguageType
    {
        public byte? Id { get; set; }
        public string LanguageCode { get; set; }
        public string DisplaLanguageNameyName { get; set; }
    }

    public partial class SearchType
    {
        public ICollection<SteamAccountType> Players { get; set; }
        public ICollection<MatchType> Matches { get; set; }
        public ICollection<LeagueType> Leagues { get; set; }
        public ICollection<TeamType> Teams { get; set; }
        public ICollection<SteamAccountType> ProPlayers { get; set; }
        public ICollection<SteamAccountType> Casters { get; set; }
        public GuildType Guild { get; set; }
        public ICollection<DireTideCustomGameMatchType> DireTideMatches { get; set; }
    }

    public partial class HeroStatsQuery
    {
        public ICollection<HeroPositionTimeDetailType> Stats { get; set; }
        public ICollection<HeroDryadType> MatchUp { get; set; }
        public ICollection<HeroItemPurchaseType> ItemFullPurchase { get; set; }
        public ICollection<HeroItemStartingPurchaseType> ItemStartingPurchase { get; set; }
        public ICollection<HeroItemBootPurchaseType> ItemBootPurchase { get; set; }
        public ICollection<HeroNeutralItemType> ItemNeutral { get; set; }
        public ICollection<HeroLaneOutcomeType> LaneOutcome { get; set; }
        public HeroMatchupType HeroVsHeroMatchup { get; set; }
        public ICollection<HeroAbilityTalentType> Talent { get; set; }
        public ICollection<HeroWinHourType> WinHour { get; set; }
        public ICollection<HeroWinDayType> WinDay { get; set; }
        public ICollection<HeroWinWeekType> WinWeek { get; set; }
        public ICollection<HeroWinMonthType> WinMonth { get; set; }
        public ICollection<HeroWinGameVersionType> WinGameVersion { get; set; }
        public ICollection<HeroGuideListType> Guide { get; set; }
        public ICollection<HeroRampageObjectType> Rampages { get; set; }
        public ICollection<HeroAbilityMinType> AbilityMinLevel { get; set; }
        public ICollection<HeroAbilityMaxType> AbilityMaxLevel { get; set; }
        public ICollection<HeroBanType> BanDay { get; set; }
    }

    public partial class HeroDryadType
    {
        public short? HeroId { get; set; }
        public ICollection<HeroStatsHeroDryadType> With { get; set; }
        public long? MatchCountWith { get; set; }
        public ICollection<HeroStatsHeroDryadType> Vs { get; set; }
        public long? MatchCountVs { get; set; }
    }

    public partial class HeroStatsHeroDryadType
    {
        public short? HeroId1 { get; set; }
        public short? HeroId2 { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public long? Kills { get; set; }
        public long? MatchCount { get; set; }
        public long? Deaths { get; set; }
        public long? Assists { get; set; }
        public long? Networth { get; set; }
        public long? Duration { get; set; }
        public long? WinCount { get; set; }
        public long? FirstBloodTime { get; set; }
        public long? Cs { get; set; }
        public long? Dn { get; set; }
        public long? GoldEarned { get; set; }
        public long? Xp { get; set; }
        public long? HeroDamage { get; set; }
        public long? TowerDamage { get; set; }
        public long? HeroHealing { get; set; }
        public long? Level { get; set; }
        public double? Synergy { get; set; }
        public double? WinRateHeroId1 { get; set; }
        public double? WinRateHeroId2 { get; set; }
        public double? WinsAverage { get; set; }
    }

    public partial class HeroItemPurchaseType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? ItemId { get; set; }
        public int? Instance { get; set; }
        public long? Time { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
        public double? WinsAverage { get; set; }
    }

    public partial class HeroItemStartingPurchaseType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? ItemId { get; set; }
        public int? Instance { get; set; }
        public bool? WasGiven { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
        public double? WinsAverage { get; set; }
    }

    public partial class HeroItemBootPurchaseType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? ItemId { get; set; }
        public int? Instance { get; set; }
        public long? Time { get; set; }
        public double? TimeAverage { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
        public double? WinAverage { get; set; }
        public long? Kills { get; set; }
        public double? KillsAverage { get; set; }
        public long? Deaths { get; set; }
        public double? DeathsAverage { get; set; }
        public long? Assists { get; set; }
        public double? AssistsAverage { get; set; }
        public long? GoldEarned { get; set; }
        public double? GoldEarnedAverage { get; set; }
        public long? Xp { get; set; }
        public double? XpAverage { get; set; }
        public long? Activations { get; set; }
        public double? ActivationsAverage { get; set; }
        public long? ActivationTime { get; set; }
        public double? ActivationsTimeAverage { get; set; }
    }

    public partial class HeroNeutralItemType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? ItemId { get; set; }
        public ItemType Item { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
        public long? EquippedMatchCount { get; set; }
        public long? EquippedMatchWinCount { get; set; }
    }

    public partial class ItemType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public string DisplayName { get; set; }
        public string ShortName { get; set; }
        public bool? IsSupportFullItem { get; set; }
        public ItemLanguageType Language { get; set; }
        public ItemStatType Stat { get; set; }
        public ICollection<ItemAttributeType> Attributes { get; set; }
        public ICollection<ItemComponentType> Components { get; set; }
        public string Image { get; set; }
    }

    public partial class ItemLanguageType
    {
        public string DisplayName { get; set; }
        public string Description { get; set; }
        public ICollection<string> Lore { get; set; }
        public ICollection<string> Notes { get; set; }
        public ICollection<string> Attributes { get; set; }
    }

    public partial class ItemStatType
    {
        public long? Behavior { get; set; }
        public long? UnitTargetType { get; set; }
        public long? UnitTargetTeam { get; set; }
        public long? UnitTargetFlags { get; set; }
        public byte? FightRecapLevel { get; set; }
        public ICollection<int> CastRange { get; set; }
        public ICollection<decimal> CastPoint { get; set; }
        public ICollection<decimal> ManaCost { get; set; }
        public ICollection<decimal> ChannelTime { get; set; }
        public string SharedCooldown { get; set; }
        public int? Cost { get; set; }
        public string ShopTags { get; set; }
        public string Aliases { get; set; }
        public string Quality { get; set; }
        public bool? IsSellable { get; set; }
        public bool? IsDroppable { get; set; }
        public bool? IsPurchasable { get; set; }
        public bool? IsSideShop { get; set; }
        public bool? IsStackable { get; set; }
        public bool? IsPermanent { get; set; }
        public bool? IsHideCharges { get; set; }
        public bool? IsRequiresCharges { get; set; }
        public bool? IsDisplayCharges { get; set; }
        public bool? IsSupport { get; set; }
        public bool? IsAlertable { get; set; }
        public bool? IsTempestDoubleClonable { get; set; }
        public short? StockMax { get; set; }
        public short? InitialCharges { get; set; }
        public short? InitialStock { get; set; }
        public int? StockTime { get; set; }
        public short? InitialStockTime { get; set; }
        public bool? IsRecipe { get; set; }
        public bool? NeedsComponents { get; set; }
        public short? UpgradeItem { get; set; }
        public short? UpgradeRecipe { get; set; }
        public short? ItemResult { get; set; }
        public short? NeutralItemDropTime { get; set; }
        public NeutralItemTierEnum? NeutralItemTier { get; set; }
    }

    public partial class ItemAttributeType
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public partial class ItemComponentType
    {
        public byte? Index { get; set; }
        public short? ComponentId { get; set; }
    }

    public partial class HeroLaneOutcomeType
    {
        public int? HeroId1 { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public long? MatchCount { get; set; }
        public long? DrawCount { get; set; }
        public long? WinCount { get; set; }
        public long? LossCount { get; set; }
        public long? StompWinCount { get; set; }
        public long? StompLossCount { get; set; }
        public long? MatchWinCount { get; set; }
        public long? CsCount { get; set; }
        public short? HeroId2 { get; set; }
    }

    public partial class HeroMatchupType
    {
        public ICollection<HeroDryadType> Advantage { get; set; }
        public ICollection<HeroDryadType> Disadvantage { get; set; }
    }

    public partial class HeroAbilityTalentType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? AbilityId { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
        public long? Time { get; set; }
        public double? WinsAverage { get; set; }
        public double? TimeAverage { get; set; }
    }

    public partial class HeroWinHourType
    {
        public long? Hour { get; set; }
        public short? HeroId { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class HeroWinDayType
    {
        public long? Day { get; set; }
        public short? HeroId { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class HeroWinWeekType
    {
        public long? Week { get; set; }
        public short? HeroId { get; set; }
        public byte? DurationMinute { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class HeroWinMonthType
    {
        public long? Month { get; set; }
        public short? HeroId { get; set; }
        public byte? DurationMinute { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class HeroWinGameVersionType
    {
        public short? GameVersionId { get; set; }
        public short? HeroId { get; set; }
        public byte? DurationMinute { get; set; }
        public int? WinCount { get; set; }
        public int? MatchCount { get; set; }
    }

    public partial class HeroGuideListType
    {
        public short? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public ICollection<HeroGuideType> Guides { get; set; }
    }

    public partial class HeroGuideType
    {
        public short? HeroId { get; set; }
        public long? SteamAccountId { get; set; }
        public long? MatchId { get; set; }
        public MatchType Match { get; set; }
        public MatchPlayerType MatchPlayer { get; set; }
        public long? CreatedDateTime { get; set; }
        public ICollection<short> ItemIds { get; set; }
        public ICollection<short> NeutralItemIds { get; set; }
    }

    public partial class HeroRampageObjectType
    {
        public long? MatchId { get; set; }
        public MatchType Match { get; set; }
        public short? Time { get; set; }
        public long? SteamAccountId { get; set; }
        public ICollection<short> HeroIds { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class HeroAbilityMinType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? AbilityId { get; set; }
        public int? Level { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
    }

    public partial class HeroAbilityMaxType
    {
        public int? HeroId { get; set; }
        public int? Week { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public int? AbilityId { get; set; }
        public int? Level { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
    }

    public partial class HeroBanType
    {
        public short? HeroId { get; set; }
        public int? Day { get; set; }
        public RankBracketBasicEnum? BracketBasicIds { get; set; }
        public long? MatchCount { get; set; }
        public long? WinCount { get; set; }
    }

    public partial class ConstantQuery
    {
        public HeroType Hero { get; set; }
        public ICollection<HeroType> Heroes { get; set; }
        public ICollection<RoleType> Roles { get; set; }
        public ItemType Item { get; set; }
        public ICollection<ItemType> Items { get; set; }
        public AbilityType Ability { get; set; }
        public ICollection<AbilityType> Abilities { get; set; }
        public ICollection<GameModeType> GameModes { get; set; }
        public ICollection<LobbyTypeType> LobbyTypes { get; set; }
        public ICollection<ClusterType> Clusters { get; set; }
        public ICollection<RegionType> Regions { get; set; }
        public GameVersionType GameVersion { get; set; }
        public ICollection<GameVersionType> GameVersions { get; set; }
        public NpcType Npc { get; set; }
        public ICollection<NpcType> Npcs { get; set; }
        public ICollection<PatchNoteLanguageType> PatchNotes { get; set; }
        public ICollection<AbilityCustomGameType> CustomAbilities { get; set; }
        public ICollection<ModifierType> Modifiers { get; set; }
        public ICollection<ProSteamAccountType> ProSteamAccounts { get; set; }
        public ICollection<TeamType> PopularTeamIds { get; set; }
        public ICollection<SteamAccountType> Casters { get; set; }
        public ICollection<SteamAccountType> TiWinners { get; set; }
    }

    public partial class RoleType
    {
        public short? RoleId { get; set; }
        public string Name { get; set; }
        public string LangKey { get; set; }
    }

    public partial class GameModeType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
    }

    public partial class LobbyTypeType
    {
        public int? Id { get; set; }
        public string Name { get; set; }
    }

    public partial class ClusterType
    {
        public int? Id { get; set; }
        public short? RegionId { get; set; }
    }

    public partial class RegionType
    {
        public byte? Id { get; set; }
        public string Name { get; set; }
        public string ClientName { get; set; }
        public string DisplayName { get; set; }
        public string LeaderboardDivision { get; set; }
        public string LangKey { get; set; }
        public double? Latitude { get; set; }
        public double? Longitude { get; set; }
        public string Code { get; set; }
        public byte? MatchGroup { get; set; }
        public string WeekendTourneyDivision { get; set; }
    }

    public partial class GameVersionType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public long? AsOfDateTime { get; set; }
    }

    public partial class NpcType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public NpcStatType Stat { get; set; }
    }

    public partial class NpcStatType
    {
        public decimal? Level { get; set; }
        public decimal? StatusHealth { get; set; }
        public decimal? StatusHealthRegen { get; set; }
        public decimal? StatusMana { get; set; }
        public decimal? StatusManaRegen { get; set; }
        public decimal? MovementSpeed { get; set; }
        public decimal? MovementTurnRate { get; set; }
        public decimal? DayTimeVision { get; set; }
        public decimal? NightTimeVision { get; set; }
        public decimal? AttackRangeBuffer { get; set; }
        public decimal? AttackRange { get; set; }
        public bool? IsNeutralUnitType { get; set; }
        public bool? IsAncient { get; set; }
        public bool? CanBeDominated { get; set; }
        public bool? AutoAttacksByDefault { get; set; }
        public decimal? AttackDamageMin { get; set; }
        public decimal? AttackDamageMax { get; set; }
        public decimal? AttackRate { get; set; }
        public decimal? AttackAnimationPoint { get; set; }
        public decimal? ProjectileSpeed { get; set; }
        public string TeamName { get; set; }
        public string CombatClassAttack { get; set; }
        public string CombatClassDefend { get; set; }
        public string UnitRelationshipClass { get; set; }
        public decimal? AttackDesire { get; set; }
        public bool? HasInventory { get; set; }
        public bool? WakesNeutrals { get; set; }
    }

    public partial class PatchNoteLanguageType
    {
        public string Id { get; set; }
        public short? GameVersionId { get; set; }
        public byte? LanguageId { get; set; }
        public byte? Index { get; set; }
        public short? AbilityId { get; set; }
        public short? ItemId { get; set; }
        public short? HeroId { get; set; }
        public PatchNoteType? GeneralId { get; set; }
        public string Text { get; set; }
    }

    public partial class ModifierType
    {
        public short? Id { get; set; }
        public string Name { get; set; }
        public int? BuffDuration { get; set; }
        public bool? IsRoot { get; set; }
        public bool? IsStun { get; set; }
        public bool? IsSilence { get; set; }
        public bool? IsInvisible { get; set; }
        public bool? IsShackle { get; set; }
        public bool? IsHex { get; set; }
        public bool? IsSleep { get; set; }
        public bool? IsCyclone { get; set; }
        public bool? IsTaunt { get; set; }
        public bool? IsDisarm { get; set; }
        public bool? IsBlind { get; set; }
        public bool? IsEthereal { get; set; }
        public bool? IsMovementSlow { get; set; }
        public bool? IsAttackSlow { get; set; }
        public bool? IsBreak { get; set; }
        public bool? IsArmorReduce { get; set; }
        public bool? IsAttackReduce { get; set; }
        public bool? IsMute { get; set; }
        public bool? IsDamageAmplified { get; set; }
        public bool? IsMovementDebuff { get; set; }
        public bool? IsKnockback { get; set; }
        public bool? IsWeaken { get; set; }
        public bool? IsItem { get; set; }
        public bool? IsBanished { get; set; }
    }

    public partial class LeaderboardQuery
    {
        public SteamAccountSeasonActiveLeaderboardType Season { get; set; }
        public PlayerHeroDotaPlusLeaderboardRankResponseType DotaPlus { get; set; }
        public ICollection<DotaPlusWeekType> DotaPlusWeek { get; set; }
        public ICollection<HeroDotaPlusLeaderboardRankTopType> DotaPlusTopLevels { get; set; }
        public PlayerBattlePassResponseType BattlePass { get; set; }
        public ICollection<PlayerBattlePassGroupByType> BattlePassGroupBy { get; set; }
        public PlayerCoachingLeaderboardResponseType Coaching { get; set; }
        public ICollection<GuildType> Guild { get; set; }
        public ICollection<PlayerLeaderBoardByHeroType> Hero { get; set; }
    }

    public partial class SteamAccountSeasonActiveLeaderboardType
    {
        public int? PlayerCount { get; set; }
        public ICollection<SteamAccountSeasonActiveLeaderboardRankType> Players { get; set; }
        public ICollection<SteamAccountSeasonActiveLeaderboardCountryDataType> CountryData { get; set; }
        public ICollection<SteamAccountSeasonActiveLeaderboardPositionDataType> PositionData { get; set; }
        public ICollection<TeamType> TeamData { get; set; }
        public ICollection<int> TeamIdData { get; set; }
    }

    public partial class SteamAccountSeasonActiveLeaderboardRankType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public short? AvgImp { get; set; }
        public LeaderboardDivision? DivisionId { get; set; }
        public long? LastUpdateDateTime { get; set; }
        public short? MatchCount { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public byte? PositionValue { get; set; }
        public short? Rank { get; set; }
        public short? RankShift { get; set; }
        public short? TopHeroOne { get; set; }
        public short? TopHeroTwo { get; set; }
        public short? TopHeroThree { get; set; }
        public byte? WinRate { get; set; }
    }

    public partial class SteamAccountSeasonActiveLeaderboardCountryDataType
    {
        public string CountryCode { get; set; }
        public int? PlayerCount { get; set; }
    }

    public partial class SteamAccountSeasonActiveLeaderboardPositionDataType
    {
        public MatchPlayerPositionType? Position { get; set; }
        public int? PlayerCount { get; set; }
    }

    public partial class PlayerHeroDotaPlusLeaderboardRankResponseType
    {
        public ICollection<HeroDotaPlusLeaderboardRankType> Players { get; set; }
    }

    public partial class DotaPlusWeekType
    {
        public int? Week { get; set; }
        public int? Active { get; set; }
        public int? Expired { get; set; }
    }

    public partial class HeroDotaPlusLeaderboardRankTopType
    {
        public short? HeroId { get; set; }
        public long? SteamAccountId { get; set; }
        public byte? Level { get; set; }
        public long? CreatedDateTime { get; set; }
        public SteamAccountType SteamAccount { get; set; }
    }

    public partial class PlayerBattlePassResponseType
    {
        public ICollection<PlayerBattlePassType> Players { get; set; }
        public ICollection<int> Levels { get; set; }
    }

    public partial class PlayerBattlePassType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? Level { get; set; }
    }

    public partial class PlayerBattlePassGroupByType
    {
        public string Id { get; set; }
        public long? PlayerCount { get; set; }
        public long? SumLevels { get; set; }
        public long? PlayerCountAt { get; set; }
    }

    public partial class PlayerCoachingLeaderboardResponseType
    {
        public ICollection<PlayerCoachingLeaderboardType> Players { get; set; }
        public ICollection<int> Levels { get; set; }
    }

    public partial class PlayerCoachingLeaderboardType
    {
        public long? SteamAccountId { get; set; }
        public SteamAccountType SteamAccount { get; set; }
        public int? Rating { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
        public long? FirstMatchDateTime { get; set; }
        public long? LastMatchDateTime { get; set; }
    }

    public partial class LiveQuery
    {
        public MatchLiveType Match { get; set; }
        public ICollection<MatchLiveType> Matches { get; set; }
    }

    public partial class VendorQuery
    {
        public DotaNextQuery DotaNext { get; set; }
        public TwitchTrackerPlayerType TwitchTracker { get; set; }
    }

    public partial class DotaNextQuery
    {
        public ICollection<DotaNextWithAllyType> Enemy { get; set; }
        public ICollection<DotaNextWithAllyType> Ally { get; set; }
        public ICollection<ICollection<MatchPlayerItemPurchaseEventType>> PlayerHero { get; set; }
    }

    public partial class DotaNextWithAllyType
    {
        public long? SteamAccountId { get; set; }
        public int? LifetimeMatchCount { get; set; }
        public int? LifetimeWinMatchCount { get; set; }
    }

    public partial class TwitchTrackerPlayerType
    {
        public long? SteamAccountId { get; set; }
        public PlayerBehaviorActivity? Activity { get; set; }
        public string Name { get; set; }
        public string Avatar { get; set; }
        public int? Rank { get; set; }
        public int? LeaderboardRank { get; set; }
        public string ProPlayerName { get; set; }
        public int? MatchCountLast100 { get; set; }
        public int? WinCountLast100 { get; set; }
        public int? UniqueHeroLast100 { get; set; }
        public int? CoreCountLast100 { get; set; }
        public ICollection<TwitchTrackerPlayerHeroType> TopHeroLast100 { get; set; }
        public ICollection<TwitchTrackerPlayerMatchType> Matches { get; set; }
    }

    public partial class TwitchTrackerPlayerHeroType
    {
        public int? HeroId { get; set; }
        public int? MatchCount { get; set; }
        public int? WinCount { get; set; }
    }

    public partial class TwitchTrackerPlayerMatchType
    {
        public long? MatchId { get; set; }
        public int? HeroId { get; set; }
        public MatchLaneType? Lane { get; set; }
        public MatchPlayerRoleType? Role { get; set; }
        public MatchPlayerPositionType? Position { get; set; }
        public short? KillCount { get; set; }
        public short? DeathCount { get; set; }
        public short? AssistCount { get; set; }
        public long? EndDateTime { get; set; }
        public bool? IsVictory { get; set; }
        public byte? Award { get; set; }
    }

    public partial class DotaMutation
    {
        public YogurtMutation Yogurt { get; set; }
        public DotaUserMutation User { get; set; }
        public AdminMutation Admin { get; set; }
        public RoshMutation Rosh { get; set; }
        public bool? RetryMatchDownload { get; set; }
    }

    public partial class YogurtMutation
    {
        public MatchReplayUploadTeamType CreateTeam { get; set; }
        public bool? UpdateTeam { get; set; }
        public bool? AddTeamMember { get; set; }
        public bool? UpdateTeamMember { get; set; }
        public bool? SetTeamMemberDefaultTeam { get; set; }
        public bool? RemoveTeamMember { get; set; }
        public bool? Update { get; set; }
        public bool? Validate { get; set; }
        public bool? Invalidate { get; set; }
        public bool? Delete { get; set; }
        public bool? LinkSeriesId { get; set; }
        public bool? RemoveSeriesId { get; set; }
        public bool? ImportMatch { get; set; }
        public bool? ImportPickBans { get; set; }
    }

    public partial class DotaUserMutation
    {
        public bool? ReadAllFeed { get; set; }
        public bool? ValidateEmail { get; set; }
        public bool? UnsubscribeEmail { get; set; }
        public bool? UpdateProfile { get; set; }
        public bool? FollowPlayer { get; set; }
        public bool? UnfollowPlayer { get; set; }
        public bool? UpdateFollowing { get; set; }
        public bool? UpdateAllFollowing { get; set; }
        public bool? UpdateFollowingFavorite { get; set; }
        public bool? FollowLeague { get; set; }
        public bool? UnfollowLeague { get; set; }
        public bool? ApplyStratzApiKey { get; set; }
        public bool? CheckPublicDotaAccount { get; set; }
    }

    public partial class AdminMutation
    {
        public bool? MergeProSteamAccount { get; set; }
        public bool? DeleteProSteamAccount { get; set; }
    }

    public partial class RoshMutation
    {
        public long? Create { get; set; }
        public bool? Update { get; set; }
    }

    public partial class DotaSubscription
    {
        public TotalMatchCountType MatchCount { get; set; }
        public TotalPlayerCountType PlayerCount { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ILiveEventType FeedLive { get; set; }
        public MatchLiveType MatchLive { get; set; }
        public MatchLiveType MatchLiveLeague { get; set; }
    }

    public partial class TotalMatchCountType
    {
        public long? MatchCount { get; set; }
    }

    public partial class TotalPlayerCountType
    {
        public long? PlayerCount { get; set; }
    }

    public partial interface ILiveEventType
    {
    }

    public partial class LiveEventPlayerRampageType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? RampageCount { get; set; }
    }

    public partial class LiveEventPlayerWinStreakType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public byte? WinStreakCount { get; set; }
    }

    public partial class LiveEventPlayerHeroWinStreakType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? WinStreakCount { get; set; }
    }

    public partial class LiveEventPlayerHeroKillsType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? KillCount { get; set; }
    }

    public partial class LiveEventPlayerHeroAssistsType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? AssistCount { get; set; }
    }

    public partial class LiveEventPlayerHeroBuildingDamageType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public int? BuildingDamage { get; set; }
    }

    public partial class LiveEventPlayerHeroHealingType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public int? HealingAmount { get; set; }
    }

    public partial class LiveEventPlayerHeroHeroDamageType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public int? HeroDamage { get; set; }
    }

    public partial class LiveEventPlayerHeroGoldPerMinuteType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public short? GoldPerMinute { get; set; }
    }

    public partial class LiveEventPlayerHeroExpPerMinuteType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public short? ExpPerMinute { get; set; }
    }

    public partial class LiveEventPlayerHeroHighImpType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? Imp { get; set; }
    }

    public partial class LiveEventPlayerHeroDotaPlusLevelType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? Level { get; set; }
    }

    public partial class LiveEventPlayerRankUpType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public byte? Rank { get; set; }
    }

    public partial class LiveEventProPlayerLiveType : ILiveEventType
    {
        public ICollection<SteamAccountType> SteamAccounts { get; set; }
        public MatchLiveType Match { get; set; }
    }

    public partial class LiveEventPlayerHeroItemPurchaseType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public short? ItemId { get; set; }
        public byte? ItemCount { get; set; }
    }

    public partial class LiveEventPlayerHeroDewardType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public MatchType Match { get; set; }
        public short? HeroId { get; set; }
        public byte? DewardCount { get; set; }
    }

    public partial class LiveEventMatchDireTideStompType : ILiveEventType
    {
        public DireTideCustomGameMatchType Match { get; set; }
    }

    public partial class LiveEventPlayerDireTideCandyScoredType : ILiveEventType
    {
        public SteamAccountType SteamAccount { get; set; }
        public DireTideCustomGameMatchType Match { get; set; }
        public short? HeroId { get; set; }
        public short? CandyScored { get; set; }
    }
    #endregion
}

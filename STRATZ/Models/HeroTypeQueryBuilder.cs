// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroTypeQueryBuilder : GraphQlQueryBuilder<HeroTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "shortName" },
                new GraphQlFieldMetadata { Name = "aliases", IsComplex = true },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "abilities", IsComplex = true, QueryBuilderType = typeof(HeroAbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "roles", IsComplex = true, QueryBuilderType = typeof(HeroRoleTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "language", IsComplex = true, QueryBuilderType = typeof(HeroLanguageTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "talents", IsComplex = true, QueryBuilderType = typeof(HeroTalentTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(HeroStatTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "HeroType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public HeroTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public HeroTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public HeroTypeQueryBuilder WithShortName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("shortName", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptShortName()
        {
            return ExceptField("shortName");
        }

        public HeroTypeQueryBuilder WithAliases(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("aliases", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptAliases()
        {
            return ExceptField("aliases");
        }

        public HeroTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public HeroTypeQueryBuilder WithAbilities(HeroAbilityTypeQueryBuilder heroAbilityTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("abilities", alias, heroAbilityTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptAbilities()
        {
            return ExceptField("abilities");
        }

        public HeroTypeQueryBuilder WithRoles(HeroRoleTypeQueryBuilder heroRoleTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("roles", alias, heroRoleTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public HeroTypeQueryBuilder WithLanguage(HeroLanguageTypeQueryBuilder heroLanguageTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("language", alias, heroLanguageTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public HeroTypeQueryBuilder WithTalents(HeroTalentTypeQueryBuilder heroTalentTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("talents", alias, heroTalentTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptTalents()
        {
            return ExceptField("talents");
        }

        public HeroTypeQueryBuilder WithStats(HeroStatTypeQueryBuilder heroStatTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, heroStatTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HeroTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }
    }
}

// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerAbilityTypeQueryBuilder : GraphQlQueryBuilder<PlayerAbilityTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "abilityId" },
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "gameVersionId" },
                new GraphQlFieldMetadata { Name = "abilityType", IsComplex = true, QueryBuilderType = typeof(AbilityTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isTalent" }
            };

        protected override string TypeName { get { return "PlayerAbilityType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerAbilityTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public PlayerAbilityTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PlayerAbilityTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public PlayerAbilityTypeQueryBuilder WithGameVersionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gameVersionId", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptGameVersionId()
        {
            return ExceptField("gameVersionId");
        }

        public PlayerAbilityTypeQueryBuilder WithAbilityType(AbilityTypeQueryBuilder abilityTypeQueryBuilder, QueryBuilderParameter<int?> gameVerionId = null, QueryBuilderParameter<int?> langaugeId = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (gameVerionId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "gameVerionId", ArgumentValue = gameVerionId} );

            if (langaugeId != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "langaugeId", ArgumentValue = langaugeId} );

            return WithObjectField("abilityType", alias, abilityTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public PlayerAbilityTypeQueryBuilder ExceptAbilityType()
        {
            return ExceptField("abilityType");
        }

        public PlayerAbilityTypeQueryBuilder WithIsTalent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTalent", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerAbilityTypeQueryBuilder ExceptIsTalent()
        {
            return ExceptField("isTalent");
        }
    }
}
